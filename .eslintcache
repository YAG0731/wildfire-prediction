[{"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js":"1","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js":"2","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js":"3","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js":"4","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js":"5","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js":"6","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js":"7","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js":"8","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js":"9","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js":"10","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js":"11","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js":"12","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js":"13","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js":"14","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/LandCoverDataAnalysis.js":"15","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js":"16","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js":"17","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js":"18","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js":"19","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js":"20","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js":"21","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js":"22","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/VegetationDataCollection.js":"23","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js":"24","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js":"25","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js":"26","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js":"27","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js":"28","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js":"29","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js":"30","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/ColorPicker.js":"31"},{"size":507,"mtime":1611785046824,"results":"32","hashOfConfig":"33"},{"size":5086,"mtime":1611785046824,"results":"34","hashOfConfig":"33"},{"size":1187,"mtime":1611785776562,"results":"35","hashOfConfig":"33"},{"size":6480,"mtime":1611785046806,"results":"36","hashOfConfig":"33"},{"size":6459,"mtime":1616003510620,"results":"37","hashOfConfig":"33"},{"size":916,"mtime":1611785046818,"results":"38","hashOfConfig":"33"},{"size":17220,"mtime":1615998351042,"results":"39","hashOfConfig":"33"},{"size":8432,"mtime":1611785046819,"results":"40","hashOfConfig":"33"},{"size":12182,"mtime":1611785046819,"results":"41","hashOfConfig":"33"},{"size":5786,"mtime":1611785046817,"results":"42","hashOfConfig":"33"},{"size":10714,"mtime":1613519047496,"results":"43","hashOfConfig":"33"},{"size":4781,"mtime":1611785401088,"results":"44","hashOfConfig":"33"},{"size":13806,"mtime":1611785046807,"results":"45","hashOfConfig":"33"},{"size":13774,"mtime":1611785452254,"results":"46","hashOfConfig":"33"},{"size":13871,"mtime":1611785469360,"results":"47","hashOfConfig":"33"},{"size":16776,"mtime":1615514765627,"results":"48","hashOfConfig":"33"},{"size":44158,"mtime":1616379639178,"results":"49","hashOfConfig":"33"},{"size":12526,"mtime":1616131340159,"results":"50","hashOfConfig":"33"},{"size":8664,"mtime":1611785046818,"results":"51","hashOfConfig":"33"},{"size":10911,"mtime":1611785046818,"results":"52","hashOfConfig":"33"},{"size":14576,"mtime":1611785748164,"results":"53","hashOfConfig":"33"},{"size":13678,"mtime":1611785485440,"results":"54","hashOfConfig":"33"},{"size":21227,"mtime":1618442710269,"results":"55","hashOfConfig":"33"},{"size":609,"mtime":1611785616345,"results":"56","hashOfConfig":"33"},{"size":488,"mtime":1611785597669,"results":"57","hashOfConfig":"33"},{"size":2028,"mtime":1611785576691,"results":"58","hashOfConfig":"33"},{"size":3884,"mtime":1611785046805,"results":"59","hashOfConfig":"33"},{"size":10094,"mtime":1611785046806,"results":"60","hashOfConfig":"33"},{"size":15325,"mtime":1618442626943,"results":"61","hashOfConfig":"33"},{"size":1501,"mtime":1614819787812,"results":"62","hashOfConfig":"33"},{"size":2115,"mtime":1617434059324,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"at6vxe",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"66"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"146","usedDeprecatedRules":"66"},"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js",[],["147","148"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js",["149"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\nimport WeatherDataAnalysis from './DataAnalysisComponents/WeatherDataAnalysis';\nimport FireHistoryDataAnalysis from './DataAnalysisComponents/FireHistoryDataAnalysis';\nimport LandCoverDataAnalysis from './DataAnalysisComponents/LandCoverDataAnalysis';\nimport SatelliteDataAnalysis from './DataAnalysisComponents/SatelliteDataAnalysis';\n\nclass DataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Weather',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n            landCoverComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <WeatherDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireHistoryDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            landCoverComponent: <LandCoverDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <SatelliteDataAnalysis lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '20%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '20%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Data Analysis</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Weather'?\n                                    <button style={styles.buttonGroupButtonActive}>Weather</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Weather</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire History'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire History</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire History</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Land Cover'?\n                                    <button style={styles.buttonGroupButtonActive}>Land Cover</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Land Cover</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Satellite'?\n                                    <button style={styles.buttonGroupButtonActive}>Satellite</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Satellite</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Weather'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Satellite'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire History'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Land Cover'?\n                                this.state.landCoverComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js",["150","151","152","153","154","155","156","157"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport L from 'leaflet';\nimport MyNavbar from './Components/MyNavbar';\nimport CaFireData from './DetectionComponents/fire_history_ca.json';\n// import ImageDetection from './ImageDetection';\nimport WildfireDetection from './WildfireDetection';\n\nimport RedDot from './images/redDot.svg';\nimport FireIcon from './images/fire.png';\nimport RealisticFireIcon from './images/realistic_fire.png'\n\nvar myIcon = L.icon({\n    iconUrl: RealisticFireIcon,\n    iconSize: [30,40],\n});;\n\nclass Monitoring extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n            currentFire: null,\n            latitude: 37.334665328,\n            longitude: -121.875329832,\n            selectedYear: 'Current',\n            currentView: 'Monitoring',\n            events: null\n        };\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n        this.makeFireMarkers = this.makeFireMarkers.bind(this);\n        this.handleFireSelect = this.handleFireSelect.bind(this);\n        // this.handleCitySearch = this.handleCitySearch.bind(this);\n       \n        this.handleYearChange = this.handleYearChange.bind(this);\n        this.changeView = this.changeView.bind(this);\n        this.makeCurrentFireMarkers = this.makeCurrentFireMarkers.bind(this);\n        this.setCurrentFire = this.setCurrentFire.bind(this);\n    }\n\n    async componentDidMount(){\n        const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n        const {events} = await res.json()\n        // console.log(events)\n        this.setState({\n            events: events\n        })\n    }\n\n    onCountyClick(event){\n        // console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    makeFireMarkers(year){\n        var fireMarkers = []\n        Object.keys(CaFireData).map((key) => {\n            if(CaFireData[key]['POO_LATITUDE']!=null && CaFireData[key]['POO_LONGITUDE']!=null){\n                if(year==CaFireData[key]['DISCOVER_YEAR']){\n                fireMarkers.push( \n                    <Marker position={[CaFireData[key]['POO_LATITUDE'], CaFireData[key]['POO_LONGITUDE']]}\n                    onclick={this.handleFireSelect} key={key} acres={20} icon={myIcon}>\n                        <Popup>\n                            <h5>{CaFireData[key]['FIRE_NAME']}</h5>\n                            <p style={{display:''}}>Acres Burned: {CaFireData[key]['TOTAL_ACRES_BURNED']}</p>\n                            <p style={{display:''}}>Year: {CaFireData[key]['DISCOVER_YEAR']}</p>\n                        </Popup>\n                    </Marker>\n            );}\n        }})\n        return fireMarkers;\n    }\n\n    handleYearChange(event){\n        if(event.target.value == 'Current'){\n            myIcon = L.icon({\n                iconUrl: RealisticFireIcon,\n                iconSize: [24,32],\n            });\n        }\n        else{\n            myIcon = L.icon({\n                iconUrl: RedDot,\n                iconSize: [32,32],\n            });\n        }\n\n        this.setState({\n            currentFire:null, \n            selectedYear: event.target.value\n        });\n    }\n\n    handleFireSelect(event){\n        var fire = {\n            'name': event.target._popup.options.children[0].props.children,\n            'latitude': event.latlng.lat,\n            'longitude': event.latlng.lng,\n            'acres burned': event.target._popup.options.children[1].props.children,\n            'date': event.target._popup.options.children[2].props.children,  \n        }\n        this.setState({\n            currentFire: fire,\n        })\n    }\n\n    changeView(newView){\n        this.setState({\n            currentView: newView\n        })\n    }\n\n    makeCurrentFireMarkers(){\n        var markers = []\n        var events = this.state.events;\n        var e = null;\n\n        if(events != null){\n            for(var i=0; i<events.length; i++){\n                e = events[i]\n                var pos = [ e['geometries'][0]['coordinates'][1], e['geometries'][0]['coordinates'][0] ]\n\n                // console.log(e)\n\n                const fire = {\n                    'name': e['title'],\n                    'latitude': pos[0],\n                    'longitude': pos[1],\n                    'date': 'Current',\n                    'acres burned': 'Unknown',\n                }\n\n                if(pos[0] != undefined){\n                    markers.push(\n                        <Marker position={pos} key={i} onClick={this.setCurrentFire.bind(this, fire)} icon={myIcon}>\n                            <Popup>\n                                <h5>{e['title']}</h5>\n                                <p style={{display:''}}>Acres Burned: Unknown</p>\n                                <p style={{display:''}}>Year: Current</p>\n                            </Popup>\n                        </Marker>\n                    )\n                }\n            }\n        }\n        return markers\n    }\n\n    setCurrentFire(newFire){\n        this.setState({\n            currentFire: newFire\n        })\n    }\n\n    render(){        \n        // var position = [37.334665328, -121.875329832];\n        var fmarkers = null;\n        {\n            this.state.selectedYear == 'Current'?\n            fmarkers = this.makeCurrentFireMarkers()\n            :\n            fmarkers = this.makeFireMarkers(this.state.selectedYear)\n        }\n\n        // var fmarkers = this.makeFireMarkers(this.state.selectedYear);\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        var styles = {\n            buttonGroupButton: {\n                width: '20%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none'\n            },\n            buttonGroupButtonActive: {\n                width: '20%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Monitoring / Detection</h1>\n                    </div>\n\n                    {\n                        this.state.currentView == 'Monitoring'?\n                        \n                        <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                            <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                                <button style={styles.buttonGroupButtonActive}>Monitoring</button>\n                                <button style={styles.buttonGroupButton} onClick={this.changeView.bind(this, 'Detection')}>Detection</button>\n                            </div>\n                            <hr style={{margin:'0px'}}/>\n\n                            <div style={{width:\"100%\"}}>\n                                <Map style={{height:'calc(100vh - 140px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={[this.state.latitude, this.state.longitude]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.Overlay name=\"Show Counties\" >\n                                            <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                        </LayersControl.Overlay>\n\n                                        <LayersControl.Overlay name=\"Show Markers\" checked>\n                                            <FeatureGroup>\n                                                {fmarkers}\n                                            </FeatureGroup>\n                                        </LayersControl.Overlay>\n                                        \n                                    </LayersControl>\n                                </Map>\n\n                                <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                        <div style={{marginTop:'16px'}}>\n                                            <div className=\"col-lg-10 mb-3\">\n                                                <div className=\"input-group\" style={{width:'226px'}}>\n                                                    <label style={{width:'100%'}}>Select a Year\n                                                    <select className=\"form-control rounded-0\" value={this.state.selectedYear} onChange={this.handleYearChange}>\n                                                    <option value=\"2015\">2015</option>\n                                                    <option value=\"2016\">2016</option>\n                                                    <option value=\"2017\">2017</option>\n                                                    <option value=\"2018\">2018</option>\n                                                    <option value=\"2019\">2019</option>\n                                                    <option value='Current'>Current</option>\n                                                    </select>\n                                                    </label>\n                                                    <div className=\"input-group-prepend\">  \n                                                    </div>\n                                                </div>\n                                            </div>\n                                    \n                                        </div>\n                                        <hr style={{margin:'16px'}}/>\n{/* \n                                        <div style={{border:'1px solid #d9dadb', margin:'16px', padding:'10px', backgroundColor:'#E9ECEF'}}>\n                                            <h6>Time of Detection</h6>\n                                            <hr style={{margin:'0 0 6px 0'}}/>\n                                            <span style={dotStyles.redDot}></span>\n                                            &nbsp;&nbsp; 0 - 1 hour ago\n                                            <br/>\n                                            <span style={dotStyles.orangeDot}></span>\n                                            &nbsp;&nbsp; 1 - 6 hours ago\n                                            <br/>\n                                            <span style={dotStyles.greenDot}></span>\n                                            &nbsp;&nbsp; 6 - 12 hours ago\n                                            <br/>\n                                            <span style={dotStyles.blueDot}></span>\n                                            &nbsp;&nbsp; Past Fires\n                                            <br/>\n                                        </div> */}\n\n                                        <div style={{margin:'0 16px'}}>\n                                            <h4 style={{margin:'0'}}>Information</h4>\n                                            <hr style={{margin:'0'}}/>\n                                            <p>Fire Data From California Fire History</p>\n                                        </div>\n\n                                        <div style={{height:'100%', overflow:'auto', margin:'8px 16px'}}>\n                                        {\n                                            this.state.currentFire == null?\n                                            <p>Select a fire to view data</p>\n                                            :\n                                            <div>\n                                                <strong>Name: </strong>{this.state.currentFire.name}\n                                                <br/>\n                                                <strong>Latitude: </strong>{this.state.currentFire.latitude}\n                                                <br/>\n                                                <strong>Longitude: </strong>{this.state.currentFire.longitude}\n                                                <br/>\n                                                <strong>Year Of Occurance: </strong>{this.state.currentFire['date']}\n                                                <br/>\n                                                <strong>{this.state.currentFire['acres burned']}</strong>\n                                                <br/>\n                                            </div>\n                                        }\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        :\n                        <div>\n                            {/* <ImageDetection /> */}\n                            <WildfireDetection \n                                viewChange = {this.changeView}\n                            />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Monitoring;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js",["158"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport MyNavbar from './Components/MyNavbar';\n\nclass Risk extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n        }\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n    }\n\n    onCountyClick(event){\n        console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // console.log(county.properties.name);\n\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        const fireIcon = require('leaflet');\n        delete fireIcon.Icon.Default.prototype._getIconUrl;\n        fireIcon.Icon.Default.mergeOptions({\n            iconRetinaUrl: require(\"./images/fire.png\"),\n            iconUrl: require(\"./images/fire.png\"),\n            shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        });\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Risk Prediction</h1>\n                    </div>\n\n                    <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                        <div style={{width:\"100%\"}}>\n\n                            <Map style={{height:'calc(100vh - 72px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={position}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\">\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                    {/* <LayersControl.Overlay name=\"Show Markers\">\n                                        <FeatureGroup>\n                                            {\n                                                randomLocations.map(location => (\n                                                    <Marker position={location}>\n                                                        <Popup>\n                                                            <h6>\n                                                            Latitude: {location[0]}\n                                                            <br/>\n                                                            Longitude: {location[1]}\n                                                            </h6>\n                                                        </Popup>\n                                                    </Marker>\n                                                ))\n                                            }\n                                        </FeatureGroup>\n                                    </LayersControl.Overlay> */}\n                                </LayersControl>\n\n                            </Map>\n\n                            <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                <div style={{marginTop:'16px'}}>\n                                    <form onSubmit={this.handleCitySearch}>\n                                        <div className=\"col-lg-10 mb-3\">\n                                            <div className=\"input-group\" style={{width:'226px'}}>\n                                                <input type=\"text\" className=\"form-control rounded-0\" id=\"citySearchInput\" placeholder=\"City Name\" required />\n                                                <div className=\"input-group-prepend\">\n                                                    <input type=\"submit\" value=\"Search\" className=\"btn btn-primary btn-sm rounded-0\" id=\"inputGroupPrepend2\" style={{backgroundColor:'#1580fb'}}/>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                                <hr style={{margin:'16px'}}/>\n\n                                <div style={{height:'100%', overflow:'auto', margin:'16px'}}>\n                                    <h4>Select date:</h4>\n                                    <div >\n                                        <input type='date' className='input-group' style={{padding:'10px'}}/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Risk;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js",["159"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\n//import FireDetectionModEval  from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireDetectionModEval from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireRiskPredictionModEval from './ModelEvaluationComponents/FireRiskPredictionModEval';\nimport FireProgressionModEval from './ModelEvaluationComponents/FireProgressionModEval';\n\n\nclass ModelEvaluation extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Fire Detection',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <FireDetectionModEval lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireRiskPredictionModEval lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <FireProgressionModEval lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '30%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '30%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Model Evaluation</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Fire Detection'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Detection</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Detection</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Risk Prediction'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Risk Prediction</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Risk Prediction</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Progression'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Progression</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Progression</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Fire Detection'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Progression'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Risk Prediction'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default ModelEvaluation;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js",["160","161"],"import React from 'react';\nimport DetectionDetail from './DetectionComponents/DetectionDetail.js';\n// import './DetectionComponents/Pages.css';\n// import './DetectionComponents/WildfireDetection.css';\nimport './DetectionComponents/example-fire-detection.png';\nimport DetectionList from './DetectionComponents/DetectionList.js';\nimport DetectionImage from './DetectionComponents/DetectionImage.js';\n\n\nclass WildfireDetection extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      selectedFireImg: null,\n      bounding_boxes: [],\n      detection_scores: [],\n      detection_classes: [],\n      selectedFile: null,\n      loading: false,\n      inputFileUrl: null,\n      area: 'North California',\n      imageColor: 'True Color Composite',\n      date: null,\n      gotInputImage: false,\n    };\n\n    this.getFile = this.getFile.bind(this)\n\n  }\n\n  async componentDidMount(){\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = yyyy + '-' + mm + '-' + dd;\n\n    this.setState({\n      date: today\n    })\n\n    setTimeout(() => { this.getFile(); }, 10);\n\n  }\n\n  async getFile(){\n    this.setState({\n      gotInputImage: false\n    })\n    var url = 'https://wvs.earthdata.nasa.gov/api/v1/snapshot?REQUEST=GetSnapshot&&CRS=EPSG:4326&WRAP=DAY&LAYERS='    \n    var height = 800\n    if(this.state.imageColor === 'True Color Composite'){\n      url += 'MODIS_Terra_CorrectedReflectance_TrueColor'\n    }\n    else{\n      url += 'MODIS_Terra_CorrectedReflectance_Bands721'\n    }\n    url += '&FORMAT=image/jpeg&HEIGHT='+height+'&WIDTH='+height+'&BBOX='\n\n    if(this.state.area === 'North California'){\n      url += '37,-125,42,-120&TIME='\n    }\n    else{\n      url += '32,-122,39,-114&TIME='\n    }\n    url += this.state.date\n\n    const res = await fetch(url)\n    console.log(res)\n    const blob = await res.blob()\n    const file = new File([blob], 'image.jpg', {type: blob.type});\n    console.log(file)\n\n    this.setState({\n      selectedFile: file,\n      inputFileUrl: url,\n      gotInputImage: true\n    })\n  }\n\n  onFileChange = (event) => {\n    // Update the state\n    this.setState({ \n      inputFileUrl: URL.createObjectURL(event.target.files[0]),\n      selectedFile: event.target.files[0]\n    })\n    console.log(event.target.files[0])\n  }\n\n  // on file upload (click the upload button)\n  onFileUpload = () => {\n    console.log('running onFileUpload')\n    window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);  // scroll to bottom automatically\n\n    // Request made to the backend api\n    // Call to fire detection API\n    this.setState({ loading: true });\n    this.detectFire();\n    // wait 10 seconds to allow detectFire to process\n    setTimeout(() => { this.detectScore(); }, 8000);\n\n  }\n\n  // Makes a call to prediction api results\n  // which include detection boxes, scores, and classifications\n  async detectScore() {\n    console.log('running detect score')\n    // Fetch request to wpp module\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/result', {\n      method: 'POST'\n    })\n    .then((response) => {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          // The following function handles each data chunk\n          function push() {\n            // \"done\" is a Boolean and value a \"Uint8Array\"\n            reader.read().then(({ done, value }) => {\n              // Is there no more data to read?\n              if (done) {\n                // Tell the browser that we have finished sending data\n                controller.close();\n                return;\n              }\n              // Get the data and send it to the browser via the controller\n              controller.enqueue(value);\n              push();\n            });\n          };\n\n          push();\n        }\n      })\n\n    })\n    .then(stream => new Response(stream))\n    .then(response => {\n      response.json().then(data => ({\n        data: data,\n        status: response.status\n      }))\n      .then(res => {\n        const detectionBoxes = res.data.predictions[0].detection_boxes;\n        const detectionScores = res.data.predictions[0].detection_scores;\n        const detectionClasses = res.data.predictions[0].detection_classes;\n\n        this.setDetectionInfo(detectionBoxes, detectionScores, detectionClasses);\n      })\n    })\n    .catch(error => console.log(\"ERROR:\", error));\n\n  }\n\n  // Set the state for the detection info\n  setDetectionInfo = (boxes, scores, classes) => {\n    let i = 0,\n     realScores = [],\n     boundingBoxes = [],\n     realClasses = [];\n    while(scores[i] > 0.90) {\n      realScores.push(scores[i]);\n      i++;\n    }\n    for(let j = 0; j < i; j++) {\n      boundingBoxes.push(boxes[j]);\n      realClasses.push(classes[j]);\n    }\n\n    this.setState({\n      bounding_boxes: boundingBoxes,\n      detection_scores: realScores,\n      detection_classes: realClasses\n    })\n\n  }\n\n  // Comsumes the ReadableStream from the Fetch call\n  async detectFire() {\n    console.log('running detect fire')\n\n    const formData = new FormData();\n    formData.append('file', this.state.selectedFile);\n\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/predict', {\n      method: 'POST',\n      body: formData,\n\n    })\n    .then(res => {\n      // Start loading\n      //this.setState({ loading: true });\n\n      console.log(res)\n\n      const reader = res.body.getReader();\n      if(!res.ok) {\n        throw Error(\"Error getting the predict image\")\n      }\n      return new ReadableStream({\n        start(controller) {\n          return pump();\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              // When no more data needs to be consumed, close the stream\n              if (done) {\n                  controller.close();\n                  return;\n              }\n              // Enqueue the next data chunk into our target stream\n              controller.enqueue(value);\n              return pump();\n            });\n          }\n        }\n      })\n    })\n    .then(stream => new Response(stream))\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => {\n\n      // set the state of Fire Image URL to the made url\n      this.setState({\n        fireImgUrl: url,\n        loading: false\n      });\n    })\n    .catch(err => console.error(err));\n  }\n\n  // Fire Functions\n  onFireSelect = (fire) => {\n    this.setState({ selectedFire: fire });\n  }\n\n  render() {\n    var styles = {\n      buttonGroupButton: {\n          width: '20%',\n          backgroundColor: '#f0f0f0', \n          border: '1px solid grey',\n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius: '20px',\n          color:'black',\n          outline:'none'\n      },\n      buttonGroupButtonActive: {\n          width: '20%',\n          backgroundColor: '#1580fb', \n          border: '1px solid #1580fb',\n          color: 'white', \n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius:'20px',\n          outline:'none'\n      }\n    }\n\n    return (\n      <div>\n        <div>\n          <div style={{position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n            <div style={{margin:'10px 0 0 20px', width:'75vw'}}>\n\n              {/* <h1>Wildfire Detection</h1> */}\n              <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                  <button style={styles.buttonGroupButton} onClick={this.props.viewChange.bind(this, 'Monitoring')}>Monitoring</button>\n                  <button style={styles.buttonGroupButtonActive}>Detection</button>\n              </div>\n              <hr style={{margin:'0px'}}/>\n              \n              <div style={{margin:'10px'}}>\n\n                <div style={{display:'flex', justifyContent:'center'}}>\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({area: e.target.value}); setTimeout(()=>{ this.getFile()}, 10) }}>\n                    <option value='North California'>North California</option>\n                    <option value='South California'>South California</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({imageColor: e.target.value}); setTimeout(() =>{this.getFile()}, 10) }}>\n                    <option value='True Color Composite'>True Color Composite</option>\n                    <option value='False Color Composite'>False Color Composite</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <input type='date' onChange={(e)=>{this.setState({date: e.target.value}); setTimeout(()=>{this.getFile()}, 10)}}/>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <button className='btn btn-primary' onClick={this.onFileUpload}>Run detection</button>\n\n                </div>\n                <hr/>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%'}}>\n                  <h5 style={{fontWeight:'bold'}}>Input Image:</h5>\n                  <hr/>\n                  {this.state.area}, {this.state.imageColor}, {this.state.date}:\n                  <br/>\n                  <br/>\n\n                  {\n                    this.state.gotInputImage === false?\n                    <div>Loading...</div>\n                    :\n                    <img src={this.state.inputFileUrl} width='100%' />\n                  }\n                </div>\n                <br/>\n                \n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%', float:'left', marginBottom:'40px'}}>\n                  <h5 style={{fontWeight:'bold'}}>Output Image</h5>\n                  <hr/>\n                  <DetectionImage url={this.state.fireImgUrl} loading={this.state.loading} />\n                </div>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'38%', float:'right'}}>\n                  <h5 style={{fontWeight:'bold'}}>Detection List</h5>\n                  <hr/>\n                  <DetectionList\n                    boxes={this.state.bounding_boxes}\n                    scores={this.state.detection_scores}\n                    classes={this.state.detection_classes}\n                  />\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n\n};\n\nexport default WildfireDetection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js",["162","163"],"import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../css/MyNavbar.css';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass MyNavbar extends React.Component{\n    render(){        \n        var url = window.location.href;\n\n        return(\n            <div className=\"d-flex\" id=\"wrapper\">\n            <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\n                <div className=\"sidebar-heading\">\n                    <img src='https://upload.wikimedia.org/wikipedia/en/thumb/e/ec/San_Jose_State_Spartans_logo.svg/1200px-San_Jose_State_Spartans_logo.svg.png' alt='SJSU' width='40px' style={{margin:\"0 16px 0 0\"}}></img>\n                    SJSU Wildfire \n                </div>\n                <div className=\"list-group list-group-flush\">\n                    {\n                        url.substr(url.length - 4).includes('com')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" style={{borderRight:'6px solid #3d3d3d'}} >Data Collection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" >Data Collection</Link>\n                    }\n                    {\n                        url.includes('preprocessing')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\" style={{borderRight:'6px solid #3d3d3d'}}>Preprocessing</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\">Preprocessing</Link>\n                    }\n                    {\n                        url.includes('analysis')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" style={{borderRight:'6px solid #3d3d3d'}} >Data Analysis</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" >Data Analysis</Link>\n                    }\n                    {\n                        url.includes('detection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Monitoring / Detection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\">Fire Monitoring / Detection</Link>\n                    }\n                    {/* {\n                        url.includes('imageDetection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Detection 2</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\">Fire Detection 2</Link>\n                    } */}\n                    {\n                        url.includes('progression')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Progression</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\">Fire Progression</Link>\n                    }\n                    {\n                        url.includes('risk')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Risk Prediction</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\">Fire Risk Prediction</Link>\n                    }\n                    {\n                        url.includes('evaluation')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" style={{borderRight:'6px solid #3d3d3d'}}>Model Evaluation</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" >Model Evaluation</Link>\n                    }\n                    {/* {\n                        url.includes('flask')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" style={{borderRight:'6px solid #3d3d3d'}}>Flask examples</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" >Flask examples</Link>\n                    } */}\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\n\n\nexport default MyNavbar;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js",["164","165","166","167","168","169","170","171","172"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass SatelliteDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Avg fires per year': '8',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.epa.gov/sites/production/files/styles/large/public/2016-07/wildfires-figure3-2016.png' alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                            <img src='https://eoimages.gsfc.nasa.gov/images/imagerecords/145000/145498/amazon_tamo_2012-2019_count_lrg.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default SatelliteDataAnalysis;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js",["173","174","175","176","177","178","179","180","181"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireHistoryDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Avg fires per year': '8',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='fireHistory'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.nctrails.org/sites/default/files/Fire-Causes-Graph.png' alt='fire' width='60%' style={{margin:'20px 0'}}/>\n                            <img src='https://akfireinfo.files.wordpress.com/2015/07/jun30acreage.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireHistoryDataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/LandCoverDataAnalysis.js",["182","183","184","185","186","187","188","189","190"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass LandCoverDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Most common land cover': 'fields',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='landCover'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.nrcs.usda.gov/Internet/FSE_MEDIA/stelprdb1083137.png' alt='landCover' width='60%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.researchgate.net/publication/335177876/figure/fig4/AS:792146537877504@1565873860020/Land-Cover-Graph-of-Mataram-in-2008-2013-and-2017.png' alt='landCover2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default LandCoverDataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js",["191","192","193","194","195","196","197"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass SatelliteDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NASA',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            startDate: null,\n            endDate: null,\n            day: null,\n            month: null,\n            year: null,\n            nasaImageArea: 'North California',\n            nasaImageColor: 'True Color Composite',\n            nasaImageDate: '2021-03-10',\n            nasaImageUrl: null,\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleMarkerChange = this.handleMarkerChange.bind(this);\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        // this.getNasaData = this.getNasaData.bind(this);\n        this.handleNasaAreaChange = this.handleNasaAreaChange.bind(this);\n        this.handleNasaColorChange = this.handleNasaColorChange.bind(this);\n        this.handleNasaDateChange = this.handleNasaDateChange.bind(this);\n        this.getNasaImageUrl = this.getNasaImageUrl.bind(this);\n    }\n\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: year\n        })\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        }, ()=>{this.getData()})\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        var startDate = this.state.startDate\n        var endDate = this.state.endDate\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USGS'){\n            this.getUSGSdata(startDate, endDate);\n        }\n        else if(this.state.source === 'NASA'){\n            this.getNasaImageUrl();\n        }\n    }\n\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleMarkerChange(newMarker){\n        this.setState({\n            currentMarker: newMarker,\n        })\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource\n        }, () => {this.getData()})\n    }\n\n    handleNasaAreaChange(newArea){\n        this.setState({\n            nasaImageArea: newArea\n        }, () => {this.getNasaImageUrl()})\n    }\n\n    handleNasaColorChange(newColor){\n        this.setState({\n            nasaImageColor: newColor\n        }, () => {this.getNasaImageUrl()})\n    }\n\n    handleNasaDateChange(newDate){\n        this.setState({\n            nasaImageDate: newDate\n        }, () => {this.getNasaImageUrl()})\n    }\n\n    getNasaImageUrl(){\n        var url = 'https://wvs.earthdata.nasa.gov/api/v1/snapshot?REQUEST=GetSnapshot&&CRS=EPSG:4326&WRAP=DAY&LAYERS='\n\n        var height = 800\n        if(this.state.nasaImageColor === 'True Color Composite'){\n            url += 'MODIS_Terra_CorrectedReflectance_TrueColor'\n        }\n        else{\n            url += 'MODIS_Terra_CorrectedReflectance_Bands721'\n        }\n        url += '&FORMAT=image/jpeg&HEIGHT='+height+'&WIDTH='+height+'&BBOX='\n\n        if(this.state.nasaImageArea === 'North California'){\n            url += '37,-125,42,-120&TIME='\n        }\n        else{\n            url += '32,-122,39,-114&TIME='\n        }\n        url += this.state.nasaImageDate\n\n        this.setState({\n            nasaImageUrl: url,\n        })\n    }\n\n    render(){\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    dataSource = {this.state.source}\n                    handleNasaAreaChange = {this.handleNasaAreaChange}\n                    handleNasaColorChange={this.handleNasaColorChange}\n                    handleNasaDateChange={this.handleNasaDateChange}\n                    handleSourceChange={this.handleSourceChange}\n                />\n                <div>\n                    <div>\n                        {\n                            this.state.currentView === 'Table View'?\n                            <div>\n                                {\n                                    this.state.source == 'NASA'?\n                                    <div>\n                                        <img src={this.state.nasaImageUrl} width='50%' style={{float:'left', border:'1px solid black'}}/>\n                                        <div style={{float:\"right\", width:'45%'}}>\n                                            Area: {this.state.nasaImageArea}<br/>\n                                            Bands: {this.state.nasaImageColor}<br/>\n                                            Date: {this.state.nasaImageDate}<br/>\n                                        </div>\n                                    </div>\n                                    :\n                                    !this.state.data?\n                                    <div>Getting data...</div>\n                                    :\n                                    <MDBDataTable responsive\n                                    striped\n                                    bordered\n                                    data={this.state.data}\n                                    />\n                                }\n                            </div>\n                            :\n                            <div>\n                                <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                    </LayersControl>\n\n                                    <MarkerClusterGroup>\n                                        {\n                                            this.state.data == null?\n                                            <div>Waiting for data to load...</div>\n                                            :\n                                            this.state.data.rows.map(\n                                                marker => {\n                                                    return (\n                                                        <Marker position={[marker['latitude'], marker['longitude']]} key={marker['entityId']} onclick={() => this.handleMarkerChange(marker)}>\n                                                            <Popup>\n                                                                <p>Object ID: {marker['entityId']}</p>\n                                                                <p>Lat: {marker['latitude']}</p>\n                                                                <p>Lon: {marker['longitude']}</p>\n                                                            </Popup>\n                                                        </Marker>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </MarkerClusterGroup>\n                                </Map>\n                                <div style={{float:'right', padding:'6px', width:'230px'}}>\n                                    {\n                                        this.state.currentMarker == null?\n                                        <h3>Select a fire for more info.</h3>\n                                        :\n                                        <div>\n                                            <h3>Fire Information</h3>\n                                            <hr/>\n                                            {\n                                                this.state.features.map(\n                                                    feature => {\n                                                        return (\n                                                        <div>\n                                                            <strong>{feature}: </strong>{this.state.currentMarker[feature]}\n                                                            <br/>\n                                                            </div>\n                                                        )\n                                                    }\n                                                )\n                                            }\n\n                                        </div>\n                                    }\n                                </div>\n                                \n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default SatelliteDataCollection;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js",["198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON, FeatureGroup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\nimport BlueDot from '../images/blueDot.svg';\nimport StationIcon from '../images/satellite.png';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nconst myIcon = L.icon({\n    iconUrl: BlueDot,\n    iconSize: [28,28],\n});\n\nconst stationIcon = L.icon({\n    iconUrl: StationIcon,\n    iconSize: [36, 36],\n})\n\nclass WeatherDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'WRCC',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            noaaData: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            weatherStationData: null,\n            currentWeatherStation: null,\n            weatherStationFeatures: ['datacoverage', 'elevation', 'elevationUnit', 'id', 'latitude', 'longitude', 'maxdate', 'mindate', 'name'],\n            startDate: null,\n            endDate: null,\n            day: null,\n            month: null,\n            year: null,\n            wrcc_station: 'cald',\n            wrccData: null,\n\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleWeatherStationChange = this.handleWeatherStationChange.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.getNoaaFeatureData = this.getNoaaFeatureData.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        this.handleWrccStationChange = this.handleWrccStationChange.bind(this);\n        this.getWrccData = this.getWrccData.bind(this);\n        this.nextDay = this.nextDay.bind(this);\n        this.prevDay = this.prevDay.bind(this);\n        this.getWrccFeatureData = this.getWrccFeatureData.bind(this);\n        this.makeWrccStationMarkers = this.makeWrccStationMarkers.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        })\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        }, ()=>{this.getData()})\n\n    }\n\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        // var startDate = document.getElementById('startDateInput').value;\n        // var endDate = document.getElementById('endDateInput').value;\n        var startDate = this.state.startDate;\n        var endDate = this.state.endDate;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source == 'NOAA'){\n            this.getNOAAdata(startDate, endDate);\n        }\n        else if(this.state.source == 'WRCC'){\n            this.getWrccData();\n        }\n    }\n\n    getWrccData(){\n        console.log('getting data from WRCC')\n        var wrcc_url = 'https://wrcc.dri.edu/cgi-bin/wea_daysum2.pl?stn='+this.state.wrcc_station+'&day='+this.state.day+'&mon='+this.state.month+'&yea='+this.state.year+'&unit=E'\n\n        // console.log('date: '+this.state.day+'/'+this.state.month+'/'+this.state.year)\n\n        fetch('/api/getWrccData', {\n            method: 'POST',\n            body: JSON.stringify({\n                url: wrcc_url,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            // console.log(response)\n            var rows = response['rows']\n\n            var columnNames = [\n                'Hour','Total Solar Rad','Ave. mph', 'Wind V. Dir. Deg','Max mph','Air Temp Mean Deg. F','Fuel Temp Mean Deg. F.','Fuel Moisture Mean Percent','Relative Humidity Mean Percent','Dew Point Deg','Wet Buld F.','Total Percip. inches'\n            ]\n\n            var temp = [];\n            for(var i = 0; i<rows.length; i++){\n                var row = rows[i]\n                var newRowEntry = {}\n                for(var j = 0; j<columnNames.length; j++){\n                    var text = row[j].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n                    if(text == ''){\n                        text = ' '\n                    }\n                    newRowEntry[columnNames[j]] = text\n                }\n                temp.push(newRowEntry)\n            }\n\n            var cols = [];\n            for(var i=0; i<columnNames.length; i++){\n                var newColEntry = {\n                    label: columnNames[i],\n                    field: columnNames[i],\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: temp,\n            }\n\n            this.setState({\n                wrccData: data,\n            })\n\n        })\n    }\n\n    getNOAAdata(start, end){\n        console.log('getting data from NOAA')\n        this.setState({\n            noaaData: null,\n        })\n\n        fetch(prodUrl + '/api/getNOAAdata', {\n            method:'POST',\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            var rawData = response['rawData'];\n            var weatherStationData = response['weatherStationData']\n            weatherStationData = JSON.parse(weatherStationData)\n            weatherStationData = weatherStationData['results'];\n\n            this.setState({\n                weatherStationData: weatherStationData,\n            })\n\n            var parsedData = JSON.parse(rawData);\n\n            var cols = [];\n            var rows = [];\n        \n            for(const key in parsedData){\n                var newColEntry = {\n                    label: key,\n                    field: key,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            // console.log(parsedData);\n            if(parsedData['DATE'] != null){\n                for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \n                    var newRowEntry = {}\n                    for(const key in parsedData){\n                        var val = parsedData[key][i];\n                        if (val == null){\n                            val = ''\n                        }\n                        newRowEntry[key] = val\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                noaaData: data,\n            })\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        // console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleWeatherStationChange(newWeatherStation){\n        this.setState({\n            currentWeatherStation: newWeatherStation,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        var countyName = county.properties.name;\n        layer.bindPopup(countyName);\n\n        layer.on({\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    getNoaaFeatureData(feature){\n        var data = [];\n        var temp = {};\n        for(var row of this.state.noaaData['rows']){\n            if(!(row['STATION'] in temp)){\n                temp[row['STATION']] = {\n                    'x': [],\n                    'y': [],\n                    type: 'line',\n                    name: row['STATION'],\n                }\n            }\n            temp[row['STATION']]['x'].push(row['DATE']);\n            temp[row['STATION']]['y'].push(row[feature]);\n        }\n        for(var station of Object.keys(temp)){\n            data.push(temp[station]);\n        }\n        return data;\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource,\n        }, () => {\n            this.getData();\n        })\n    }\n\n    handleWrccStationChange(newStation){\n        this.setState({\n            wrcc_station: newStation,\n        }, ()=>{this.getWrccData()})\n    }\n\n    nextDay(){\n        var currentDate = '20'+this.state.year + '-' + parseInt(this.state.month) + '-' + parseInt(this.state.day)\n        var d = new Date(currentDate)\n\n        d.setDate(d.getDate() + 1);\n\n        var year = d.getFullYear();\n        var month = d.getMonth();\n        var day = d.getDate()\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        }, ()=>{this.getWrccData()})\n\n    }\n\n    prevDay(){\n        var currentDate = '20'+this.state.year + '-' + parseInt(this.state.month) + '-' + parseInt(this.state.day)\n        var d = new Date(currentDate)\n\n        d.setDate(d.getDate() - 1);\n\n        var year = d.getFullYear();\n        var month = d.getMonth();\n        var day = d.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        }, ()=>{this.getWrccData()})\n    }\n\n    getWrccFeatureData(feature){\n        var data = [{\n            'x': [],\n            'y': [],\n            type: 'line'\n        }]\n        for(var i=0; i<this.state.wrccData.rows.length; i++){\n            data[0]['y'].push(parseFloat(this.state.wrccData.rows[i][feature]))\n            data[0]['x'].push(this.state.wrccData.rows[i]['Hour'])\n        }\n        return data\n    }\n\n    makeWrccStationMarkers(){\n        var markers = []\n        for (const [key, value] of Object.entries(wrcc_station_locations)) {\n            var pos = [wrcc_station_locations[key]['lat'], wrcc_station_locations[key]['lon']]\n\n            markers.push(\n                <Marker position={pos} key={key} onClick={this.handleWrccStationChange.bind(this, key)} icon={myIcon}>\n\n                </Marker>\n            )\n        }\n        return markers\n    }\n\n    render(){\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        var wrccStationMarkers = this.makeWrccStationMarkers()\n\n        var tavg = null;\n        var tmin = null;\n        var tmax = null;\n        if(this.state.noaaData != null){\n            tavg = this.getNoaaFeatureData('TAVG');\n            tmin = this.getNoaaFeatureData('TMIN');\n            tmax = this.getNoaaFeatureData('TMAX');\n        }\n\n        var wrcc_mph = null;\n        var wrcc_temp = null;\n        var wrcc_precip = null;\n        if(this.state.wrccData != null){\n            wrcc_mph = this.getWrccFeatureData('Ave. mph');\n            wrcc_temp = this.getWrccFeatureData('Air Temp Mean Deg. F')\n            wrcc_precip = this.getWrccFeatureData('Total Percip. inches')\n        }\n        // console.log(wrcc_temp)\n\n        var wrcc_url = 'https://wrcc.dri.edu/cgi-bin/wea_daysum2.pl?stn='+this.state.wrcc_station+'&day='+this.state.day+'&mon='+this.state.month+'&yea='+this.state.year+'&unit=E'\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='weather'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                    handleSourceChange = {this.handleSourceChange}\n                    handleWrccStationChange = {this.handleWrccStationChange}\n                    dataSource = {this.state.source}\n                />\n\n                <div>\n                    {/* {\n                        this.state.currentView === 'Table View'? */}\n                        <div>\n                            {\n                                this.state.source == 'NOAA'?\n                                <div>\n                                    {\n                                        !this.state.noaaData?\n                                        <div>Getting data...</div>\n                                        :\n                                        <div>\n                                            {\n                                                this.state.currentView == 'Map View'?\n                                                <div>\n                                                    <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', height:'400px', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                                        <LayersControl position=\"topright\">\n\n                                                            <LayersControl.BaseLayer name=\"Topology\" checked>\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Street\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Satellite\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Terrain\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Dark\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.Overlay name=\"Show Counties\" >\n                                                                <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                                            </LayersControl.Overlay>\n\n                                                        </LayersControl>\n\n\n                                                        <MarkerClusterGroup>\n                                                            {\n                                                                this.state.weatherStationData == null?\n                                                                <div>Waiting for data to load...</div>\n                                                                :\n                                                                this.state.weatherStationData.map(\n                                                                    marker => {\n                                                                        return (\n                                                                            <Marker position={[marker['latitude'], marker['longitude']]} key={marker['id']} onclick={() => this.handleWeatherStationChange(marker)} icon={stationIcon}>\n                                                                                <Popup>\n                                                                                    <p>ID: {marker['id']}</p>\n                                                                                    <p>Lat: {marker['latitude']}</p>\n                                                                                    <p>Lon: {marker['longitude']}</p>\n                                                                                </Popup>\n                                                                            </Marker>\n                                                                        )\n                                                                    }\n                                                                )\n                                                            }\n                                                        </MarkerClusterGroup>\n                                                    </Map>\n\n                                                    <div style={{float:'right', padding:'6px', width:'230px'}}>\n                                                    {\n                                                        this.state.currentWeatherStation == null?\n                                                        <h3>Select a weather station for more info.</h3>\n                                                        :\n                                                        <div>\n                                                            <h3>Station info.</h3>\n                                                            <hr/>\n                                                            {\n                                                                this.state.weatherStationFeatures.map(\n                                                                    feature => {\n                                                                        return (\n                                                                        <div key={feature}>\n                                                                            <strong>{feature}: </strong>{this.state.currentWeatherStation[feature]}\n                                                                            <br/>\n                                                                            </div>\n                                                                        )\n                                                                    }\n                                                                )\n                                                            }\n                                                        </div>\n                                                    }\n                                                    </div>\n\n                                                    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n                                                    <br/><br/><br/><br/><br/><br/>\n                                                    <hr/>\n                                                </div>\n                                                :\n                                                <div></div>\n                                            }\n\n                                            <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                                            <br/><br/>\n\n                                            <MDBDataTable responsive\n                                            striped\n                                            bordered\n                                            data={this.state.noaaData}\n                                            />\n                                            <br/>\n                                            <hr/>\n\n                                            <h4>Graphs</h4>\n                                            <br/>\n                                            <Plot\n                                                style = {{height:'400px'}}\n                                                data = {tavg}\n                                                layout = {{showlegend: true, title:'TAVG over time'}}\n                                                config = {{responsive:true }}\n                                            />\n                                            <br/>\n                                            <Plot\n                                                style = {{ height:'400px'}}\n                                                data = {tmin}\n                                                layout = {{showlegend:true, title: 'TMIN over time' }}\n                                                config = {{responsive:true }}\n                                            />\n                                            <br/>\n                                            <Plot\n                                                style = {{height:'400px'}}\n                                                data = {tmax}\n                                                layout = {{showlegend:true, title:'TMAX over time' }}\n                                                config = {{responsive:true }}\n                                            />\n                                        </div>\n                                    }\n                                </div>\n                                :\n                                this.state.source == 'WRCC'?\n                                <div>\n                                    {/* <iframe src={wrcc_url} height='500px' width='100%' /> */}\n                                    {\n                                        !this.state.wrccData?\n                                        <div>Getting data...</div>\n                                        :\n                                        <div>\n                                            <h5>{wrccStations[this.state.wrcc_station]} - {this.state.day}/{this.state.month}/{this.state.year} <span style={{color:'grey'}}>(d/m/y)</span></h5>\n                                            <br/>\n\n                                            {\n                                                this.state.currentView == 'Map View'?\n                                                <div>\n                                                    <Map style={{height:'300px', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={5} center={[this.state.lat, this.state.lon]}>\n                                                        <LayersControl position=\"topright\">\n\n                                                            <LayersControl.BaseLayer name=\"Topology\" checked>\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Street\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Satellite\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Terrain\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Dark\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.Overlay name=\"Show Counties\" >\n                                                                <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                                            </LayersControl.Overlay>\n\n\n                                                            <LayersControl.Overlay name=\"Show Markers\" checked>\n                                                                <FeatureGroup>\n                                                                    {wrccStationMarkers}\n                                                                </FeatureGroup>\n                                                            </LayersControl.Overlay>\n\n                                                        </LayersControl>\n\n                                                    </Map>\n                                                    <div style={{width:'240px', float:'right'}}>\n                                                        <h4>Station details</h4>\n                                                        Name: {wrcc_station_locations[this.state.wrcc_station]['name']} <br/>\n                                                        Lat: {wrcc_station_locations[this.state.wrcc_station]['lat']} <br/>\n                                                        Lon: {wrcc_station_locations[this.state.wrcc_station]['lon']} <br/>\n                                                        Elevation: {wrcc_station_locations[this.state.wrcc_station]['elevation']} <br/>\n                                                    </div>\n                                                    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n                                                    <hr/>\n                                                </div>\n                                                :\n                                                <div></div>\n                                            }\n\n                                            <div style={{width:\"100%\", height:'60px'}}>\n                                                <button className='btn btn-light' style={{float:'left', width:'15%'}} onClick={this.prevDay}>Prev day</button>\n\n                                                <button className='btn btn-light' style={{float:'right', width:\"15%\"}} onClick={this.nextDay}>Next day</button>\n                                            </div>\n                                            <div style={{width:'100%'}}>\n                                                <MDBDataTable \n                                                responsive\n                                                paging={false}\n                                                searching={false}\n                                                striped\n                                                bordered\n                                                data={this.state.wrccData}\n                                                />\n\n                                                <br/>\n                                                <hr/>\n\n                                                <h4>Graphs</h4>\n                                                <br/>\n                                                <Plot\n                                                    style = {{height:'400px'}}\n                                                    data = {wrcc_mph}\n                                                    layout = {{showlegend: true, title:'Ave. mph'}}\n                                                    config = {{responsive:true }}\n                                                />\n                                                <br/>\n                                                <Plot\n                                                    style = {{ height:'400px'}}\n                                                    data = {wrcc_temp}\n                                                    layout = {{showlegend:true, title: 'Air Temp Mean Deg. F'}}\n                                                    config = {{responsive:true }}\n                                                />\n                                                <br/>\n                                                <Plot\n                                                    style = {{height:'400px'}}\n                                                    data = {wrcc_precip}\n                                                    layout = {{showlegend:true, title:'Total Percip. inches' }}\n                                                    config = {{responsive:true }}\n                                                />\n                                            </div>\n                                        </div>\n                                    }\n                                </div>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        {/* :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n\n\n                                <MarkerClusterGroup>\n                                    {\n                                        this.state.weatherStationData == null?\n                                        <div>Waiting for data to load...</div>\n                                        :\n                                        this.state.weatherStationData.map(\n                                            marker => {\n                                                return (\n                                                    <Marker position={[marker['latitude'], marker['longitude']]} key={marker['id']} onclick={() => this.handleWeatherStationChange(marker)}>\n                                                        <Popup>\n                                                            <p>ID: {marker['id']}</p>\n                                                            <p>Lat: {marker['latitude']}</p>\n                                                            <p>Lon: {marker['longitude']}</p>\n                                                        </Popup>\n                                                    </Marker>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </MarkerClusterGroup>\n                            </Map>\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.currentWeatherStation == null?\n                                <h3>Select a weather station for more info.</h3>\n                                :\n                                <div>\n                                    <h3>Station info.</h3>\n                                    <hr/>\n                                    {\n                                        this.state.weatherStationFeatures.map(\n                                            feature => {\n                                                return (\n                                                <div key={feature}>\n                                                    <strong>{feature}: </strong>{this.state.currentWeatherStation[feature]}\n                                                    <br/>\n                                                    </div>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                            }\n                            </div>\n                        </div> \n                    } */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WeatherDataCollection;\n\nvar wrccStations = {\n    'cald':'Alder Spring',\n    'casc':'Ash Creek',\n    'catl':'Atlas Peak',\n    'cbac':'Backbone',\n    'cbal':'Bald Mtn Loc',\n    'cbat':'Batterson',\n    'cbbr':'Big Bar',\n    'cben':'Benton',\n    'cbir':'Big Rock',\n    'cbld':'Blue Door',\n    'cblm':'Blacks Mountain',\n    'cblw':'Blue Ridge (KNF)',\n    'cbml':'Blue Mountain Lookout',\n    'cbmo':'Blue Mountain',\n    'cbmt':'Brush Mountain',\n    'cbnr':'Banner Road'\n}\n\nvar wrcc_station_locations = {\n    'cald': {\n        'name': 'Alder Springs',\n        'lat': 39.651389,\n        'lon': -122.723611,\n        'elevation': 4300\n    },\n    'casc': {\n        'name': 'Ash Creek',\n        'lat': 41.276944,\n        'lon': -121.979444,\n        'elevation': 3200\n    },\n    'catl': {\n        'name': 'Atlas Peak',\n        'lat': 38.474444,\n        'lon': -122.264722,\n        'elevation': 1934\n    },\n    'cbac': {\n        'name': 'Backbone',\n        'lat': 40.889167,\n        'lon': -123.142222,\n        'elevation': 4700\n    },\n    'cbal': {\n        'name': 'Bald Mtn Loc',\n        'lat': 38.905556,\n        'lon': -120.697222,\n        'elevation': 4680\n    },\n    'cbat': {\n        'name': 'Batterson',\n        'lat': 37.231944,\n        'lon': -119.508333,\n        'elevation': 3160\n    },\n    'cbbr': {\n        'name': 'Big Bar',\n        'lat': 40.733333,\n        'lon': -123.233333,\n        'elevation': 1500\n    },\n    'cben': {\n        'name': 'Benton',\n        'lat': 37.843056,\n        'lon': -118.477778,\n        'elevation': 5450\n    },\n    'cbir': {\n        'name': 'Big Rock',\n        'lat': 38.039444,\n        'lon': -122.57,\n        'elevation': 1500\n    },\n    'cbld': {\n        'name': 'Blue Door',\n        'lat': 41.054722,\n        'lon': -120.3375,\n        'elevation': 5615\n    },\n    'cblm': {\n        'name': 'Blacks Mountain',\n        'lat': 40.77,\n        'lon': -121.168056,\n        'elevation': 7050\n    },\n    'cbml': {\n        'name': 'Blue Mountain Lookout',\n        'lat': 41.829722,\n        'lon': -120.865833,\n        'elevation': 5740\n    },\n    'cbmt': {\n        'name': 'Brush Mountain',\n        'lat': 40.915556,\n        'lon': -123.668611,\n        'elevation': 3988\n    },\n    'cbnr': {\n        'name': 'Atlas Peak',\n        'lat': 38.284444,\n        'lon': -120.489722,\n        'elevation': 2803\n    }\n}","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js",["211","212","213","214","215"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\nimport FireIcon from '../images/realistic_fire.png';\n\nvar myIcon = L.icon({\n    iconUrl: FireIcon,\n    iconSize: [30, 40]\n})\n\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireHistoryDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentFire: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleFireChange(newFire){\n        this.setState({\n            currentFire: newFire,\n        })\n    }\n\n    render(){\n\n        // delete L.Icon.Default.prototype._getIconUrl;\n        // L.Icon.Default.mergeOptions({\n        //     iconRetinaUrl: require('../images/fire.png'),\n        //     iconUrl: require('../images/fire.png'),\n        //     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n        // });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='fireHistory'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                />\n                <div>\n                    {\n                        this.state.currentView === 'Table View'?\n                        <div>\n                        {\n                            !this.state.data?\n                            <div>Getting data...</div>\n                            :\n                            <MDBDataTable responsive\n                            striped\n                            bordered\n                            data={this.state.data}\n                            />\n                        }\n                    </div>\n                    :\n                    <div>\n                        <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                            <LayersControl position=\"topright\">\n\n                                <LayersControl.BaseLayer name=\"Topology\" checked>\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Street\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Satellite\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Terrain\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Dark\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                            </LayersControl>\n\n                            <MarkerClusterGroup>\n                                {\n                                    this.state.data == null?\n                                    <div>Waiting for data to load...</div>\n                                    :\n                                    this.state.data.rows.map(\n                                        marker => {\n                                            return (\n                                                <Marker position={[marker['POO_LATITUDE'], marker['POO_LONGITUDE']]} key={marker['OBJECTID']} onclick={() => this.handleFireChange(marker)} icon={myIcon}>\n                                                    <Popup>\n                                                        <p>Object ID: {marker['OBJECTID']}</p>\n                                                        <p>Lat: {marker['POO_LATITUDE']}</p>\n                                                        <p>Lon: {marker['POO_LONGITUDE']}</p>\n                                                    </Popup>\n                                                </Marker>\n                                            )\n                                        }\n                                    )\n                                }\n                            </MarkerClusterGroup>\n                        </Map>\n                        <div style={{float:'right', padding:'6px', width:'230px'}}>\n                        {\n                            this.state.currentFire == null?\n                            <h3>Select a fire for more info.</h3>\n                            :\n                            <div>\n                                <h3>Fire Information</h3>\n                                <hr/>\n                                {\n                                    this.state.features.map(\n                                        feature => {\n                                            return (\n                                               <div key={feature}>\n                                                   <strong>{feature}: </strong>{this.state.currentFire[feature]}\n                                                   <br/>\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                        }\n                        </div>\n                    </div>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default FireHistoryDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js",["216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireDetectionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Satellite Image Source': 'Landsat 8',\n                'Tensorflow Model Version': 'Faster RCNN v2.1',\n                'Fire  Detected': 'YES',\n                'Confidence Level': '97%',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData2 = this.getData2.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData2(){\n        <div style={{width:'100%', height:'50px'}}>\n            console.log(\"getData2\")\n            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='60%' style={{margin:'20px 0'}}/>\n        </div>\n    }\n\n    getNOAAdata(start, end){\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireDetection'\n                    getData2={this.getData2}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Detection for: </strong>{this.state.currentCounty} County   date:  {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation Results:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='45%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-prediction.png'} alt='fire' width='30%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-precision-recall.png'} alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                        </div>\n                        :\n                        <div>\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_1.png'} alt='fire2' width='70%' style={{margin:'20px 0'}} />\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_2.png'} alt='fire3' width='70%' style={{margin:'20px 0'}} />\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireDetectionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js",["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireProgressionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Fire Animation Start': 'Oct 20, 2007',\n                'Fire Animation End': 'Oct 24, 2007',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='actualPrediction'\n                    dataType='fireProgression'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County 2007-10-20  to 2007-10-24 \n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Prediction'?\n                        <div>\n                            <h3>Fire Spread Ground Truth:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='http://worldlywise.pbworks.com/f/1274641471/All_3D.gif' alt='fire' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <br/>\n                        </div>\n                        :\n                        <div>\n                            <hr/>\n                            <h3>Predicted Fire Progression:</h3>\n                            <hr/>\n                            <img src={process.env.PUBLIC_URL + 'images/spread.gif'} alt='spread2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n\n\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireProgressionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireRiskPredictionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Weather Model 1': 'SVM',\n                'Weather Model 2': 'XGBoost',\n                'Weather Model 3': 'Random Forest',\n                'Remote Sensing  Model 1': 'CNN',\n                'Remote Sensing  Model 2': 'MultiLayer Perceptron',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            console.log(rawData);\n            if(rawData != null){\n                if(rawData['error'] == null){\n                    var i = 0;\n                    for(i=0; i < rawData['features'].length; i++){\n                        var newRowEntry = {}\n                        for(var feature of this.state.features){\n                            var val = rawData['features'][i]['attributes'][feature];\n                            if(val == null){\n                                val = ''\n                            }\n                            newRowEntry[feature] = val;\n                        }\n                        rows.push(newRowEntry);\n                    }\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireRiskPrediction'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Risk Prediction  for: </strong>{this.state.currentCounty} County  date: {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <hr/>\n                        \n                       \n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n\n                        </div>\n                        :\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireRiskPredictionModEval;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js",["260","261","262","263","264","265","266"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass WeatherDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Avg temp': '78.6 F',\n                'Lowest temp': '46.9 F',\n                'Highest temp': '99.3 F',\n                'Avg windspeed': '9 mph',\n                'Lowest windspeed': '2 mph',\n                'Highest windspeed': '22 mph',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'NOAA'){\n            this.getNOAAdata(startDate, endDate);\n        }\n    }\n\n    getNOAAdata(start, end){\n        fetch(prodUrl + '/api/getNOAAdata', {\n            method:'POST',\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            var rawData = response['rawData'];\n            var weatherStationData = response['weatherStationData']\n            weatherStationData = JSON.parse(weatherStationData)\n            weatherStationData = weatherStationData['results'];\n\n            // console.log(weatherStationData);\n\n            this.setState({\n                weatherStationData: weatherStationData,\n            })\n\n            var parsedData = JSON.parse(rawData);\n\n            var cols = [];\n            var rows = [];\n        \n            for(const key in parsedData){\n                var newColEntry = {\n                    label: key,\n                    field: key,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(parsedData['DATE'] != null){\n                for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \n                    var newRowEntry = {}\n                    for(const key in parsedData){\n                        var val = parsedData[key][i];\n                        if (val == null){\n                            val = ''\n                        }\n                        newRowEntry[key] = val\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='weather'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://eldoradoweather.com/current/climate/images/San%20Diego.png' alt='weather' width='45%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.westjet.com/vacations/img/destinations/en-weather-charts/United-States-Hawaii/SAN-San-Diego_weather-chart.gif' alt='weather2' height='300px' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default WeatherDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/VegetationDataCollection.js",["267","268","269","270","271","272","273","274","275","276","277","278","279"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js",["280"],"import React from 'react';\nimport DetectionDetail from './DetectionDetail';\n\nconst DetectionList = ({ boxes, scores, classes }) => {\n  const fires = [];\n\n  if(scores.length == classes.length) {\n    for(let i = 0; i<boxes.length; i++) {\n      fires.push([boxes[i], scores[i], classes[i], i]);\n    }\n  }\n\n  const renderedList = fires.map((fire) => {\n    return (\n      <DetectionDetail\n        box={fire[0]}\n        score={fire[1]}\n        classification={fire[2]}\n        key={fire[4]}\n      />\n    );\n  });\n\nreturn <div className=\"ui relaxed divided list\">{renderedList}</div>\n}\n\nexport default DetectionList;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js",["281"],"import React from 'react'\n\nconst DetectionDetail = ({box, score, classification, key}) => {\n\n  let topLeftPoint = '',\n        bottomRightPoint = '',\n        detectionConfidences = 0,\n        entityClassification = '';\n  // if detail exists, parse the information given back\n  if(box && score && classification){\n\n    topLeftPoint = formatTopLeft(box);\n    bottomRightPoint = formatBottomRight(box);\n    detectionConfidences = formatPercent(score);\n    entityClassification = classification == 1 ? 'Fire' : 'Smoke';\n  }\n  else {\n    return (\n      <div className=\"ui card fluid\">\n        <div className=\"content\">\n          <p className=\"description\">No Image Selected...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ui card\">\n      <div className=\"content\">\n        <p className=\"header\">{entityClassification} Entity {key}</p>\n        \n        <div className=\"description\">\n          <table className=\"ui very basic collapsing celled table\">\n            <thead>\n              <tr>\n                <th>Detail</th>\n                <th>Info</th>\n              </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td>Classification</td>\n                <td>{entityClassification}</td>\n              </tr>\n              <tr>\n                <td>Confidence</td>\n                <td>{detectionConfidences}</td>\n              </tr>\n              <tr>\n                <td>Top Left Point</td>\n                <td>{topLeftPoint}</td>\n              </tr>\n              <tr>\n                <td>Bottom Right Point</td>\n                <td>{bottomRightPoint}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction formatTopLeft(box) {\n  return \"(\" + box[0].toFixed(3) + \", \" + box[1].toFixed(3) + \")\";\n}\n\nfunction formatBottomRight(box) {\n  return \" (\" + box[2].toFixed(3) + \", \" + box[3].toFixed(3) + \")\";\n}\n\nfunction formatPercent(score) {\n  return (score * 100).toFixed(1) + \"%\";\n}\n\nexport default DetectionDetail;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js",["282","283"],"import React from 'react';\nimport CountySelector from './CountySelector';\n\nclass FilterDivModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.changeStartDate = this.changeStartDate.bind(this);\n        this.changeEndDate = this.changeEndDate.bind(this);\n    }\n\n    changeStartDate(event){\n        this.props.handleStartDateChange(event.target.value);\n    }\n\n    changeEndDate(event){\n        this.props.handleEndDateChange(event.target.value);\n    }\n    \n    render(){\n        return(\n            <div>\n                <div style={{width:'100%', height:'50px'}}>\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\n                        {\n                            this.props.dataType === 'fireDetection'?\n                            'Fire Detection'\n                            :\n                            this.props.dataType === 'fireRiskPrediction'?\n                            'Fire Risk Prediction'\n                            :\n                            this.props.dataType === 'fireProgression'?\n                            'Fire Progression'\n                            :\n                            <div></div>\n                        }\n                    </h4>\n\n                    {\n                        this.props.pageType === 'dataCollection'?\n                            this.props.currentView === 'Table View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\n                        :\n                        this.props.pageType === 'dataAnalysis'?\n                            this.props.currentView === 'Statistic View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Graph View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\n                        :\n                        this.props.pageType === 'actualPrediction'?\n                            this.props.currentView === 'Actual'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Prediction</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Actual</button>\n                        :\n                        <div></div>\n                    }\n\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDivModEval}>\n                        Select \n                        &nbsp;\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <hr/>\n\n                <div style={{display:'none', height:'auto'}} id='filterDivModEval'>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Source: &nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Landsat 8'>Landsat 8</option>\n                                    <option value='GOES 16/17'>GOES 16/17</option>\n                                    <option value='MODIS/TERRA'>MODIS/TERRA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Weather Fire-History'>Weather Fire-History</option>\n                                    <option value='Remote-Sensing Fire-History'>Remote-Sensing Fire-History</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Fire History'>Fire History</option>\n                                    <option value='Remote Sensing'>Remote Sensing</option>\n                                    <option value='Land Cover'>Land Cover</option>\n                                    <option value='Waeather'>Weather</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <div style={{float:'right'}}>\n                            Location:&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                        </div>\n                        <br/>\n                        <br/>\n                        <br/>\n                    </div>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Model: &nbsp;&nbsp;&nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Faster RCNN'>Faster RCNN</option>\n                                    <option value='Efficient Net'>Efficient Net</option>\n                                    <option value='Retina Net'>Retina Net</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='SVM'>SVM</option>\n                                    <option value='XGBoost'>XGBoost</option>\n                                    <option value='Random Forest'>Random Forest</option>\n                                    <option value='Multi Layer Perceptron'>Multi Layer Perceptron</option>\n                                    <option value='CNN'>CNN</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Value Iteration'>Value Iteration</option>\n                                    <option value='DQN'>DQN</option>\n                                    <option value='Policy Gradient'>Policy Gradient</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <button className='btn btn-primary' onClick={this.props.getData2} style={{float:'right', marginRight:'16px'}}>Evaluate Model</button>\n                    </div>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <hr/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterDivModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js",["284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/ColorPicker.js",["301"],"'use strict'\n\nimport React from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nclass ColorPicker extends React.Component {\n  state = {\n    displayColorPicker: false,\n    r: this.props.r,\n    g: this.props.g,\n    b: this.props.b,\n    a: '1',\n    // color: {\n    //   r: this.props.r,\n    //   g: this.props.g,\n    //   b: this.props.b,\n    //   a: '1',\n    // },\n  };\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker })\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false })\n  };\n\n  handleChange = (color) => {\n    this.setState({\n      r: color.rgb['r'],\n      g: color.rgb['g'],\n      b: color.rgb['b']\n    })\n    this.props.handleLandsatImageColorChange(this.props.colorNumber, color.rgb)\n  };\n\n  render() {\n\n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: `rgba(${ this.state.r }, ${ this.state.g }, ${ this.state.b }, ${ this.state.a })`,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    var color = {\n      r: this.state.r,\n      g: this.state.g,\n      b: this.state.b,\n      a: '1'\n    }\n\n    return (\n      <div>\n        <div style={ styles.swatch } onClick={ this.handleClick }>\n          <div style={ styles.color } />\n        </div>\n        { this.state.displayColorPicker ? <div style={ styles.popover }>\n          <div style={ styles.cover } onClick={ this.handleClose }/>\n          <SketchPicker color={ color } onChange={ this.handleChange } />\n        </div> : null }\n\n      </div>\n    )\n  }\n}\n\nexport default ColorPicker",{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","severity":1,"message":"307","line":57,"column":13,"nodeType":"308","messageId":"309","endLine":57,"endColumn":21},{"ruleId":"306","severity":1,"message":"310","line":12,"column":8,"nodeType":"308","messageId":"309","endLine":12,"endColumn":16},{"ruleId":"311","severity":1,"message":"312","line":90,"column":43,"nodeType":"313","messageId":"314","endLine":90,"endColumn":45},{"ruleId":"315","severity":1,"message":"316","line":92,"column":24,"nodeType":"317","messageId":"318","endLine":92,"endColumn":26},{"ruleId":"315","severity":1,"message":"316","line":108,"column":31,"nodeType":"317","messageId":"318","endLine":108,"endColumn":33},{"ruleId":"315","severity":1,"message":"319","line":166,"column":27,"nodeType":"317","messageId":"318","endLine":166,"endColumn":29},{"ruleId":"320","severity":1,"message":"321","line":191,"column":9,"nodeType":"322","messageId":"323","endLine":196,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":192,"column":37,"nodeType":"317","messageId":"318","endLine":192,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":243,"column":48,"nodeType":"317","messageId":"318","endLine":243,"endColumn":50},{"ruleId":"306","severity":1,"message":"324","line":2,"column":49,"nodeType":"308","messageId":"309","endLine":2,"endColumn":61},{"ruleId":"306","severity":1,"message":"307","line":56,"column":13,"nodeType":"308","messageId":"309","endLine":56,"endColumn":21},{"ruleId":"306","severity":1,"message":"325","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":23},{"ruleId":"326","severity":1,"message":"327","line":312,"column":21,"nodeType":"328","endLine":312,"endColumn":71},{"ruleId":"306","severity":1,"message":"329","line":5,"column":7,"nodeType":"308","messageId":"309","endLine":5,"endColumn":13},{"ruleId":"306","severity":1,"message":"330","line":6,"column":7,"nodeType":"308","messageId":"309","endLine":6,"endColumn":14},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"315","severity":1,"message":"316","line":159,"column":32,"nodeType":"317","messageId":"318","endLine":159,"endColumn":34},{"ruleId":"315","severity":1,"message":"316","line":162,"column":37,"nodeType":"317","messageId":"318","endLine":162,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":198,"column":36,"nodeType":"317","messageId":"318","endLine":198,"endColumn":38},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"306","severity":1,"message":"336","line":125,"column":13,"nodeType":"308","messageId":"309","endLine":125,"endColumn":16},{"ruleId":"306","severity":1,"message":"337","line":126,"column":13,"nodeType":"308","messageId":"309","endLine":126,"endColumn":16},{"ruleId":"315","severity":1,"message":"316","line":194,"column":36,"nodeType":"317","messageId":"318","endLine":194,"endColumn":38},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"306","severity":1,"message":"336","line":125,"column":13,"nodeType":"308","messageId":"309","endLine":125,"endColumn":16},{"ruleId":"306","severity":1,"message":"337","line":126,"column":13,"nodeType":"308","messageId":"309","endLine":126,"endColumn":16},{"ruleId":"315","severity":1,"message":"316","line":194,"column":36,"nodeType":"317","messageId":"318","endLine":194,"endColumn":38},{"ruleId":"306","severity":1,"message":"338","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":22},{"ruleId":"306","severity":1,"message":"329","line":10,"column":7,"nodeType":"308","messageId":"309","endLine":10,"endColumn":13},{"ruleId":"315","severity":1,"message":"316","line":177,"column":32,"nodeType":"317","messageId":"318","endLine":177,"endColumn":34},{"ruleId":"315","severity":1,"message":"316","line":180,"column":37,"nodeType":"317","messageId":"318","endLine":180,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":209,"column":36,"nodeType":"317","messageId":"318","endLine":209,"endColumn":38},{"ruleId":"315","severity":1,"message":"316","line":316,"column":55,"nodeType":"317","messageId":"318","endLine":316,"endColumn":57},{"ruleId":"326","severity":1,"message":"327","line":318,"column":41,"nodeType":"328","endLine":318,"endColumn":138},{"ruleId":"306","severity":1,"message":"329","line":15,"column":7,"nodeType":"308","messageId":"309","endLine":15,"endColumn":13},{"ruleId":"315","severity":1,"message":"316","line":158,"column":30,"nodeType":"317","messageId":"318","endLine":158,"endColumn":32},{"ruleId":"315","severity":1,"message":"316","line":161,"column":35,"nodeType":"317","messageId":"318","endLine":161,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":193,"column":29,"nodeType":"317","messageId":"318","endLine":193,"endColumn":31},{"ruleId":"339","severity":1,"message":"340","line":202,"column":21,"nodeType":"308","messageId":"341","endLine":202,"endColumn":22},{"ruleId":"315","severity":1,"message":"316","line":292,"column":36,"nodeType":"317","messageId":"318","endLine":292,"endColumn":38},{"ruleId":"306","severity":1,"message":"342","line":450,"column":26,"nodeType":"308","messageId":"309","endLine":450,"endColumn":31},{"ruleId":"306","severity":1,"message":"343","line":492,"column":13,"nodeType":"308","messageId":"309","endLine":492,"endColumn":21},{"ruleId":"315","severity":1,"message":"316","line":516,"column":51,"nodeType":"317","messageId":"318","endLine":516,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":524,"column":72,"nodeType":"317","messageId":"318","endLine":524,"endColumn":74},{"ruleId":"344","severity":1,"message":"345","line":526,"column":125,"nodeType":"346","messageId":"318","endLine":526,"endColumn":131},{"ruleId":"315","severity":1,"message":"316","line":662,"column":51,"nodeType":"317","messageId":"318","endLine":662,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":674,"column":72,"nodeType":"317","messageId":"318","endLine":674,"endColumn":74},{"ruleId":"306","severity":1,"message":"338","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":22},{"ruleId":"306","severity":1,"message":"329","line":18,"column":7,"nodeType":"308","messageId":"309","endLine":18,"endColumn":13},{"ruleId":"306","severity":1,"message":"336","line":115,"column":13,"nodeType":"308","messageId":"309","endLine":115,"endColumn":16},{"ruleId":"306","severity":1,"message":"337","line":116,"column":13,"nodeType":"308","messageId":"309","endLine":116,"endColumn":16},{"ruleId":"315","severity":1,"message":"316","line":177,"column":36,"nodeType":"317","messageId":"318","endLine":177,"endColumn":38},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"347","line":5,"column":9,"nodeType":"308","messageId":"309","endLine":5,"endColumn":12},{"ruleId":"306","severity":1,"message":"348","line":5,"column":14,"nodeType":"308","messageId":"309","endLine":5,"endColumn":23},{"ruleId":"306","severity":1,"message":"349","line":5,"column":25,"nodeType":"308","messageId":"309","endLine":5,"endColumn":38},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"350","line":5,"column":55,"nodeType":"308","messageId":"309","endLine":5,"endColumn":62},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"351","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":16},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"306","severity":1,"message":"330","line":14,"column":7,"nodeType":"308","messageId":"309","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"316","line":113,"column":43,"nodeType":"317","messageId":"318","endLine":113,"endColumn":45},{"ruleId":"306","severity":1,"message":"352","line":148,"column":13,"nodeType":"308","messageId":"309","endLine":148,"endColumn":24},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"347","line":5,"column":9,"nodeType":"308","messageId":"309","endLine":5,"endColumn":12},{"ruleId":"306","severity":1,"message":"348","line":5,"column":14,"nodeType":"308","messageId":"309","endLine":5,"endColumn":23},{"ruleId":"306","severity":1,"message":"349","line":5,"column":25,"nodeType":"308","messageId":"309","endLine":5,"endColumn":38},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"350","line":5,"column":55,"nodeType":"308","messageId":"309","endLine":5,"endColumn":62},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"351","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":16},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"315","severity":1,"message":"316","line":158,"column":32,"nodeType":"317","messageId":"318","endLine":158,"endColumn":34},{"ruleId":"315","severity":1,"message":"316","line":161,"column":37,"nodeType":"317","messageId":"318","endLine":161,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":197,"column":43,"nodeType":"317","messageId":"318","endLine":197,"endColumn":45},{"ruleId":"306","severity":1,"message":"352","line":232,"column":13,"nodeType":"308","messageId":"309","endLine":232,"endColumn":24},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"347","line":5,"column":9,"nodeType":"308","messageId":"309","endLine":5,"endColumn":12},{"ruleId":"306","severity":1,"message":"348","line":5,"column":14,"nodeType":"308","messageId":"309","endLine":5,"endColumn":23},{"ruleId":"306","severity":1,"message":"349","line":5,"column":25,"nodeType":"308","messageId":"309","endLine":5,"endColumn":38},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"350","line":5,"column":55,"nodeType":"308","messageId":"309","endLine":5,"endColumn":62},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"351","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":16},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"306","severity":1,"message":"336","line":127,"column":13,"nodeType":"308","messageId":"309","endLine":127,"endColumn":16},{"ruleId":"306","severity":1,"message":"337","line":128,"column":13,"nodeType":"308","messageId":"309","endLine":128,"endColumn":16},{"ruleId":"315","severity":1,"message":"316","line":199,"column":43,"nodeType":"317","messageId":"318","endLine":199,"endColumn":45},{"ruleId":"306","severity":1,"message":"352","line":234,"column":13,"nodeType":"308","messageId":"309","endLine":234,"endColumn":24},{"ruleId":"306","severity":1,"message":"331","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"306","severity":1,"message":"332","line":5,"column":40,"nodeType":"308","messageId":"309","endLine":5,"endColumn":46},{"ruleId":"306","severity":1,"message":"333","line":5,"column":48,"nodeType":"308","messageId":"309","endLine":5,"endColumn":53},{"ruleId":"306","severity":1,"message":"334","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":26},{"ruleId":"306","severity":1,"message":"335","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":12},{"ruleId":"306","severity":1,"message":"329","line":13,"column":7,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"315","severity":1,"message":"316","line":194,"column":36,"nodeType":"317","messageId":"318","endLine":194,"endColumn":38},{"ruleId":"306","severity":1,"message":"338","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":22},{"ruleId":"306","severity":1,"message":"353","line":132,"column":13,"nodeType":"308","messageId":"309","endLine":132,"endColumn":21},{"ruleId":"315","severity":1,"message":"316","line":178,"column":36,"nodeType":"317","messageId":"318","endLine":178,"endColumn":38},{"ruleId":"315","severity":1,"message":"316","line":236,"column":24,"nodeType":"317","messageId":"318","endLine":236,"endColumn":26},{"ruleId":"315","severity":1,"message":"316","line":244,"column":23,"nodeType":"317","messageId":"318","endLine":244,"endColumn":25},{"ruleId":"315","severity":1,"message":"316","line":277,"column":35,"nodeType":"317","messageId":"318","endLine":277,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":377,"column":51,"nodeType":"317","messageId":"318","endLine":377,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":384,"column":66,"nodeType":"317","messageId":"318","endLine":384,"endColumn":68},{"ruleId":"315","severity":1,"message":"316","line":391,"column":72,"nodeType":"317","messageId":"318","endLine":391,"endColumn":74},{"ruleId":"315","severity":1,"message":"316","line":428,"column":51,"nodeType":"317","messageId":"318","endLine":428,"endColumn":53},{"ruleId":"326","severity":1,"message":"327","line":433,"column":37,"nodeType":"328","endLine":433,"endColumn":135},{"ruleId":"315","severity":1,"message":"316","line":436,"column":51,"nodeType":"317","messageId":"318","endLine":436,"endColumn":53},{"ruleId":"326","severity":1,"message":"327","line":441,"column":37,"nodeType":"328","endLine":441,"endColumn":139},{"ruleId":"315","severity":1,"message":"316","line":7,"column":20,"nodeType":"317","messageId":"318","endLine":7,"endColumn":22},{"ruleId":"315","severity":1,"message":"316","line":15,"column":43,"nodeType":"317","messageId":"318","endLine":15,"endColumn":45},{"ruleId":"306","severity":1,"message":"338","line":2,"column":8,"nodeType":"308","messageId":"309","endLine":2,"endColumn":22},{"ruleId":"344","severity":1,"message":"354","line":25,"column":69,"nodeType":"346","messageId":"318","endLine":25,"endColumn":76},{"ruleId":"344","severity":1,"message":"354","line":76,"column":69,"nodeType":"346","messageId":"318","endLine":76,"endColumn":76},{"ruleId":"315","severity":1,"message":"319","line":95,"column":89,"nodeType":"317","messageId":"318","endLine":95,"endColumn":91},{"ruleId":"315","severity":1,"message":"316","line":153,"column":49,"nodeType":"317","messageId":"318","endLine":153,"endColumn":51},{"ruleId":"315","severity":1,"message":"316","line":153,"column":90,"nodeType":"317","messageId":"318","endLine":153,"endColumn":92},{"ruleId":"315","severity":1,"message":"316","line":168,"column":51,"nodeType":"317","messageId":"318","endLine":168,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":168,"column":84,"nodeType":"317","messageId":"318","endLine":168,"endColumn":86},{"ruleId":"315","severity":1,"message":"316","line":183,"column":51,"nodeType":"317","messageId":"318","endLine":183,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":188,"column":51,"nodeType":"317","messageId":"318","endLine":188,"endColumn":53},{"ruleId":"315","severity":1,"message":"316","line":207,"column":49,"nodeType":"317","messageId":"318","endLine":207,"endColumn":51},{"ruleId":"315","severity":1,"message":"316","line":207,"column":90,"nodeType":"317","messageId":"318","endLine":207,"endColumn":92},{"ruleId":"315","severity":1,"message":"316","line":265,"column":47,"nodeType":"317","messageId":"318","endLine":265,"endColumn":49},{"ruleId":"315","severity":1,"message":"316","line":265,"column":82,"nodeType":"317","messageId":"318","endLine":265,"endColumn":84},{"ruleId":"315","severity":1,"message":"316","line":265,"column":117,"nodeType":"317","messageId":"318","endLine":265,"endColumn":119},{"ruleId":"315","severity":1,"message":"316","line":268,"column":47,"nodeType":"317","messageId":"318","endLine":268,"endColumn":49},{"ruleId":"315","severity":1,"message":"316","line":268,"column":80,"nodeType":"317","messageId":"318","endLine":268,"endColumn":82},{"ruleId":"315","severity":1,"message":"316","line":271,"column":47,"nodeType":"317","messageId":"318","endLine":271,"endColumn":49},{"ruleId":"315","severity":1,"message":"316","line":271,"column":83,"nodeType":"317","messageId":"318","endLine":271,"endColumn":85},{"ruleId":"355","severity":1,"message":"356","line":1,"column":1,"nodeType":"357","messageId":"358","endLine":1,"endColumn":13,"fix":"359"},"no-native-reassign",["360"],"no-negated-in-lhs",["361"],"no-unused-vars","'position' is assigned a value but never used.","Identifier","unusedVar","'FireIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'FeatureGroup' is defined but never used.","'DetectionDetail' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'devUrl' is assigned a value but never used.","'prodUrl' is assigned a value but never used.","'MDBDataTable' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'MarkerClusterGroup' is defined but never used.","'Plot' is defined but never used.","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'CountySelector' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'value' is assigned a value but never used.","'wrcc_url' is assigned a value but never used.","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","'Map' is defined but never used.","'TileLayer' is defined but never used.","'LayersControl' is defined but never used.","'GeoJSON' is defined but never used.","'counties' is defined but never used.","'countyStyle' is assigned a value but never used.","'monthAgo' is assigned a value but never used.","Duplicate key 'padding'.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"362","text":"363"},"no-global-assign","no-unsafe-negation",[0,12],""]