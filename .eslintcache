[{"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js":"1","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js":"2","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js":"3","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js":"4","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js":"5","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js":"6","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js":"7","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js":"8","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js":"9","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js":"10","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js":"11","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js":"12","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js":"13","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js":"14","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js":"15","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js":"16","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js":"17","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js":"18","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js":"19","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js":"20","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js":"21","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/VegetationDataCollection.js":"22","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js":"23","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js":"24","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js":"25","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js":"26","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js":"27","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js":"28","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js":"29","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/ColorPicker.js":"30","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/LightningDataCollection.js":"31","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/VegetationDataAnalysis.js":"32","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/PowerlinesDataCollection.js":"33"},{"size":507,"mtime":1618681804854,"results":"34","hashOfConfig":"35"},{"size":5086,"mtime":1618681804855,"results":"36","hashOfConfig":"35"},{"size":1099,"mtime":1623696501603,"results":"37","hashOfConfig":"35"},{"size":7401,"mtime":1622663982022,"results":"38","hashOfConfig":"35"},{"size":8300,"mtime":1623696424595,"results":"39","hashOfConfig":"35"},{"size":916,"mtime":1618681804845,"results":"40","hashOfConfig":"35"},{"size":17220,"mtime":1618681804844,"results":"41","hashOfConfig":"35"},{"size":8432,"mtime":1618681804845,"results":"42","hashOfConfig":"35"},{"size":12182,"mtime":1618681804845,"results":"43","hashOfConfig":"35"},{"size":5786,"mtime":1618681804843,"results":"44","hashOfConfig":"35"},{"size":13631,"mtime":1627575941772,"results":"45","hashOfConfig":"35"},{"size":4781,"mtime":1618681804810,"results":"46","hashOfConfig":"35"},{"size":13806,"mtime":1618681804812,"results":"47","hashOfConfig":"35"},{"size":23023,"mtime":1628621515171,"results":"48","hashOfConfig":"35"},{"size":21764,"mtime":1622664752619,"results":"49","hashOfConfig":"35"},{"size":44305,"mtime":1622663892713,"results":"50","hashOfConfig":"35"},{"size":12661,"mtime":1622663743295,"results":"51","hashOfConfig":"35"},{"size":8670,"mtime":1622658895384,"results":"52","hashOfConfig":"35"},{"size":11046,"mtime":1622663921143,"results":"53","hashOfConfig":"35"},{"size":14704,"mtime":1622663934211,"results":"54","hashOfConfig":"35"},{"size":13678,"mtime":1618681804812,"results":"55","hashOfConfig":"35"},{"size":32939,"mtime":1622663882653,"results":"56","hashOfConfig":"35"},{"size":660,"mtime":1622574330561,"results":"57","hashOfConfig":"35"},{"size":488,"mtime":1618681804835,"results":"58","hashOfConfig":"35"},{"size":2028,"mtime":1618681804835,"results":"59","hashOfConfig":"35"},{"size":3886,"mtime":1625519170118,"results":"60","hashOfConfig":"35"},{"size":10094,"mtime":1618681804810,"results":"61","hashOfConfig":"35"},{"size":22664,"mtime":1625069370365,"results":"62","hashOfConfig":"35"},{"size":1501,"mtime":1618681804811,"results":"63","hashOfConfig":"35"},{"size":2299,"mtime":1618792992422,"results":"64","hashOfConfig":"35"},{"size":4942,"mtime":1622663863337,"results":"65","hashOfConfig":"35"},{"size":13874,"mtime":1620503881565,"results":"66","hashOfConfig":"35"},{"size":14577,"mtime":1625518768464,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"at6vxe",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"148","usedDeprecatedRules":"70"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"70"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"70"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"70"},"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js",[],["158","159"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js",["160"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\nimport WeatherDataAnalysis from './DataAnalysisComponents/WeatherDataAnalysis';\nimport FireHistoryDataAnalysis from './DataAnalysisComponents/FireHistoryDataAnalysis';\nimport VegetationDataAnalysis from './DataAnalysisComponents/VegetationDataAnalysis';\nimport SatelliteDataAnalysis from './DataAnalysisComponents/SatelliteDataAnalysis';\nimport LightningDataCollection from './DataCollectionComponents/LightningDataCollection';\n\nclass DataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Weather',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n            vegetationComponent: null,\n            lightningComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <WeatherDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireHistoryDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            vegetationComponent: <VegetationDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <SatelliteDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            lightningComponent: <LightningDataCollection lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '15%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '15%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Data Analysis</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Weather'?\n                                    <button style={styles.buttonGroupButtonActive}>Weather</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Weather</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire History'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire History</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire History</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Vegetation'?\n                                    <button style={styles.buttonGroupButtonActive}>Vegetation</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Vegetation</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Satellite'?\n                                    <button style={styles.buttonGroupButtonActive}>Satellite</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Satellite</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Lightning'?\n                                    <button style={styles.buttonGroupButtonActive}>Lightning</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Lightning</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Weather'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Satellite'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire History'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Vegetation'?\n                                this.state.vegetationComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Lightning'?\n                                this.state.lightningComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js",["161","162","163","164","165","166","167","168"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport L from 'leaflet';\nimport MyNavbar from './Components/MyNavbar';\nimport CaFireData from './DetectionComponents/fire_history_ca.json';\n// import ImageDetection from './ImageDetection';\nimport WildfireDetection from './WildfireDetection';\n\nimport RedDot from './images/redDot.svg';\nimport FireIcon from './images/fire.png';\nimport RealisticFireIcon from './images/realistic_fire.png'\n\nvar myIcon = L.icon({\n    iconUrl: RealisticFireIcon,\n    iconSize: [30,40],\n});;\n\nclass Monitoring extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n            currentFire: null,\n            latitude: 37.334665328,\n            longitude: -121.875329832,\n            selectedYear: 'Current',\n            currentView: 'Monitoring',\n            events: null\n        };\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n        this.makeFireMarkers = this.makeFireMarkers.bind(this);\n        this.handleFireSelect = this.handleFireSelect.bind(this);\n        // this.handleCitySearch = this.handleCitySearch.bind(this);\n       \n        this.handleYearChange = this.handleYearChange.bind(this);\n        this.changeView = this.changeView.bind(this);\n        this.makeCurrentFireMarkers = this.makeCurrentFireMarkers.bind(this);\n        this.setCurrentFire = this.setCurrentFire.bind(this);\n    }\n\n    async componentDidMount(){\n        const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n        const {events} = await res.json()\n        // console.log(events)\n        this.setState({\n            events: events\n        })\n    }\n\n    onCountyClick(event){\n        // console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    makeFireMarkers(year){\n        var fireMarkers = []\n        Object.keys(CaFireData).map((key) => {\n            if(CaFireData[key]['POO_LATITUDE']!=null && CaFireData[key]['POO_LONGITUDE']!=null){\n                if(year==CaFireData[key]['DISCOVER_YEAR']){\n                fireMarkers.push( \n                    <Marker position={[CaFireData[key]['POO_LATITUDE'], CaFireData[key]['POO_LONGITUDE']]}\n                    onclick={this.handleFireSelect} key={key} acres={20} icon={myIcon}>\n                        <Popup>\n                            <h5>{CaFireData[key]['FIRE_NAME']}</h5>\n                            <p style={{display:''}}>Acres Burned: {CaFireData[key]['TOTAL_ACRES_BURNED']}</p>\n                            <p style={{display:''}}>Year: {CaFireData[key]['DISCOVER_YEAR']}</p>\n                        </Popup>\n                    </Marker>\n            );}\n        }})\n        return fireMarkers;\n    }\n\n    handleYearChange(event){\n        if(event.target.value == 'Current'){\n            myIcon = L.icon({\n                iconUrl: RealisticFireIcon,\n                iconSize: [24,32],\n            });\n        }\n        else{\n            myIcon = L.icon({\n                iconUrl: RedDot,\n                iconSize: [32,32],\n            });\n        }\n\n        this.setState({\n            currentFire:null, \n            selectedYear: event.target.value\n        });\n    }\n\n    handleFireSelect(event){\n        var fire = {\n            'name': event.target._popup.options.children[0].props.children,\n            'latitude': event.latlng.lat,\n            'longitude': event.latlng.lng,\n            'acres burned': event.target._popup.options.children[1].props.children,\n            'date': event.target._popup.options.children[2].props.children,  \n        }\n        this.setState({\n            currentFire: fire,\n        })\n    }\n\n    changeView(newView){\n        this.setState({\n            currentView: newView\n        })\n    }\n\n    makeCurrentFireMarkers(){\n        var markers = []\n        var events = this.state.events;\n        var e = null;\n\n        if(events != null){\n            for(var i=0; i<events.length; i++){\n                e = events[i]\n                var pos = [ e['geometries'][0]['coordinates'][1], e['geometries'][0]['coordinates'][0] ]\n\n                // console.log(e)\n\n                const fire = {\n                    'name': e['title'],\n                    'latitude': pos[0],\n                    'longitude': pos[1],\n                    'date': 'Current',\n                    'acres burned': 'Unknown',\n                }\n\n                if(pos[0] != undefined){\n                    markers.push(\n                        <Marker position={pos} key={i} onClick={this.setCurrentFire.bind(this, fire)} icon={myIcon}>\n                            <Popup>\n                                <h5>{e['title']}</h5>\n                                <p style={{display:''}}>Acres Burned: Unknown</p>\n                                <p style={{display:''}}>Year: Current</p>\n                            </Popup>\n                        </Marker>\n                    )\n                }\n            }\n        }\n        return markers\n    }\n\n    setCurrentFire(newFire){\n        this.setState({\n            currentFire: newFire\n        })\n    }\n\n    render(){        \n        // var position = [37.334665328, -121.875329832];\n        var fmarkers = null;\n        {\n            this.state.selectedYear == 'Current'?\n            fmarkers = this.makeCurrentFireMarkers()\n            :\n            fmarkers = this.makeFireMarkers(this.state.selectedYear)\n        }\n\n        // var fmarkers = this.makeFireMarkers(this.state.selectedYear);\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        var styles = {\n            buttonGroupButton: {\n                width: '20%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none'\n            },\n            buttonGroupButtonActive: {\n                width: '20%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Monitoring / Detection</h1>\n                    </div>\n\n                    {\n                        this.state.currentView == 'Monitoring'?\n                        \n                        <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                            <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                                <button style={styles.buttonGroupButtonActive}>Monitoring</button>\n                                <button style={styles.buttonGroupButton} onClick={this.changeView.bind(this, 'Detection')}>Detection</button>\n                            </div>\n                            <hr style={{margin:'0px'}}/>\n\n                            <div style={{width:\"100%\"}}>\n                                <Map style={{height:'calc(100vh - 140px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={[this.state.latitude, this.state.longitude]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.Overlay name=\"Show Counties\" >\n                                            <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                        </LayersControl.Overlay>\n\n                                        <LayersControl.Overlay name=\"Show Markers\" checked>\n                                            <FeatureGroup>\n                                                {fmarkers}\n                                            </FeatureGroup>\n                                        </LayersControl.Overlay>\n                                        \n                                    </LayersControl>\n                                </Map>\n\n                                <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                        <div style={{marginTop:'16px'}}>\n                                            <div className=\"col-lg-10 mb-3\">\n                                                <div className=\"input-group\" style={{width:'226px'}}>\n                                                    <label style={{width:'100%'}}>Select a Year\n                                                    <select className=\"form-control rounded-0\" value={this.state.selectedYear} onChange={this.handleYearChange}>\n                                                    <option value=\"2015\">2015</option>\n                                                    <option value=\"2016\">2016</option>\n                                                    <option value=\"2017\">2017</option>\n                                                    <option value=\"2018\">2018</option>\n                                                    <option value=\"2019\">2019</option>\n                                                    <option value='Current'>Current</option>\n                                                    </select>\n                                                    </label>\n                                                    <div className=\"input-group-prepend\">  \n                                                    </div>\n                                                </div>\n                                            </div>\n                                    \n                                        </div>\n                                        <hr style={{margin:'16px'}}/>\n{/* \n                                        <div style={{border:'1px solid #d9dadb', margin:'16px', padding:'10px', backgroundColor:'#E9ECEF'}}>\n                                            <h6>Time of Detection</h6>\n                                            <hr style={{margin:'0 0 6px 0'}}/>\n                                            <span style={dotStyles.redDot}></span>\n                                            &nbsp;&nbsp; 0 - 1 hour ago\n                                            <br/>\n                                            <span style={dotStyles.orangeDot}></span>\n                                            &nbsp;&nbsp; 1 - 6 hours ago\n                                            <br/>\n                                            <span style={dotStyles.greenDot}></span>\n                                            &nbsp;&nbsp; 6 - 12 hours ago\n                                            <br/>\n                                            <span style={dotStyles.blueDot}></span>\n                                            &nbsp;&nbsp; Past Fires\n                                            <br/>\n                                        </div> */}\n\n                                        <div style={{margin:'0 16px'}}>\n                                            <h4 style={{margin:'0'}}>Information</h4>\n                                            <hr style={{margin:'0'}}/>\n                                            <p>Fire Data From California Fire History</p>\n                                        </div>\n\n                                        <div style={{height:'100%', overflow:'auto', margin:'8px 16px'}}>\n                                        {\n                                            this.state.currentFire == null?\n                                            <p>Select a fire to view data</p>\n                                            :\n                                            <div>\n                                                <strong>Name: </strong>{this.state.currentFire.name}\n                                                <br/>\n                                                <strong>Latitude: </strong>{this.state.currentFire.latitude}\n                                                <br/>\n                                                <strong>Longitude: </strong>{this.state.currentFire.longitude}\n                                                <br/>\n                                                <strong>Year Of Occurance: </strong>{this.state.currentFire['date']}\n                                                <br/>\n                                                <strong>{this.state.currentFire['acres burned']}</strong>\n                                                <br/>\n                                            </div>\n                                        }\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        :\n                        <div>\n                            {/* <ImageDetection /> */}\n                            <WildfireDetection \n                                viewChange = {this.changeView}\n                            />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Monitoring;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js",["169"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport MyNavbar from './Components/MyNavbar';\n\nclass Risk extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n        }\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n    }\n\n    onCountyClick(event){\n        console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // console.log(county.properties.name);\n\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        const fireIcon = require('leaflet');\n        delete fireIcon.Icon.Default.prototype._getIconUrl;\n        fireIcon.Icon.Default.mergeOptions({\n            iconRetinaUrl: require(\"./images/fire.png\"),\n            iconUrl: require(\"./images/fire.png\"),\n            shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        });\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Risk Prediction</h1>\n                    </div>\n\n                    <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                        <div style={{width:\"100%\"}}>\n\n                            <Map style={{height:'calc(100vh - 72px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={position}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\">\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                    {/* <LayersControl.Overlay name=\"Show Markers\">\n                                        <FeatureGroup>\n                                            {\n                                                randomLocations.map(location => (\n                                                    <Marker position={location}>\n                                                        <Popup>\n                                                            <h6>\n                                                            Latitude: {location[0]}\n                                                            <br/>\n                                                            Longitude: {location[1]}\n                                                            </h6>\n                                                        </Popup>\n                                                    </Marker>\n                                                ))\n                                            }\n                                        </FeatureGroup>\n                                    </LayersControl.Overlay> */}\n                                </LayersControl>\n\n                            </Map>\n\n                            <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                <div style={{marginTop:'16px'}}>\n                                    <form onSubmit={this.handleCitySearch}>\n                                        <div className=\"col-lg-10 mb-3\">\n                                            <div className=\"input-group\" style={{width:'226px'}}>\n                                                <input type=\"text\" className=\"form-control rounded-0\" id=\"citySearchInput\" placeholder=\"City Name\" required />\n                                                <div className=\"input-group-prepend\">\n                                                    <input type=\"submit\" value=\"Search\" className=\"btn btn-primary btn-sm rounded-0\" id=\"inputGroupPrepend2\" style={{backgroundColor:'#1580fb'}}/>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                                <hr style={{margin:'16px'}}/>\n\n                                <div style={{height:'100%', overflow:'auto', margin:'16px'}}>\n                                    <h4>Select date:</h4>\n                                    <div >\n                                        <input type='date' className='input-group' style={{padding:'10px'}}/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Risk;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js",["170"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\n//import FireDetectionModEval  from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireDetectionModEval from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireRiskPredictionModEval from './ModelEvaluationComponents/FireRiskPredictionModEval';\nimport FireProgressionModEval from './ModelEvaluationComponents/FireProgressionModEval';\n\n\nclass ModelEvaluation extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Fire Detection',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <FireDetectionModEval lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireRiskPredictionModEval lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <FireProgressionModEval lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '30%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '30%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Model Evaluation</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Fire Detection'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Detection</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Detection</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Risk Prediction'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Risk Prediction</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Risk Prediction</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Progression'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Progression</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Progression</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Fire Detection'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Progression'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Risk Prediction'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default ModelEvaluation;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js",["171","172","173","174","175","176"],"import React from 'react';\nimport DetectionDetail from './DetectionComponents/DetectionDetail.js';\n// import './DetectionComponents/Pages.css';\n// import './DetectionComponents/WildfireDetection.css';\nimport './DetectionComponents/example-fire-detection.png';\nimport DetectionList from './DetectionComponents/DetectionList.js';\nimport DetectionImage from './DetectionComponents/DetectionImage.js';\nimport { ControlledLayer } from 'react-leaflet/lib/LayersControl';\n\n\nclass WildfireDetection extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      selectedFireImg: null,\n      bounding_boxes: [],\n      detection_scores: [],\n      detection_classes: [],\n      selectedFile: null,\n      loading: false,\n      inputFileUrl: null,\n      area: 'North California',\n      imageColor: 'True Color Composite',\n      date: null,\n      gotInputImage: false,\n      detectScoreCompleted: false,\n      detectFireCompleted: false,\n      job_id: null,\n      job_done: false,\n    };\n\n    this.getFile = this.getFile.bind(this)\n\n  }\n\n  async componentDidMount(){\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = yyyy + '-' + mm + '-' + dd;\n\n    this.setState({\n      date: today\n    })\n\n    setTimeout(() => { this.getFile(); }, 10);\n\n  }\n\n  async getFile(){\n    this.setState({\n      gotInputImage: false\n    })\n    var url = 'https://wvs.earthdata.nasa.gov/api/v1/snapshot?REQUEST=GetSnapshot&&CRS=EPSG:4326&WRAP=DAY&LAYERS='    \n    var height = 2000\n    if(this.state.imageColor === 'True Color Composite'){\n      url += 'MODIS_Terra_CorrectedReflectance_TrueColor'\n    }\n    else{\n      url += 'MODIS_Terra_CorrectedReflectance_Bands721'\n    }\n    url += '&FORMAT=image/jpeg&HEIGHT='+height+'&WIDTH='+height+'&BBOX='\n\n    if(this.state.area === 'North California'){\n      url += '37,-125,42,-120&TIME='\n    }\n    else{\n      url += '32,-122,39,-114&TIME='\n    }\n    url += this.state.date\n\n    const res = await fetch(url)\n    console.log(res)\n    const blob = await res.blob()\n    const file = new File([blob], 'image.jpg', {type: blob.type});\n    console.log(file)\n\n    this.setState({\n      selectedFile: file,\n      inputFileUrl: url,\n      gotInputImage: true\n    })\n  }\n\n  onFileChange = (event) => {\n    // Update the state\n    this.setState({ \n      inputFileUrl: URL.createObjectURL(event.target.files[0]),\n      selectedFile: event.target.files[0]\n    })\n    console.log(event.target.files[0])\n  }\n\n  // on file upload (click the upload button)\n  onFileUpload = () => {\n    console.log('running onFileUpload')\n    window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);  // scroll to bottom automatically\n\n    // Request made to the backend api\n    // Call to fire detection API\n    this.setState({ loading: true });\n    this.detectFire();\n    // wait 10 seconds to allow detectFire to process\n    // setTimeout(() => { this.detectScore(); }, 8000);\n\n  }\n\n  // Makes a call to prediction api results\n  // which include detection boxes, scores, and classifications\n  async detectScore() {\n    console.log('running detect score')\n    this.setState({\n      detectScoreCompleted: false,\n      // loading: true,\n    })\n\n    // Fetch request to wpp module\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/result', {\n      method: 'POST'\n    })\n    .then((response) => {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          // The following function handles each data chunk\n          function push() {\n            // \"done\" is a Boolean and value a \"Uint8Array\"\n            reader.read().then(({ done, value }) => {\n              // Is there no more data to read?\n              if (done) {\n                // Tell the browser that we have finished sending data\n                controller.close();\n                return;\n              }\n              // Get the data and send it to the browser via the controller\n              controller.enqueue(value);\n              push();\n            });\n          };\n\n          push();\n        }\n      })\n\n    })\n    .then(stream => new Response(stream))\n    .then(response => {\n      response.json().then(data => ({\n        data: data,\n        status: response.status\n      }))\n      .then(res => {\n        const detectionBoxes = res.data.predictions[0].detection_boxes;\n        const detectionScores = res.data.predictions[0].detection_scores;\n        const detectionClasses = res.data.predictions[0].detection_classes;\n\n        this.setDetectionInfo(detectionBoxes, detectionScores, detectionClasses);\n        this.setState({\n          detectScoreCompleted: true\n        })\n      })\n    })\n    .catch(error => console.log(\"ERROR:\", error));\n\n  }\n\n  // Set the state for the detection info\n  setDetectionInfo = (boxes, scores, classes) => {\n    let i = 0,\n     realScores = [],\n     boundingBoxes = [],\n     realClasses = [];\n    while(scores[i] > 0.90) {\n      realScores.push(scores[i]);\n      i++;\n    }\n    for(let j = 0; j < i; j++) {\n      boundingBoxes.push(boxes[j]);\n      realClasses.push(classes[j]);\n    }\n\n    this.setState({\n      bounding_boxes: boundingBoxes,\n      detection_scores: realScores,\n      detection_classes: realClasses\n    })\n\n  }\n\n  // Comsumes the ReadableStream from the Fetch call\n  async detectFire() {\n    console.log('running detect fire')\n    this.setState({\n      detectFireCompleted: false,\n      loading: true,\n    })\n\n    const formData = new FormData();\n    formData.append('file', this.state.selectedFile);\n\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/predict', {\n      method: 'POST',\n      body: formData,\n\n    })\n    .then(res => {\n      // Start loading\n      this.setState({ \n        job_done: false,\n       });\n\n      res.text().then(body => {\n        console.log(body)\n        this.setState({\n          job_id: body\n        }, () => {\n          this.checkJobStatus();\n          this.timerId = setInterval(() => this.checkJobStatus(), 1000)\n        })\n\n        // fetch('https://wpp-fire-detection-ml.herokuapp.com/status/' + body)\n        // .then(res => res.json())\n        // .then(response => {\n        //   console.log(response)\n        //   this.setState({\n        //     job_done: true,\n        //   })\n        // })\n      });\n\n      // const reader = res.body.getReader();\n      // if(!res.ok) {\n      //   throw Error(\"Error getting the predict image\")\n      // }\n      // return new ReadableStream({\n      //   start(controller) {\n      //     return pump();\n      //     function pump() {\n      //       return reader.read().then(({ done, value }) => {\n      //         // When no more data needs to be consumed, close the stream\n      //         if (done) {\n      //             controller.close();\n      //             return;\n      //         }\n      //         // Enqueue the next data chunk into our target stream\n      //         controller.enqueue(value);\n      //         return pump();\n      //       });\n      //     }\n      //   }\n      // })\n    })\n    .then(stream => new Response(stream))\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => {\n\n      // set the state of Fire Image URL to the made url\n      this.setState({\n        fireImgUrl: url,\n        loading: false,\n        // detectFireCompleted: true,\n      });\n    })\n    .catch(err => console.error(err));\n  }\n\n  // Fire Functions\n  onFireSelect = (fire) => {\n    this.setState({ selectedFire: fire });\n  }\n\n  checkJobStatus(){\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/status/' + this.state.job_id)\n    .then(res => res.json())\n    .then(response => {\n      console.log(response)\n      if('completed' in response){\n        if(response['completed'] == response['total']){\n          console.log('done')\n          clearInterval(this.timerId)\n          this.setState({\n            job_done: true,\n            loading: false,\n          })\n        }\n      }\n    })\n  }\n\n  render() {\n    var styles = {\n      buttonGroupButton: {\n          width: '20%',\n          backgroundColor: '#f0f0f0', \n          border: '1px solid grey',\n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius: '20px',\n          color:'black',\n          outline:'none'\n      },\n      buttonGroupButtonActive: {\n          width: '20%',\n          backgroundColor: '#1580fb', \n          border: '1px solid #1580fb',\n          color: 'white', \n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius:'20px',\n          outline:'none'\n      }\n    }\n\n    return (\n      <div>\n        <div>\n          <div style={{position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n            <div style={{margin:'10px 0 0 20px', width:'75vw'}}>\n\n              {/* <h1>Wildfire Detection</h1> */}\n              <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                  <button style={styles.buttonGroupButton} onClick={this.props.viewChange.bind(this, 'Monitoring')}>Monitoring</button>\n                  <button style={styles.buttonGroupButtonActive}>Detection</button>\n              </div>\n              <hr style={{margin:'0px'}}/>\n              \n              <div style={{margin:'10px'}}>\n\n                <div style={{display:'flex', justifyContent:'center'}}>\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({area: e.target.value}); setTimeout(()=>{ this.getFile()}, 10) }}>\n                    <option value='North California'>North California</option>\n                    <option value='South California'>South California</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({imageColor: e.target.value}); setTimeout(() =>{this.getFile()}, 10) }}>\n                    <option value='True Color Composite'>True Color Composite</option>\n                    <option value='False Color Composite'>False Color Composite</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <input type='date' onChange={(e)=>{this.setState({date: e.target.value}); setTimeout(()=>{this.getFile()}, 10)}}/>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <button className='btn btn-primary' onClick={this.onFileUpload}>Run detection</button>\n\n                </div>\n                <hr/>\n\n                {/* <input type='file' className=\"form-control\" onChange={this.onFileChange} /> */}\n                <div class=\"custom-file\" style={{width:'60%'}}>\n                  <input type=\"file\" class=\"custom-file-input\" id=\"validatedCustomFile\" required onChange={this.onFileChange} />\n                  <label class=\"custom-file-label\" for=\"validatedCustomFile\">Choose file...</label>\n                  <div class=\"invalid-feedback\">Example invalid custom file feedback</div>\n                </div>\n                <br/>\n                <br/>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%'}}>\n                  <h5 style={{fontWeight:'bold'}}>Input Image:</h5>\n                  <hr/>\n                  {this.state.area}, {this.state.imageColor}, {this.state.date}:\n                  <br/>\n                  <br/>\n\n                  {\n                    this.state.gotInputImage === false?\n                    <div>Loading...</div>\n                    :\n                    <img src={this.state.inputFileUrl} width='100%' />\n                  }\n                </div>\n                <br/>\n                \n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%', float:'left', marginBottom:'40px'}}>\n                  <h5 style={{fontWeight:'bold'}}>Output Image</h5>\n                  <hr/>\n\n                  {\n                    this.state.job_id == null?\n                    <div></div>\n                    :\n                    this.state.job_done?\n                    <img src={'https://wpp-fire-detection-ml.herokuapp.com/image/' + this.state.job_id} width='100%' />\n                    :\n                    <div>Loading...</div>\n\n                    // <DetectionImage url={this.state.fireImgUrl} loading={this.state.loading} />\n\n                  }\n                  {/* <DetectionImage url={this.state.fireImgUrl} loading={this.state.loading} /> */}\n                </div>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'38%', float:'right'}}>\n                  <h5 style={{fontWeight:'bold'}}>Detection List</h5>\n                  <hr/>\n                  {\n                    !this.state.loading?\n                    <DetectionList\n                      boxes={this.state.bounding_boxes}\n                      scores={this.state.detection_scores}\n                      classes={this.state.detection_classes}\n                    />\n                    :\n                    <div></div>\n                  }\n                  {/* <DetectionList\n                    boxes={this.state.bounding_boxes}\n                    scores={this.state.detection_scores}\n                    classes={this.state.detection_classes}\n                  /> */}\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n\n};\n\nexport default WildfireDetection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js",["177","178"],"import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../css/MyNavbar.css';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass MyNavbar extends React.Component{\n    render(){        \n        var url = window.location.href;\n\n        return(\n            <div className=\"d-flex\" id=\"wrapper\">\n            <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\n                <div className=\"sidebar-heading\">\n                    <img src='https://upload.wikimedia.org/wikipedia/en/thumb/e/ec/San_Jose_State_Spartans_logo.svg/1200px-San_Jose_State_Spartans_logo.svg.png' alt='SJSU' width='40px' style={{margin:\"0 16px 0 0\"}}></img>\n                    SJSU Wildfire \n                </div>\n                <div className=\"list-group list-group-flush\">\n                    {\n                        url.substr(url.length - 4).includes('com')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" style={{borderRight:'6px solid #3d3d3d'}} >Data Collection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" >Data Collection</Link>\n                    }\n                    {\n                        url.includes('preprocessing')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\" style={{borderRight:'6px solid #3d3d3d'}}>Preprocessing</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\">Preprocessing</Link>\n                    }\n                    {\n                        url.includes('analysis')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" style={{borderRight:'6px solid #3d3d3d'}} >Data Analysis</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" >Data Analysis</Link>\n                    }\n                    {\n                        url.includes('detection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Monitoring / Detection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\">Fire Monitoring / Detection</Link>\n                    }\n                    {/* {\n                        url.includes('imageDetection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Detection 2</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\">Fire Detection 2</Link>\n                    } */}\n                    {\n                        url.includes('progression')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Progression</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\">Fire Progression</Link>\n                    }\n                    {\n                        url.includes('risk')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Risk Prediction</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\">Fire Risk Prediction</Link>\n                    }\n                    {\n                        url.includes('evaluation')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" style={{borderRight:'6px solid #3d3d3d'}}>Model Evaluation</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" >Model Evaluation</Link>\n                    }\n                    {/* {\n                        url.includes('flask')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" style={{borderRight:'6px solid #3d3d3d'}}>Flask examples</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" >Flask examples</Link>\n                    } */}\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\n\n\nexport default MyNavbar;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js",["179","180","181","182","183","184","185","186","187"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass SatelliteDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Avg fires per year': '8',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.epa.gov/sites/production/files/styles/large/public/2016-07/wildfires-figure3-2016.png' alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                            <img src='https://eoimages.gsfc.nasa.gov/images/imagerecords/145000/145498/amazon_tamo_2012-2019_count_lrg.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default SatelliteDataAnalysis;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js",["188","189","190","191","192","193","194","195","196","197","198"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js",["199","200","201","202","203","204","205","206","207","208","209","210"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nvar base_url = ''\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass SatelliteDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'MODIS',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            startDate: null,\n            endDate: null,\n            day: null,\n            month: null,\n            year: null,\n            modisImageArea: 'North California',\n            modisImageColor: 'True Color Composite',\n            modisImageDate: '2021-03-10',\n            modisImageUrl: null,\n\n            gotGoesImage: false,\n            goesResult: 'failure',\n            goesUrlRand: null,\n            goesYear: 2020,\n            goesDayOfYear: 257,\n            goesHour: 20,\n            goesColorComposite: 'true color composite',\n            selectedGoesImageType:'Image',\n            retrievedGoesImageType: 'Image',\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleMarkerChange = this.handleMarkerChange.bind(this);\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        this.handleModisAreaChange = this.handleModisAreaChange.bind(this);\n        this.handleModisColorChange = this.handleModisColorChange.bind(this);\n        this.handleModisDateChange = this.handleModisDateChange.bind(this);\n        this.getModisImageUrl = this.getModisImageUrl.bind(this);\n\n        this.getDayOfYear = this.getDayOfYear.bind(this);\n        this.getGoesData = this.getGoesData.bind(this);\n        this.handleGoesDateChange = this.handleGoesDateChange.bind(this);\n        this.handleGoesHourChange = this.handleGoesHourChange.bind(this);\n        this.handleGoesColorCompositeChange = this.handleGoesColorCompositeChange.bind(this);\n        this.handleGoesImageTypeChange = this.handleGoesImageTypeChange.bind(this);\n    }\n\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: year\n        })\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        }, ()=>{this.getData()})\n\n        this.getModisImageUrl()\n        this.getGoesData()\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        var startDate = this.state.startDate\n        var endDate = this.state.endDate\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        this.getUSGSdata(startDate, endDate);\n    }\n\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(base_url + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleMarkerChange(newMarker){\n        this.setState({\n            currentMarker: newMarker,\n        })\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource\n        }, () => {this.getData()})\n    }\n\n    handleModisAreaChange(newArea){\n        this.setState({\n            modisImageArea: newArea\n        }, () => {this.getModisImageUrl()})\n    }\n\n    handleModisColorChange(newColor){\n        this.setState({\n            modisImageColor: newColor\n        }, () => {this.getModisImageUrl()})\n    }\n\n    handleModisDateChange(newDate){\n        this.setState({\n            modisImageDate: newDate\n        }, () => {this.getModisImageUrl()})\n    }\n\n    getModisImageUrl(){\n        var url = 'https://wvs.earthdata.nasa.gov/api/v1/snapshot?REQUEST=GetSnapshot&&CRS=EPSG:4326&WRAP=DAY&LAYERS='\n\n        var height = 800\n        if(this.state.modisImageColor === 'True Color Composite'){\n            url += 'MODIS_Terra_CorrectedReflectance_TrueColor'\n        }\n        else{\n            url += 'MODIS_Terra_CorrectedReflectance_Bands721'\n        }\n        url += '&FORMAT=image/jpeg&HEIGHT='+height+'&WIDTH='+height+'&BBOX='\n\n        if(this.state.modisImageArea === 'North California'){\n            url += '37,-125,42,-120&TIME='\n        }\n        else{\n            url += '32,-122,39,-114&TIME='\n        }\n        url += this.state.modisImageDate\n\n        this.setState({\n            modisImageUrl: url,\n        })\n    }\n\n    getGoesData(){\n        // console.log('getting goes data')\n        this.setState({\n            gotGoesImage: false,\n        })\n        fetch(base_url + '/api/get_goes_satellite_image',{\n            method: 'POST',\n            body: JSON.stringify({\n                year: this.state.goesYear,\n                dayOfYear: this.state.goesDayOfYear,\n                hour: this.state.goesHour,\n                colorComposite: this.state.goesColorComposite,\n                imageType: this.state.selectedGoesImageType\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response['result'] == 'failure'){\n                this.setState({\n                    gotGoesImage: true,\n                    goesResult: 'failure'\n                })\n            }\n            else{\n                this.setState({\n                    goesResult: 'success',\n                    gotGoesImage: true,\n                    goesUrlRand: Math.floor(Math.random() * 1000000),\n                    retrievedGoesImageType: this.state.selectedGoesImageType\n                })\n            }\n        })\n    }\n\n    handleGoesDateChange(newDate){\n        var dateInfo = newDate.split('-')\n        var year = dateInfo[0] \n        var dayOfYear = this.getDayOfYear(newDate)\n\n        this.setState({\n            goesYear: year,\n            goesDayOfYear: dayOfYear\n        })\n    }\n\n    handleGoesHourChange(newHour){\n        this.setState({\n            goesHour: newHour\n        })\n    }\n\n    handleGoesColorCompositeChange(colorComposite){\n        this.setState({\n            goesColorComposite: colorComposite\n        })\n    }\n\n    handleGoesImageTypeChange(newType){\n        this.setState({\n            selectedGoesImageType: newType\n        })\n    }\n\n    getDayOfYear(date){\n        var dateInfo = date.split('-')\n        var year = dateInfo[0] \n        var month = parseInt(dateInfo[1]) - 1\n        var day = parseInt(dateInfo[2])\n\n        var now = new Date(year, month, day);\n        var start = new Date(now.getFullYear(), 0, 0);\n        var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\n        var oneDay = 1000 * 60 * 60 * 24;\n\n        var dayOfYear = Math.floor(diff / oneDay);\n        return dayOfYear\n    }\n\n    render(){\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var goes_url = '/api/'+this.state.goesUrlRand+'/';\n        if(this.state.retrievedGoesImageType == 'GIF'){\n            goes_url += 'goes_satellite.gif'\n        }\n        else{\n            goes_url += 'goes_satellite.png'\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    dataSource = {this.state.source}\n                    handleModisAreaChange = {this.handleModisAreaChange}\n                    handleModisColorChange={this.handleModisColorChange}\n                    handleModisDateChange={this.handleModisDateChange}\n                    handleSourceChange={this.handleSourceChange}\n                    handleGoesDateChange = {this.handleGoesDateChange}\n                    handleGoesHourChange = {this.handleGoesHourChange}\n                    getGoesData = {this.getGoesData}\n                    handleGoesColorCompositeChange = {this.handleGoesColorCompositeChange}\n                    handleGoesImageTypeChange = {this.handleGoesImageTypeChange}\n                />\n                <div>\n                    <div>\n                        {\n                            this.state.currentView === 'Table View'?\n                            <div>\n                                {\n                                    this.state.source == 'MODIS'?\n                                    <div>\n                                        <img src={this.state.modisImageUrl} width='50%' style={{float:'left', border:'1px solid black'}}/>\n                                        <div style={{float:\"right\", width:'45%'}}>\n                                            Area: {this.state.modisImageArea}<br/>\n                                            Bands: {this.state.modisImageColor}<br/>\n                                            Date: {this.state.modisImageDate}<br/>\n                                        </div>\n                                    </div>\n                                    :\n                                    this.state.source == 'GOES'?\n                                    <div>\n                                        Result for: {this.state.goesYear}, Day {this.state.goesDayOfYear}, Hour {this.state.goesHour}\n                                        <br/>\n                                        <br/>\n                                        {\n                                            this.state.gotGoesImage == false?\n                                            <div>\n                                                <p>Loading...</p>\n                                                <p>This may take a few minutes.</p>\n                                            </div>\n                                            :\n                                            this.state.goesResult == 'failure'?\n                                            <p style={{color: 'red'}}>No image</p>\n                                            :\n                                            <div>\n                                                <img src={goes_url} width='600px' style={{border:'1px solid black'}}/>\n                                            </div>\n                                        }\n                                    </div>\n                                    :\n                                    !this.state.data?\n                                    <div>Getting data...</div>\n                                    :\n                                    <MDBDataTable responsive\n                                    striped\n                                    bordered\n                                    data={this.state.data}\n                                    />\n                                }\n                            </div>\n                            :\n                            <div>\n                                <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                    </LayersControl>\n\n                                    <MarkerClusterGroup>\n                                        {\n                                            this.state.data == null?\n                                            <div>Waiting for data to load...</div>\n                                            :\n                                            this.state.data.rows.map(\n                                                marker => {\n                                                    return (\n                                                        <Marker position={[marker['latitude'], marker['longitude']]} key={marker['entityId']} onclick={() => this.handleMarkerChange(marker)}>\n                                                            <Popup>\n                                                                <p>Object ID: {marker['entityId']}</p>\n                                                                <p>Lat: {marker['latitude']}</p>\n                                                                <p>Lon: {marker['longitude']}</p>\n                                                            </Popup>\n                                                        </Marker>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </MarkerClusterGroup>\n                                </Map>\n                                <div style={{float:'right', padding:'6px', width:'230px'}}>\n                                    {\n                                        this.state.currentMarker == null?\n                                        <h3>Select a fire for more info.</h3>\n                                        :\n                                        <div>\n                                            <h3>Fire Information</h3>\n                                            <hr/>\n                                            {\n                                                this.state.features.map(\n                                                    feature => {\n                                                        return (\n                                                        <div>\n                                                            <strong>{feature}: </strong>{this.state.currentMarker[feature]}\n                                                            <br/>\n                                                            </div>\n                                                        )\n                                                    }\n                                                )\n                                            }\n\n                                        </div>\n                                    }\n                                </div>\n                                \n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default SatelliteDataCollection;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js",["211","212","213","214","215","216","217","218","219","220","221","222"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON, FeatureGroup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\nimport BlueDot from '../images/blueDot.svg';\nimport StationIcon from '../images/satellite.png';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nconst myIcon = L.icon({\n    iconUrl: BlueDot,\n    iconSize: [28,28],\n});\n\nconst stationIcon = L.icon({\n    iconUrl: StationIcon,\n    iconSize: [36, 36],\n})\n\nvar base_url = '';\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass WeatherDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'WRCC',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            noaaData: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            weatherStationData: null,\n            currentWeatherStation: null,\n            weatherStationFeatures: ['datacoverage', 'elevation', 'elevationUnit', 'id', 'latitude', 'longitude', 'maxdate', 'mindate', 'name'],\n            startDate: null,\n            endDate: null,\n            day: null,\n            month: null,\n            year: null,\n            wrcc_station: 'cald',\n            wrccData: null,\n\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleWeatherStationChange = this.handleWeatherStationChange.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.getNoaaFeatureData = this.getNoaaFeatureData.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        this.handleWrccStationChange = this.handleWrccStationChange.bind(this);\n        this.getWrccData = this.getWrccData.bind(this);\n        this.nextDay = this.nextDay.bind(this);\n        this.prevDay = this.prevDay.bind(this);\n        this.getWrccFeatureData = this.getWrccFeatureData.bind(this);\n        this.makeWrccStationMarkers = this.makeWrccStationMarkers.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        })\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        }, ()=>{this.getData()})\n\n    }\n\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        // var startDate = document.getElementById('startDateInput').value;\n        // var endDate = document.getElementById('endDateInput').value;\n        var startDate = this.state.startDate;\n        var endDate = this.state.endDate;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source == 'NOAA'){\n            this.getNOAAdata(startDate, endDate);\n        }\n        else if(this.state.source == 'WRCC'){\n            this.getWrccData();\n        }\n    }\n\n    getWrccData(){\n        console.log('getting data from WRCC')\n        var wrcc_url = 'https://wrcc.dri.edu/cgi-bin/wea_daysum2.pl?stn='+this.state.wrcc_station+'&day='+this.state.day+'&mon='+this.state.month+'&yea='+this.state.year+'&unit=E'\n\n        // console.log('date: '+this.state.day+'/'+this.state.month+'/'+this.state.year)\n\n        fetch(base_url + '/api/getWrccData', {\n            method: 'POST',\n            body: JSON.stringify({\n                url: wrcc_url,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            // console.log(response)\n            var rows = response['rows']\n\n            var columnNames = [\n                'Hour','Total Solar Rad','Ave. mph', 'Wind V. Dir. Deg','Max mph','Air Temp Mean Deg. F','Fuel Temp Mean Deg. F.','Fuel Moisture Mean Percent','Relative Humidity Mean Percent','Dew Point Deg','Wet Buld F.','Total Percip. inches'\n            ]\n\n            var temp = [];\n            for(var i = 0; i<rows.length; i++){\n                var row = rows[i]\n                var newRowEntry = {}\n                for(var j = 0; j<columnNames.length; j++){\n                    var text = row[j].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n                    if(text == ''){\n                        text = ' '\n                    }\n                    newRowEntry[columnNames[j]] = text\n                }\n                temp.push(newRowEntry)\n            }\n\n            var cols = [];\n            for(var i=0; i<columnNames.length; i++){\n                var newColEntry = {\n                    label: columnNames[i],\n                    field: columnNames[i],\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: temp,\n            }\n\n            this.setState({\n                wrccData: data,\n            })\n\n        })\n    }\n\n    getNOAAdata(start, end){\n        console.log('getting data from NOAA')\n        this.setState({\n            noaaData: null,\n        })\n\n        fetch(base_url + '/api/getNOAAdata', {\n            method:'POST',\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            var rawData = response['rawData'];\n            var weatherStationData = response['weatherStationData']\n            weatherStationData = JSON.parse(weatherStationData)\n            weatherStationData = weatherStationData['results'];\n\n            this.setState({\n                weatherStationData: weatherStationData,\n            })\n\n            var parsedData = JSON.parse(rawData);\n\n            var cols = [];\n            var rows = [];\n        \n            for(const key in parsedData){\n                var newColEntry = {\n                    label: key,\n                    field: key,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            // console.log(parsedData);\n            if(parsedData['DATE'] != null){\n                for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \n                    var newRowEntry = {}\n                    for(const key in parsedData){\n                        var val = parsedData[key][i];\n                        if (val == null){\n                            val = ''\n                        }\n                        newRowEntry[key] = val\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                noaaData: data,\n            })\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        // console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleWeatherStationChange(newWeatherStation){\n        this.setState({\n            currentWeatherStation: newWeatherStation,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        var countyName = county.properties.name;\n        layer.bindPopup(countyName);\n\n        layer.on({\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    getNoaaFeatureData(feature){\n        var data = [];\n        var temp = {};\n        for(var row of this.state.noaaData['rows']){\n            if(!(row['STATION'] in temp)){\n                temp[row['STATION']] = {\n                    'x': [],\n                    'y': [],\n                    type: 'line',\n                    name: row['STATION'],\n                }\n            }\n            temp[row['STATION']]['x'].push(row['DATE']);\n            temp[row['STATION']]['y'].push(row[feature]);\n        }\n        for(var station of Object.keys(temp)){\n            data.push(temp[station]);\n        }\n        return data;\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource,\n        }, () => {\n            this.getData();\n        })\n    }\n\n    handleWrccStationChange(newStation){\n        this.setState({\n            wrcc_station: newStation,\n        }, ()=>{this.getWrccData()})\n    }\n\n    nextDay(){\n        var currentDate = '20'+this.state.year + '-' + parseInt(this.state.month) + '-' + parseInt(this.state.day)\n        var d = new Date(currentDate)\n\n        d.setDate(d.getDate() + 1);\n\n        var year = d.getFullYear();\n        var month = d.getMonth();\n        var day = d.getDate()\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        }, ()=>{this.getWrccData()})\n\n    }\n\n    prevDay(){\n        var currentDate = '20'+this.state.year + '-' + parseInt(this.state.month) + '-' + parseInt(this.state.day)\n        var d = new Date(currentDate)\n\n        d.setDate(d.getDate() - 1);\n\n        var year = d.getFullYear();\n        var month = d.getMonth();\n        var day = d.getDate();\n\n        var temp_month = month\n        temp_month += 1\n        if(temp_month < 10){\n            temp_month = '0' + temp_month\n        }\n\n        this.setState({\n            day: day,\n            month: temp_month,\n            year: (year % 2000)\n        }, ()=>{this.getWrccData()})\n    }\n\n    getWrccFeatureData(feature){\n        var data = [{\n            'x': [],\n            'y': [],\n            type: 'line'\n        }]\n        for(var i=0; i<this.state.wrccData.rows.length; i++){\n            data[0]['y'].push(parseFloat(this.state.wrccData.rows[i][feature]))\n            data[0]['x'].push(this.state.wrccData.rows[i]['Hour'])\n        }\n        return data\n    }\n\n    makeWrccStationMarkers(){\n        var markers = []\n        for (const [key, value] of Object.entries(wrcc_station_locations)) {\n            var pos = [wrcc_station_locations[key]['lat'], wrcc_station_locations[key]['lon']]\n\n            markers.push(\n                <Marker position={pos} key={key} onClick={this.handleWrccStationChange.bind(this, key)} icon={myIcon}>\n\n                </Marker>\n            )\n        }\n        return markers\n    }\n\n    render(){\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        var wrccStationMarkers = this.makeWrccStationMarkers()\n\n        var tavg = null;\n        var tmin = null;\n        var tmax = null;\n        if(this.state.noaaData != null){\n            tavg = this.getNoaaFeatureData('TAVG');\n            tmin = this.getNoaaFeatureData('TMIN');\n            tmax = this.getNoaaFeatureData('TMAX');\n        }\n\n        var wrcc_mph = null;\n        var wrcc_temp = null;\n        var wrcc_precip = null;\n        if(this.state.wrccData != null){\n            wrcc_mph = this.getWrccFeatureData('Ave. mph');\n            wrcc_temp = this.getWrccFeatureData('Air Temp Mean Deg. F')\n            wrcc_precip = this.getWrccFeatureData('Total Percip. inches')\n        }\n        // console.log(wrcc_temp)\n\n        var wrcc_url = 'https://wrcc.dri.edu/cgi-bin/wea_daysum2.pl?stn='+this.state.wrcc_station+'&day='+this.state.day+'&mon='+this.state.month+'&yea='+this.state.year+'&unit=E'\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='weather'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                    handleSourceChange = {this.handleSourceChange}\n                    handleWrccStationChange = {this.handleWrccStationChange}\n                    dataSource = {this.state.source}\n                />\n\n                <div>\n                    {/* {\n                        this.state.currentView === 'Table View'? */}\n                        <div>\n                            {\n                                this.state.source == 'NOAA'?\n                                <div>\n                                    {\n                                        !this.state.noaaData?\n                                        <div>Getting data...</div>\n                                        :\n                                        <div>\n                                            {\n                                                this.state.currentView == 'Map View'?\n                                                <div>\n                                                    <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', height:'400px', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                                        <LayersControl position=\"topright\">\n\n                                                            <LayersControl.BaseLayer name=\"Topology\" checked>\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Street\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Satellite\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Terrain\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Dark\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.Overlay name=\"Show Counties\" >\n                                                                <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                                            </LayersControl.Overlay>\n\n                                                        </LayersControl>\n\n\n                                                        <MarkerClusterGroup>\n                                                            {\n                                                                this.state.weatherStationData == null?\n                                                                <div>Waiting for data to load...</div>\n                                                                :\n                                                                this.state.weatherStationData.map(\n                                                                    marker => {\n                                                                        return (\n                                                                            <Marker position={[marker['latitude'], marker['longitude']]} key={marker['id']} onclick={() => this.handleWeatherStationChange(marker)} icon={stationIcon}>\n                                                                                <Popup>\n                                                                                    <p>ID: {marker['id']}</p>\n                                                                                    <p>Lat: {marker['latitude']}</p>\n                                                                                    <p>Lon: {marker['longitude']}</p>\n                                                                                </Popup>\n                                                                            </Marker>\n                                                                        )\n                                                                    }\n                                                                )\n                                                            }\n                                                        </MarkerClusterGroup>\n                                                    </Map>\n\n                                                    <div style={{float:'right', padding:'6px', width:'230px'}}>\n                                                    {\n                                                        this.state.currentWeatherStation == null?\n                                                        <h3>Select a weather station for more info.</h3>\n                                                        :\n                                                        <div>\n                                                            <h3>Station info.</h3>\n                                                            <hr/>\n                                                            {\n                                                                this.state.weatherStationFeatures.map(\n                                                                    feature => {\n                                                                        return (\n                                                                        <div key={feature}>\n                                                                            <strong>{feature}: </strong>{this.state.currentWeatherStation[feature]}\n                                                                            <br/>\n                                                                            </div>\n                                                                        )\n                                                                    }\n                                                                )\n                                                            }\n                                                        </div>\n                                                    }\n                                                    </div>\n\n                                                    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n                                                    <br/><br/><br/><br/><br/><br/>\n                                                    <hr/>\n                                                </div>\n                                                :\n                                                <div></div>\n                                            }\n\n                                            <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                                            <br/><br/>\n\n                                            <MDBDataTable responsive\n                                            striped\n                                            bordered\n                                            data={this.state.noaaData}\n                                            />\n                                            <br/>\n                                            <hr/>\n\n                                            <h4>Graphs</h4>\n                                            <br/>\n                                            <Plot\n                                                style = {{height:'400px'}}\n                                                data = {tavg}\n                                                layout = {{showlegend: true, title:'TAVG over time'}}\n                                                config = {{responsive:true }}\n                                            />\n                                            <br/>\n                                            <Plot\n                                                style = {{ height:'400px'}}\n                                                data = {tmin}\n                                                layout = {{showlegend:true, title: 'TMIN over time' }}\n                                                config = {{responsive:true }}\n                                            />\n                                            <br/>\n                                            <Plot\n                                                style = {{height:'400px'}}\n                                                data = {tmax}\n                                                layout = {{showlegend:true, title:'TMAX over time' }}\n                                                config = {{responsive:true }}\n                                            />\n                                        </div>\n                                    }\n                                </div>\n                                :\n                                this.state.source == 'WRCC'?\n                                <div>\n                                    {/* <iframe src={wrcc_url} height='500px' width='100%' /> */}\n                                    {\n                                        !this.state.wrccData?\n                                        <div>Getting data...</div>\n                                        :\n                                        <div>\n                                            <h5>{wrccStations[this.state.wrcc_station]} - {this.state.day}/{this.state.month}/{this.state.year} <span style={{color:'grey'}}>(d/m/y)</span></h5>\n                                            <br/>\n\n                                            {\n                                                this.state.currentView == 'Map View'?\n                                                <div>\n                                                    <Map style={{height:'300px', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={5} center={[this.state.lat, this.state.lon]}>\n                                                        <LayersControl position=\"topright\">\n\n                                                            <LayersControl.BaseLayer name=\"Topology\" checked>\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Street\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Satellite\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Terrain\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.BaseLayer name=\"Dark\">\n                                                                <TileLayer\n                                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                                                url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                                                />\n                                                            </LayersControl.BaseLayer>\n\n                                                            <LayersControl.Overlay name=\"Show Counties\" >\n                                                                <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                                            </LayersControl.Overlay>\n\n\n                                                            <LayersControl.Overlay name=\"Show Markers\" checked>\n                                                                <FeatureGroup>\n                                                                    {wrccStationMarkers}\n                                                                </FeatureGroup>\n                                                            </LayersControl.Overlay>\n\n                                                        </LayersControl>\n\n                                                    </Map>\n                                                    <div style={{width:'240px', float:'right'}}>\n                                                        <h4>Station details</h4>\n                                                        Name: {wrcc_station_locations[this.state.wrcc_station]['name']} <br/>\n                                                        Lat: {wrcc_station_locations[this.state.wrcc_station]['lat']} <br/>\n                                                        Lon: {wrcc_station_locations[this.state.wrcc_station]['lon']} <br/>\n                                                        Elevation: {wrcc_station_locations[this.state.wrcc_station]['elevation']} <br/>\n                                                    </div>\n                                                    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n                                                    <hr/>\n                                                </div>\n                                                :\n                                                <div></div>\n                                            }\n\n                                            <div style={{width:\"100%\", height:'60px'}}>\n                                                <button className='btn btn-light' style={{float:'left', width:'15%'}} onClick={this.prevDay}>Prev day</button>\n\n                                                <button className='btn btn-light' style={{float:'right', width:\"15%\"}} onClick={this.nextDay}>Next day</button>\n                                            </div>\n                                            <div style={{width:'100%'}}>\n                                                <MDBDataTable \n                                                responsive\n                                                paging={false}\n                                                searching={false}\n                                                striped\n                                                bordered\n                                                data={this.state.wrccData}\n                                                />\n\n                                                <br/>\n                                                <hr/>\n\n                                                <h4>Graphs</h4>\n                                                <br/>\n                                                <Plot\n                                                    style = {{height:'400px'}}\n                                                    data = {wrcc_mph}\n                                                    layout = {{showlegend: true, title:'Ave. mph'}}\n                                                    config = {{responsive:true }}\n                                                />\n                                                <br/>\n                                                <Plot\n                                                    style = {{ height:'400px'}}\n                                                    data = {wrcc_temp}\n                                                    layout = {{showlegend:true, title: 'Air Temp Mean Deg. F'}}\n                                                    config = {{responsive:true }}\n                                                />\n                                                <br/>\n                                                <Plot\n                                                    style = {{height:'400px'}}\n                                                    data = {wrcc_precip}\n                                                    layout = {{showlegend:true, title:'Total Percip. inches' }}\n                                                    config = {{responsive:true }}\n                                                />\n                                            </div>\n                                        </div>\n                                    }\n                                </div>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        {/* :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n\n\n                                <MarkerClusterGroup>\n                                    {\n                                        this.state.weatherStationData == null?\n                                        <div>Waiting for data to load...</div>\n                                        :\n                                        this.state.weatherStationData.map(\n                                            marker => {\n                                                return (\n                                                    <Marker position={[marker['latitude'], marker['longitude']]} key={marker['id']} onclick={() => this.handleWeatherStationChange(marker)}>\n                                                        <Popup>\n                                                            <p>ID: {marker['id']}</p>\n                                                            <p>Lat: {marker['latitude']}</p>\n                                                            <p>Lon: {marker['longitude']}</p>\n                                                        </Popup>\n                                                    </Marker>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </MarkerClusterGroup>\n                            </Map>\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.currentWeatherStation == null?\n                                <h3>Select a weather station for more info.</h3>\n                                :\n                                <div>\n                                    <h3>Station info.</h3>\n                                    <hr/>\n                                    {\n                                        this.state.weatherStationFeatures.map(\n                                            feature => {\n                                                return (\n                                                <div key={feature}>\n                                                    <strong>{feature}: </strong>{this.state.currentWeatherStation[feature]}\n                                                    <br/>\n                                                    </div>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                            }\n                            </div>\n                        </div> \n                    } */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WeatherDataCollection;\n\nvar wrccStations = {\n    'cald':'Alder Spring',\n    'casc':'Ash Creek',\n    'catl':'Atlas Peak',\n    'cbac':'Backbone',\n    'cbal':'Bald Mtn Loc',\n    'cbat':'Batterson',\n    'cbbr':'Big Bar',\n    'cben':'Benton',\n    'cbir':'Big Rock',\n    'cbld':'Blue Door',\n    'cblm':'Blacks Mountain',\n    'cblw':'Blue Ridge (KNF)',\n    'cbml':'Blue Mountain Lookout',\n    'cbmo':'Blue Mountain',\n    'cbmt':'Brush Mountain',\n    'cbnr':'Banner Road'\n}\n\nvar wrcc_station_locations = {\n    'cald': {\n        'name': 'Alder Springs',\n        'lat': 39.651389,\n        'lon': -122.723611,\n        'elevation': 4300\n    },\n    'casc': {\n        'name': 'Ash Creek',\n        'lat': 41.276944,\n        'lon': -121.979444,\n        'elevation': 3200\n    },\n    'catl': {\n        'name': 'Atlas Peak',\n        'lat': 38.474444,\n        'lon': -122.264722,\n        'elevation': 1934\n    },\n    'cbac': {\n        'name': 'Backbone',\n        'lat': 40.889167,\n        'lon': -123.142222,\n        'elevation': 4700\n    },\n    'cbal': {\n        'name': 'Bald Mtn Loc',\n        'lat': 38.905556,\n        'lon': -120.697222,\n        'elevation': 4680\n    },\n    'cbat': {\n        'name': 'Batterson',\n        'lat': 37.231944,\n        'lon': -119.508333,\n        'elevation': 3160\n    },\n    'cbbr': {\n        'name': 'Big Bar',\n        'lat': 40.733333,\n        'lon': -123.233333,\n        'elevation': 1500\n    },\n    'cben': {\n        'name': 'Benton',\n        'lat': 37.843056,\n        'lon': -118.477778,\n        'elevation': 5450\n    },\n    'cbir': {\n        'name': 'Big Rock',\n        'lat': 38.039444,\n        'lon': -122.57,\n        'elevation': 1500\n    },\n    'cbld': {\n        'name': 'Blue Door',\n        'lat': 41.054722,\n        'lon': -120.3375,\n        'elevation': 5615\n    },\n    'cblm': {\n        'name': 'Blacks Mountain',\n        'lat': 40.77,\n        'lon': -121.168056,\n        'elevation': 7050\n    },\n    'cbml': {\n        'name': 'Blue Mountain Lookout',\n        'lat': 41.829722,\n        'lon': -120.865833,\n        'elevation': 5740\n    },\n    'cbmt': {\n        'name': 'Brush Mountain',\n        'lat': 40.915556,\n        'lon': -123.668611,\n        'elevation': 3988\n    },\n    'cbnr': {\n        'name': 'Atlas Peak',\n        'lat': 38.284444,\n        'lon': -120.489722,\n        'elevation': 2803\n    }\n}","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js",["223","224","225","226"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\nimport FireIcon from '../images/realistic_fire.png';\n\nvar myIcon = L.icon({\n    iconUrl: FireIcon,\n    iconSize: [30, 40]\n})\n\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nvar base_url = ''\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass FireHistoryDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentFire: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(base_url + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleFireChange(newFire){\n        this.setState({\n            currentFire: newFire,\n        })\n    }\n\n    render(){\n\n        // delete L.Icon.Default.prototype._getIconUrl;\n        // L.Icon.Default.mergeOptions({\n        //     iconRetinaUrl: require('../images/fire.png'),\n        //     iconUrl: require('../images/fire.png'),\n        //     shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n        // });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='fireHistory'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                />\n                <div>\n                    {\n                        this.state.currentView === 'Table View'?\n                        <div>\n                        {\n                            !this.state.data?\n                            <div>Getting data...</div>\n                            :\n                            <MDBDataTable responsive\n                            striped\n                            bordered\n                            data={this.state.data}\n                            />\n                        }\n                    </div>\n                    :\n                    <div>\n                        <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                            <LayersControl position=\"topright\">\n\n                                <LayersControl.BaseLayer name=\"Topology\" checked>\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Street\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Satellite\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Terrain\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Dark\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                            </LayersControl>\n\n                            <MarkerClusterGroup>\n                                {\n                                    this.state.data == null?\n                                    <div>Waiting for data to load...</div>\n                                    :\n                                    this.state.data.rows.map(\n                                        marker => {\n                                            return (\n                                                <Marker position={[marker['POO_LATITUDE'], marker['POO_LONGITUDE']]} key={marker['OBJECTID']} onclick={() => this.handleFireChange(marker)} icon={myIcon}>\n                                                    <Popup>\n                                                        <p>Object ID: {marker['OBJECTID']}</p>\n                                                        <p>Lat: {marker['POO_LATITUDE']}</p>\n                                                        <p>Lon: {marker['POO_LONGITUDE']}</p>\n                                                    </Popup>\n                                                </Marker>\n                                            )\n                                        }\n                                    )\n                                }\n                            </MarkerClusterGroup>\n                        </Map>\n                        <div style={{float:'right', padding:'6px', width:'230px'}}>\n                        {\n                            this.state.currentFire == null?\n                            <h3>Select a fire for more info.</h3>\n                            :\n                            <div>\n                                <h3>Fire Information</h3>\n                                <hr/>\n                                {\n                                    this.state.features.map(\n                                        feature => {\n                                            return (\n                                               <div key={feature}>\n                                                   <strong>{feature}: </strong>{this.state.currentFire[feature]}\n                                                   <br/>\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                        }\n                        </div>\n                    </div>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default FireHistoryDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js",["227","228","229","230","231","232","233","234","235","236","237","238"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireDetectionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Satellite Image Source': 'Landsat 8',\n                'Tensorflow Model Version': 'Faster RCNN v2.1',\n                'Fire  Detected': 'YES',\n                'Confidence Level': '97%',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData2 = this.getData2.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData2(){\n        <div style={{width:'100%', height:'50px'}}>\n            console.log(\"getData2\")\n            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='60%' style={{margin:'20px 0'}}/>\n        </div>\n    }\n\n    getNOAAdata(start, end){\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireDetection'\n                    getData2={this.getData2}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Detection for: </strong>{this.state.currentCounty} County   date:  {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation Results:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='45%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-prediction.png'} alt='fire' width='30%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-precision-recall.png'} alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                        </div>\n                        :\n                        <div>\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_1.png'} alt='fire2' width='70%' style={{margin:'20px 0'}} />\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_2.png'} alt='fire3' width='70%' style={{margin:'20px 0'}} />\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireDetectionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nvar base_url = ''\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass FireProgressionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Fire Animation Start': 'Oct 20, 2007',\n                'Fire Animation End': 'Oct 24, 2007',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(base_url + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='actualPrediction'\n                    dataType='fireProgression'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County 2007-10-20  to 2007-10-24 \n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Prediction'?\n                        <div>\n                            <h3>Fire Spread Ground Truth:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='http://worldlywise.pbworks.com/f/1274641471/All_3D.gif' alt='fire' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <br/>\n                        </div>\n                        :\n                        <div>\n                            <hr/>\n                            <h3>Predicted Fire Progression:</h3>\n                            <hr/>\n                            <img src={process.env.PUBLIC_URL + 'images/spread.gif'} alt='spread2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n\n\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireProgressionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js",["253","254","255","256","257","258","259","260","261","262","263","264","265","266"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nvar base_url = '';\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass FireRiskPredictionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Weather Model 1': 'SVM',\n                'Weather Model 2': 'XGBoost',\n                'Weather Model 3': 'Random Forest',\n                'Remote Sensing  Model 1': 'CNN',\n                'Remote Sensing  Model 2': 'MultiLayer Perceptron',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(base_url + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            console.log(rawData);\n            if(rawData != null){\n                if(rawData['error'] == null){\n                    var i = 0;\n                    for(i=0; i < rawData['features'].length; i++){\n                        var newRowEntry = {}\n                        for(var feature of this.state.features){\n                            var val = rawData['features'][i]['attributes'][feature];\n                            if(val == null){\n                                val = ''\n                            }\n                            newRowEntry[feature] = val;\n                        }\n                        rows.push(newRowEntry);\n                    }\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireRiskPrediction'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Risk Prediction  for: </strong>{this.state.currentCounty} County  date: {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <hr/>\n                        \n                       \n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n\n                        </div>\n                        :\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireRiskPredictionModEval;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js",["267","268","269","270","271","272","273"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass WeatherDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Avg temp': '78.6 F',\n                'Lowest temp': '46.9 F',\n                'Highest temp': '99.3 F',\n                'Avg windspeed': '9 mph',\n                'Lowest windspeed': '2 mph',\n                'Highest windspeed': '22 mph',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'NOAA'){\n            this.getNOAAdata(startDate, endDate);\n        }\n    }\n\n    getNOAAdata(start, end){\n        fetch(prodUrl + '/api/getNOAAdata', {\n            method:'POST',\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            var rawData = response['rawData'];\n            var weatherStationData = response['weatherStationData']\n            weatherStationData = JSON.parse(weatherStationData)\n            weatherStationData = weatherStationData['results'];\n\n            // console.log(weatherStationData);\n\n            this.setState({\n                weatherStationData: weatherStationData,\n            })\n\n            var parsedData = JSON.parse(rawData);\n\n            var cols = [];\n            var rows = [];\n        \n            for(const key in parsedData){\n                var newColEntry = {\n                    label: key,\n                    field: key,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(parsedData['DATE'] != null){\n                for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \n                    var newRowEntry = {}\n                    for(const key in parsedData){\n                        var val = parsedData[key][i];\n                        if (val == null){\n                            val = ''\n                        }\n                        newRowEntry[key] = val\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='weather'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://eldoradoweather.com/current/climate/images/San%20Diego.png' alt='weather' width='45%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.westjet.com/vacations/img/destinations/en-weather-charts/United-States-Hawaii/SAN-San-Diego_weather-chart.gif' alt='weather2' height='300px' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default WeatherDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/VegetationDataCollection.js",["274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n// import { SketchPicker } from 'react-color';\nimport ColorPicker from '../Components/ColorPicker';\n\n\n// import usgs images\nimport usgs_img1 from './USGS_NDVI_images/2021-03-02 to 2021-03-08.jpg';\nimport usgs_img2 from './USGS_NDVI_images/2021-02-23 to 2021-03-01.jpg';\nimport usgs_img3 from './USGS_NDVI_images/2021-02-16 to 2021-02-22.jpg';\nimport usgs_img4 from './USGS_NDVI_images/2021-02-09 to 2021-02-15.jpg';\nimport usgs_img5 from './USGS_NDVI_images/2021-02-02 to 2021-02-08.jpg';\nimport usgs_img6 from './USGS_NDVI_images/2021-01-26 to 2021-02-01.jpg';\n\n// import ncei images\nimport ncei_img1 from './NCEI_NDVI_images/2021-01-01.png'\nimport ncei_img2 from './NCEI_NDVI_images/2020-12-31.png'\nimport ncei_img3 from './NCEI_NDVI_images/2020-12-30.png'\nimport ncei_img4 from './NCEI_NDVI_images/2020-12-26.png'\nimport ncei_img5 from './NCEI_NDVI_images/2020-12-25.png'\nimport ncei_img6 from './NCEI_NDVI_images/2020-12-23.png'\n\nconst usgs_ndvi_images = {\n    '2021-03-02 to 2021-03-08': usgs_img1,\n    '2021-02-23 to 2021-03-01': usgs_img2,\n    '2021-02-16 to 2021-02-22': usgs_img3,\n    '2021-02-09 to 2021-02-15': usgs_img4,\n    '2021-02-02 to 2021-02-08': usgs_img5,\n    '2021-01-26 to 2021-02-01': usgs_img6\n}\n\nconst ncei_ndvi_images = {\n    '2021-01-01': ncei_img1,\n    '2020-12-31': ncei_img2,\n    '2020-12-30': ncei_img3,\n    '2020-12-26': ncei_img4,\n    '2020-12-25': ncei_img5,\n    '2020-12-23': ncei_img6\n}\n\n\nvar base_url = '';\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass VegetationDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'Landsat',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            // data: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            nceiDate: '2021-01-01',\n            usgsDateRange: '2021-03-02 to 2021-03-08',\n\n            landsatDate: '20210221_20210221',\n            gotLandsatNdviImage: false,\n            // color1: ['4','60','48'],\n            // color2: ['116', '67', '17'],\n            landsatImageColors: [\n                ['4','60','48'],\n                ['29', '121', '113'],\n                ['29', '121', '113'],\n                ['108', '188', '177'],\n                ['200', '234', '229'],\n                ['200', '234', '229'],\n                ['245', '240', '226'],\n                ['231', '206', '154'],\n                ['231', '206', '154'],\n                ['188', '127', '56'],\n                ['116', '67', '17'],\n            ],\n            landsatPath: '40',\n            landsatRow: '37',\n            landsatResult: 'failure',\n            landsatImageUrlRand: null,\n\n            gotModisImage: false,\n            modisResult: 'failure',\n            modisImageUrlRand: null,\n            modisImageColors: [\n                ['0','0','0'],\n                ['0','100','0'],\n                ['34','139','34'],\n                ['124','252','0'],\n                ['255','165','0'],\n                ['255','255','0'],\n                ['255','0','0'],\n                ['128','0','0'],\n                ['0','255','255'],\n                ['0','128','128'],\n                ['0','0','128']\n            ],\n            modisHorizontal: '08',\n            modisVertical: '05',\n            // modisAcquiredYear: '2018',\n            // modisAcquiredDay: '313'\n            modisAcquiredYear: '2021',\n            modisAcquiredDay: '1',\n\n            gotGoesImage: false,\n            goesResult: 'failure',\n            goesUrlRand: null,\n            goesYear: 2020,\n            goesDayOfYear: 257,\n            goesHour: 20\n\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        this.handleNceiDateChange = this.handleNceiDateChange.bind(this);\n        this.handleUsgsDateChange = this.handleUsgsDateChange.bind(this);\n        this.handleLandsatDateChange = this.handleLandsatDateChange.bind(this);\n        // this.handleLandsatIncrementColorChange = this.handleLandsatIncrementColorChange.bind(this);\n        // this.colorToHex = this.colorToHex.bind(this);\n        this.rgbToHex = this.rgbToHex.bind(this);\n        this.getLandsatData = this.getLandsatData.bind(this);\n        this.handleLandsatPathChange = this.handleLandsatPathChange.bind(this);\n        this.handleLandsatRowChange = this.handleLandsatRowChange.bind(this);\n        this.decimalToHex = this.decimalToHex.bind(this);\n        this.handleLandsatImageColorChange = this.handleLandsatImageColorChange.bind(this);\n        this.getModisNdviData = this.getModisNdviData.bind(this);\n        this.handleModiImageColorChange = this.handleModiImageColorChange.bind(this);\n        this.handleModisHorizontalChange = this.handleModisHorizontalChange.bind(this);\n        this.handleModisVerticalChange = this.handleModisVerticalChange.bind(this);\n        this.handleModisDateChange = this.handleModisDateChange.bind(this);\n        this.downloadNdviImage = this.downloadNdviImage.bind(this);\n        this.getDayOfYear = this.getDayOfYear.bind(this);\n        // this.getGoesData = this.getGoesData.bind(this);\n        // this.handleGoesDateChange = this.handleGoesDateChange.bind(this);\n        // this.handleGoesHourChange = this.handleGoesHourChange.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.getLandsatData()\n        this.getModisNdviData()\n        // this.getGoesData()\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource\n        })\n    }\n\n    handleNceiDateChange(newDate){\n        this.setState({\n            nceiDate: newDate\n        })\n    }\n\n    handleUsgsDateChange(newDate){\n        this.setState({\n            usgsDateRange: newDate\n        })\n    }\n\n    handleLandsatDateChange(newDate){\n        // var date = newDate.getFullYear() + '' + newDate.getMonth() + '' + newDate.getDate();\n        var date = newDate.split('-');\n        date = date[0] + date[1] + date[2];\n        date += '_' + date\n        this.setState({\n            landsatDate: date\n        }, ()=>{this.getLandsatData()} )\n    }\n\n    getLandsatData(){\n        this.setState({\n            gotLandsatNdviImage: false,\n            landsatResult: 'success',\n        })\n\n        var path = this.state.landsatPath\n        if(path.length == 1){\n            path = '00' + path\n        }\n        else{\n            path = '0' + path\n        }\n\n        var row = this.state.landsatRow\n        if(row.length == 1){\n            row = '00' + row\n        }\n        else{\n            row = '0' + row\n        }\n\n        var colors = []\n        for(var i=0; i<this.state.landsatImageColors.length; i++){\n            var color = this.state.landsatImageColors[i]\n            colors.push(this.rgbToHex(color))\n        }\n        \n\n        fetch(base_url + '/api/get_landsat_ndvi_image',{\n            method: 'POST',\n            body: JSON.stringify({\n                date: this.state.landsatDate,\n                colors: colors,\n                path: path,\n                row: row\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response['result'] == 'failure'){\n                this.setState({\n                    landsatResult: 'failure'\n                })\n            }\n            else{\n                this.setState({\n                    landsatResult: 'success',\n                    gotLandsatNdviImage: true,\n                    landsatImageUrlRand: Math.floor(Math.random() * 1000000)\n                })\n            }\n        })\n    }\n\n    handleLandsatImageColorChange(colorNumber, newColor){\n        var colors = this.state.landsatImageColors\n        colors[colorNumber] = [newColor.r, newColor.g, newColor.b]\n\n        this.setState({\n            landsatImageColors: colors\n        })\n    }\n\n    decimalToHex(decimal){\n        var hex = Number(decimal).toString(16);\n        if (hex.length < 2) {\n                hex = \"0\" + hex;\n        }\n        return hex;\n    }\n\n    rgbToHex(rgb) {\n        return '#' + this.decimalToHex(rgb[0]) + this.decimalToHex(rgb[1]) + this.decimalToHex(rgb[2]);\n      }\n\n    handleLandsatPathChange(newPath){\n        if(newPath < 8){\n            newPath = 8\n        }\n        else if(newPath > 55){\n            newPath = 55\n        }\n        this.setState({\n            landsatPath: newPath\n        })\n    }\n\n    handleLandsatRowChange(newRow){\n        if(newRow < 20){\n            newRow = 20\n        }\n        else if(newRow > 45){\n            newRow = 45\n        }\n        this.setState({\n            landsatRow: newRow\n        })\n    }\n\n    getModisNdviData(){\n        this.setState({\n            gotModisImage: false,\n            modisResult: 'success',\n        })\n\n        var colors = []\n        for(var i=0; i<this.state.modisImageColors.length; i++){\n            var color = this.state.modisImageColors[i]\n            colors.push(this.rgbToHex(color))\n        }\n\n        var day = this.state.modisAcquiredDay\n        if(day < 10){\n            day = '00' + day\n        }\n        else if(day < 100){\n            day = '0' + day\n        }\n        \n        fetch(base_url + '/api/get_modis_ndvi_image',{\n            method: 'POST',\n            body: JSON.stringify({\n                // date: this.state.landsatDate,\n                colors: colors,\n                hor: this.state.modisHorizontal,\n                ver: this.state.modisVertical,\n                acqYear: this.state.modisAcquiredYear,\n                acqDay: day\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response['result'] == 'failure'){\n                this.setState({\n                    modisResult: 'failure'\n                })\n            }\n            else{\n                this.setState({\n                    modisResult: 'success',\n                    gotModisImage: true,\n                    modisImageUrlRand: Math.floor(Math.random() * 1000000)\n                })\n            }\n        })\n    }\n\n    handleModiImageColorChange(colorNumber, newColor){\n        var colors = this.state.modisImageColors\n        colors[colorNumber] = [newColor.r, newColor.g, newColor.b]\n\n        this.setState({\n            modisImageColors: colors\n        })\n    }\n\n    handleModisHorizontalChange(newHor){\n        if(newHor < 10){\n            newHor = '0' + newHor.toString()\n        }\n        this.setState({\n            modisHorizontal: newHor\n        })\n    }\n\n    handleModisVerticalChange(newVer){\n        if(newVer < 10){\n            newVer = '0' + newVer.toString()\n        }\n        this.setState({\n            modisVertical: newVer\n        })\n    }\n\n    getDayOfYear(date){\n        var dateInfo = date.split('-')\n        var year = dateInfo[0] \n        var month = parseInt(dateInfo[1]) - 1\n        var day = parseInt(dateInfo[2])\n\n        var now = new Date(year, month, day);\n        var start = new Date(now.getFullYear(), 0, 0);\n        var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\n        var oneDay = 1000 * 60 * 60 * 24;\n\n        var dayOfYear = Math.floor(diff / oneDay);\n        return dayOfYear\n    }\n\n    handleModisDateChange(newDate){\n        var dateInfo = newDate.split('-')\n        var year = dateInfo[0] \n        // var month = parseInt(dateInfo[1]) - 1\n        // var date = parseInt(dateInfo[2])\n\n        // var now = new Date(year, month, date);\n        // var start = new Date(now.getFullYear(), 0, 0);\n        // var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\n        // var oneDay = 1000 * 60 * 60 * 24;\n\n        // var dayOfYear = Math.floor(diff / oneDay);\n        var dayOfYear = this.getDayOfYear(newDate)\n\n        this.setState({\n            modisAcquiredYear: year,\n            modisAcquiredDay: dayOfYear\n        })\n    }\n\n    downloadNdviImage(){\n        // console.log('downloading...')\n        var rand = Math.floor(Math.random() * 1000000);\n        fetch(base_url + '/api/'+rand+'/download_ndvi')\n        .then(res => res.arrayBuffer())\n        .then(buffer => {\n            // console.log(buffer)\n\n            // 1. create a blob from the byte data\n            const blob = new Blob( [ buffer ] );\n\n            // 2. create blob url\n            const url = URL.createObjectURL(blob);\n\n            // 3. create link to manually click and download the file\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'NDVI.TIF';\n            a.click(); // triggering it manually\n        })\n    }\n\n    // getGoesData(){\n    //     // console.log('getting goes data')\n    //     this.setState({\n    //         gotGoesImage: false,\n    //     })\n    //     fetch(base_url + '/api/get_goes_16_image',{\n    //         method: 'POST',\n    //         body: JSON.stringify({\n    //             year: this.state.goesYear,\n    //             dayOfYear: this.state.goesDayOfYear,\n    //             hour: this.state.goesHour\n    //         })\n    //     })\n    //     .then(res => res.json())\n    //     .then(response => {\n    //         if(response['result'] == 'failure'){\n    //             this.setState({\n    //                 gotGoesImage: true,\n    //                 goesResult: 'failure'\n    //             })\n    //         }\n    //         else{\n    //             this.setState({\n    //                 goesResult: 'success',\n    //                 gotGoesImage: true,\n    //                 goesUrlRand: Math.floor(Math.random() * 1000000)\n    //             })\n    //         }\n    //     })\n    // }\n\n    // handleGoesDateChange(newDate){\n    //     var dateInfo = newDate.split('-')\n    //     var year = dateInfo[0] \n    //     var dayOfYear = this.getDayOfYear(newDate)\n\n    //     this.setState({\n    //         goesYear: year,\n    //         goesDayOfYear: dayOfYear\n    //     })\n    // }\n\n    // handleGoesHourChange(newHour){\n    //     this.setState({\n    //         goesHour: newHour\n    //     })\n    // }\n\n    render(){\n\n        // var ndvi_indices = ['-1', '-0.5', '-0.2', '0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.8', '1']\n        var ndvi_indices = ['1', '0.8', '0.6', '0.5', '0.4', '0.3', '0.2', '0.1', '0', '-0.2', '-0.5', '-1']\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='vegetation'\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    dataSource = {this.state.source}\n                    handleSourceChange = {this.handleSourceChange}\n                    handleNceiDateChange = {this.handleNceiDateChange}\n                    handleUsgsDateChange = {this.handleUsgsDateChange}\n                    handleLandsatDateChange = {this.handleLandsatDateChange}\n                    landsatPath = {this.state.landsatPath}\n                    landsatRow = {this.state.landsatRow}\n                    handleLandsatPathChange = {this.handleLandsatPathChange}\n                    handleLandsatRowChange = {this.handleLandsatRowChange}\n                    getLandsatData = {this.getLandsatData}\n                    modisHorizontal = {this.state.modisHorizontal}\n                    modisVertical = {this.state.modisVertical}\n                    handleModisHorizontalChange = {this.handleModisHorizontalChange}\n                    handleModisVerticalChange = {this.handleModisVerticalChange}\n                    getModisData = {this.getModisNdviData}\n                    handleModisDateChange = {this.handleModisDateChange}\n                    // handleGoesDateChange = {this.handleGoesDateChange}\n                    // handleGoesHourChange = {this.handleGoesHourChange}\n                    // getGoesData = {this.getGoesData}\n                />\n                <div>\n                    {\n                        this.state.currentView === 'Table View'?\n                        <div>\n                            {\n                                this.state.source == 'Landsat'?\n                                <div>\n                                    Image for: {this.state.landsatDate.substring(0, 4)}-{this.state.landsatDate.substring(4,6)}-{this.state.landsatDate.substring(6, 8)}, Path = {this.state.landsatPath}, Row = {this.state.landsatRow}\n                                    <br/>\n                                    <br/>\n\n                                    {\n                                        this.state.landsatResult == 'failure'?\n                                        <div>\n                                            <p style={{color:'red'}}>\n                                                There is no data for this date, path, and row combination.\n                                            </p>\n                                        </div>\n                                        :\n                                        this.state.gotLandsatNdviImage == false?\n                                        <div>\n                                            Loading...\n                                        </div>\n                                        :\n                                        <div style={{width:'50%', float:'left'}}>\n                                            <img src={'/api/'+this.state.landsatImageUrlRand+'/landsat_ndvi_image.png'} alt='ndvi_image' width='100%' style={{border:'1px solid black'}}/>\n                                        </div>\n\n                                    }\n\n                                    <div style={{border:'1px solid grey', borderRadius:'5px', float:'right', width:'300px', padding:'16px'}}>\n                                        <h4>Customize NDVI colors</h4>\n                                        <hr/>\n\n                                        {\n                                            this.state.landsatImageColors.map((color, index) => {\n                                                return(\n                                                    <div style={{width:'125px', height:'36px'}} key={index}>\n                                                        <div style={{float:'left'}}>{ndvi_indices[index]}:</div>\n                                                        <div style={{float:'right'}}>\n                                                            <ColorPicker \n                                                                r={color[0]} \n                                                                g={color[1]} \n                                                                b={color[2]} \n                                                                dataSource = 'landsat'\n                                                                colorNumber={index}\n                                                                handleLandsatImageColorChange = {this.handleLandsatImageColorChange}/>\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })\n                                        }\n\n                                        <button className='btn btn-primary' style={{float:'right'}} onClick={this.getLandsatData}>Update</button>\n                                    </div>\n                                </div>\n                                :\n                                this.state.source == 'Modis'?\n                                <div>\n                                    Image for: {this.state.modisAcquiredYear}, Day {this.state.modisAcquiredDay}, Hor. = {this.state.modisHorizontal}, Ver. = {this.state.modisVertical}\n                                    <br/>\n                                    <br/>\n\n                                    {\n                                        this.state.modisResult == 'failure'?\n                                        <div>\n                                            <p style={{color:'red'}}>\n                                                There is no data for this date.\n                                            </p>\n                                        </div>\n                                        :\n                                        this.state.gotModisImage == false?\n                                        <div>\n                                            Loading...\n                                        </div>\n                                        :\n                                        <div style={{width:'50%', float:'left'}}>\n                                            <img src={'/api/'+this.state.modisImageUrlRand+'/modis_ndvi_image.png'} alt='modis_ndvi_image' width='100%' style={{border:'1px solid black'}}/>\n                                            \n                                            <br/><br/>\n                                            <button className='btn btn-secondary' onClick={this.downloadNdviImage}>Download .TIF file</button>\n                                        </div>\n\n                                    }\n\n                                    <div style={{border:'1px solid grey', borderRadius:'5px', float:'right', width:'300px', padding:'16px'}}>\n                                        <h4>Customize NDVI colors</h4>\n                                        <hr/>\n\n                                        {\n                                            this.state.modisImageColors.map((color, index) => {\n                                                return(\n                                                    <div style={{width:'125px', height:'36px'}} key={index}>\n                                                        <div style={{float:'left'}}>{ndvi_indices[index]}:</div>\n                                                        <div style={{float:'right'}}>\n                                                            <ColorPicker \n                                                                r={color[0]} \n                                                                g={color[1]} \n                                                                b={color[2]} \n                                                                dataSource = 'modis'\n                                                                colorNumber={index}\n                                                                handleModiImageColorChange = {this.handleModiImageColorChange}/>\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })\n                                        }\n\n                                        <button className='btn btn-primary' style={{float:'right'}} onClick={this.getModisNdviData}>Update</button>\n                                    </div>\n\n                                </div>\n                                :\n                                // this.state.source == 'GOES'?\n                                // <div>\n                                //     Image for: {this.state.goesYear}, Day {this.state.goesDayOfYear}, Hour {this.state.goesHour}\n                                //     <br/>\n                                //     <br/>\n                                //     {\n                                //         this.state.gotGoesImage == false?\n                                //         <p>Loading...</p>\n                                //         :\n                                //         this.state.goesResult == 'failure'?\n                                //         <p style={{color: 'red'}}>No image</p>\n                                //         :\n                                //         <div>\n                                //             <img src={'/api/'+this.state.goesUrlRand+'/goes_16_ndvi.png'} width='600px' style={{border:'1px solid black'}}/>\n                                //         </div>\n                                //     }\n                                // </div>\n                                // :\n                                this.state.source == 'NCEI'?\n                                <div>\n                                    NDVI:\n                                    <br/>\n                                    <br/>\n                                    <img src={ncei_ndvi_images[this.state.nceiDate]} width='75%' style={{border:'1px solid black'}} />\n                                </div>\n                                :\n                                this.state.source == 'USGS'?\n                                <div>\n                                    NDVI: \n                                    <br/>\n                                    <br/>\n                                    <img src={usgs_ndvi_images[this.state.usgsDateRange]} width='75%' style={{border:'1px solid black'}}/>\n                                </div>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                </LayersControl>\n\n                                <MarkerClusterGroup>\n                                    {\n                                        this.state.data == null?\n                                        <div>Waiting for data to load...</div>\n                                        :\n                                        <div></div>\n                                    }\n                                </MarkerClusterGroup>\n                            </Map>\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.currentMarker == null?\n                                <h3>Select a marker for more info.</h3>\n                                :\n                                <div>\n                                    <h3>Marker Information</h3>\n                                    <hr/>\n                                    {\n                                        this.state.features.map(\n                                            feature => {\n                                                return (\n                                                <div>\n                                                    <strong>{feature}: </strong>{this.state.currentMarker[feature]}\n                                                    <br/>\n                                                    </div>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                            }\n                            </div>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default VegetationDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js",["291"],"import React from 'react';\nimport DetectionDetail from './DetectionDetail';\n\nconst DetectionList = ({ boxes, scores, classes }) => {\n  const fires = [];\n\n  if(scores.length == classes.length) {\n    for(let i = 0; i<boxes.length; i++) {\n      fires.push([boxes[i], scores[i], classes[i], i]);\n    }\n  }\n\n  const renderedList = fires.map((fire) => {\n    return (\n      <div>\n        <DetectionDetail\n          box={fire[0]}\n          score={fire[1]}\n          classification={fire[2]}\n          key={fire[4]}\n        />\n        <br/>\n      </div>\n    );\n  });\n\nreturn <div className=\"ui relaxed divided list\">{renderedList}</div>\n}\n\nexport default DetectionList;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js",["292"],"import React from 'react'\n\nconst DetectionDetail = ({box, score, classification, key}) => {\n\n  let topLeftPoint = '',\n        bottomRightPoint = '',\n        detectionConfidences = 0,\n        entityClassification = '';\n  // if detail exists, parse the information given back\n  if(box && score && classification){\n\n    topLeftPoint = formatTopLeft(box);\n    bottomRightPoint = formatBottomRight(box);\n    detectionConfidences = formatPercent(score);\n    entityClassification = classification == 1 ? 'Fire' : 'Smoke';\n  }\n  else {\n    return (\n      <div className=\"ui card fluid\">\n        <div className=\"content\">\n          <p className=\"description\">No Image Selected...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ui card\">\n      <div className=\"content\">\n        <p className=\"header\">{entityClassification} Entity {key}</p>\n        \n        <div className=\"description\">\n          <table className=\"ui very basic collapsing celled table\">\n            <thead>\n              <tr>\n                <th>Detail</th>\n                <th>Info</th>\n              </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td>Classification</td>\n                <td>{entityClassification}</td>\n              </tr>\n              <tr>\n                <td>Confidence</td>\n                <td>{detectionConfidences}</td>\n              </tr>\n              <tr>\n                <td>Top Left Point</td>\n                <td>{topLeftPoint}</td>\n              </tr>\n              <tr>\n                <td>Bottom Right Point</td>\n                <td>{bottomRightPoint}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction formatTopLeft(box) {\n  return \"(\" + box[0].toFixed(3) + \", \" + box[1].toFixed(3) + \")\";\n}\n\nfunction formatBottomRight(box) {\n  return \" (\" + box[2].toFixed(3) + \", \" + box[3].toFixed(3) + \")\";\n}\n\nfunction formatPercent(score) {\n  return (score * 100).toFixed(1) + \"%\";\n}\n\nexport default DetectionDetail;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js",["293","294"],"import React from 'react';\nimport CountySelector from './CountySelector';\n\nclass FilterDivModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.changeStartDate = this.changeStartDate.bind(this);\n        this.changeEndDate = this.changeEndDate.bind(this);\n    }\n\n    changeStartDate(event){\n        this.props.handleStartDateChange(event.target.value);\n    }\n\n    changeEndDate(event){\n        this.props.handleEndDateChange(event.target.value);\n    }\n    \n    render(){\n        return(\n            <div>\n                <div style={{width:'100%', height:'50px'}}>\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\n                        {\n                            this.props.dataType === 'fireDetection'?\n                            'Fire Detection'\n                            :\n                            this.props.dataType === 'fireRiskPrediction'?\n                            'Fire Risk Prediction'\n                            :\n                            this.props.dataType === 'fireProgression'?\n                            'Fire Progression'\n                            :\n                            <div></div>\n                        }\n                    </h4>\n\n                    {\n                        this.props.pageType === 'dataCollection'?\n                            this.props.currentView === 'Table View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\n                        :\n                        this.props.pageType === 'dataAnalysis'?\n                            this.props.currentView === 'Statistic View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Graph View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\n                        :\n                        this.props.pageType === 'actualPrediction'?\n                            this.props.currentView === 'Actual'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Prediction</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Actual</button>\n                        :\n                        <div></div>\n                    }\n\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDivModEval}>\n                        Select \n                        &nbsp;\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <hr/>\n\n                <div style={{display:'none', height:'auto'}} id='filterDivModEval'>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Source: &nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Landsat 8'>Landsat 8</option>\n                                    <option value='GOES 16/17'>GOES 16/17</option>\n                                    <option value='MODIS/TERRA'>MODIS/TERRA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Weather Fire-History'>Weather Fire-History</option>\n                                    <option value='Remote-Sensing Fire-History'>Remote-Sensing Fire-History</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Fire History'>Fire History</option>\n                                    <option value='Remote Sensing'>Remote Sensing</option>\n                                    <option value='Land Cover'>Land Cover</option>\n                                    <option value='Waeather'>Weather</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <div style={{float:'right'}}>\n                            Location:&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                        </div>\n                        <br/>\n                        <br/>\n                        <br/>\n                    </div>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Model: &nbsp;&nbsp;&nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Faster RCNN'>Faster RCNN</option>\n                                    <option value='Efficient Net'>Efficient Net</option>\n                                    <option value='Retina Net'>Retina Net</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='SVM'>SVM</option>\n                                    <option value='XGBoost'>XGBoost</option>\n                                    <option value='Random Forest'>Random Forest</option>\n                                    <option value='Multi Layer Perceptron'>Multi Layer Perceptron</option>\n                                    <option value='CNN'>CNN</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Value Iteration'>Value Iteration</option>\n                                    <option value='DQN'>DQN</option>\n                                    <option value='Policy Gradient'>Policy Gradient</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <button className='btn btn-primary' onClick={this.props.getData2} style={{float:'right', marginRight:'16px'}}>Evaluate Model</button>\n                    </div>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <hr/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterDivModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js",["295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import React from 'react';\nimport CountySelector from './CountySelector';\nimport WrccStationSelector from './WrccStationSelector';\n\nclass FilterDiv extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.changeStartDate = this.changeStartDate.bind(this);\n        this.changeEndDate = this.changeEndDate.bind(this);\n        this.changeSource = this.changeSource.bind(this);\n        this.changeWrccStation = this.changeWrccStation.bind(this);\n        this.changeModisDate = this.changeModisDate.bind(this);\n        this.changeModisArea = this.changeModisArea.bind(this);\n        this.changeModisColor = this.changeModisColor.bind(this);\n        this.changeNceiDate = this.changeNceiDate.bind(this);\n        this.changeUsgsDate = this.changeUsgsDate.bind(this);\n        this.changeLandsatDate = this.changeLandsatDate.bind(this);\n        this.changeLandsatPath = this.changeLandsatPath.bind(this);\n        this.changeLandsatRow = this.changeLandsatRow.bind(this);\n        this.changeModisHorizontal = this.changeModisHorizontal.bind(this);\n        this.changeModisVertical = this.changeModisVertical.bind(this);\n        this.changeModisDate = this.changeModisDate.bind(this);\n        \n        // GOES for Satellite\n        this.changeGoesDate = this.changeGoesDate.bind(this);\n        this.changeGoesHour = this.changeGoesHour.bind(this);\n        this.changeGoesColorComposite = this.changeGoesColorComposite.bind(this);\n        this.changeGoesImageType = this.changeGoesImageType.bind(this);\n\n        // GOES for lightning\n        this.changeGoesLightningDate = this.changeGoesLightningDate.bind(this);\n        this.changeGoesLightningTime = this.changeGoesLightningTime.bind(this);\n\n    }\n\n    changeStartDate(event){\n        this.props.handleStartDateChange(event.target.value);\n    }\n\n    changeEndDate(event){\n        this.props.handleEndDateChange(event.target.value);\n    }\n\n    changeSource(event){\n        this.props.handleSourceChange(event.target.value);\n    }\n\n    changeWrccStation(station){\n        this.props.handleWrccStationChange(station);\n    }\n\n    changeModisArea(event){\n        this.props.handleModisAreaChange(event.target.value)\n    }\n\n    changeModisColor(event){\n        this.props.handleModisColorChange(event.target.value)\n    }\n\n    changeModisDate(event){\n        this.props.handleModisDateChange(event.target.value)\n    }\n\n    changeNceiDate(event){\n        this.props.handleNceiDateChange(event.target.value)\n    }\n\n    changeUsgsDate(event){\n        this.props.handleUsgsDateChange(event.target.value)\n    }\n\n    changeLandsatDate(event){\n        this.props.handleLandsatDateChange(event.target.value)\n    }\n\n    changeLandsatPath(event){\n        this.props.handleLandsatPathChange(event.target.value)\n    }\n\n    changeLandsatRow(event){\n        this.props.handleLandsatRowChange(event.target.value)\n    }\n\n    changeModisHorizontal(event){\n        this.props.handleModisHorizontalChange(event.target.value)\n    }\n\n    changeModisVertical(event){\n        this.props.handleModisVerticalChange(event.target.value)\n    }\n\n    changeModisDate(event){\n        this.props.handleModisDateChange(event.target.value)\n    }\n\n    changeGoesDate(event){\n        this.props.handleGoesDateChange(event.target.value)\n    }\n\n    changeGoesHour(event){\n        this.props.handleGoesHourChange(event.target.value)\n    }\n\n    changeGoesLightningDate(event){\n        this.props.handleGoesDateChange(event.target.value)\n    }\n\n    changeGoesLightningTime(event){\n        this.props.handleGoesTimeChange(event.target.value)\n    }\n\n    changeGoesColorComposite(event){\n        this.props.handleGoesColorCompositeChange(event.target.value)\n    }\n\n    changeGoesImageType(event){\n        this.props.handleGoesImageTypeChange(event.target.value)\n    }\n    \n    render(){\n        return(\n            <div>\n                <div style={{width:'100%', height:'50px'}}>\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\n                        {\n                            this.props.dataType === 'weather'?\n                            'Weather'\n                            :\n                            this.props.dataType === 'fireHistory'?\n                            'Fire History'\n                            :\n                            this.props.dataType === 'vegetation'?\n                            'Vegetation'\n                            :\n                            this.props.dataType === 'satellite'?\n                            'Satellite'\n                            :\n                            this.props.dataType === 'lightning'?\n                            'Lightning'\n                            :\n                            this.props.dataType === 'powerlines'?\n                            'Powerlines'\n                            :\n                            <div></div>\n                        }\n                    </h4>\n\n                    {\n                        this.props.pageType === 'dataCollection' && this.props.dataType != 'vegetation'?\n                            this.props.currentView === 'Table View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\n                        :\n                        this.props.pageType === 'dataAnalysis'?\n                            this.props.currentView === 'Statistic View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\n                        :\n                        <div></div>\n                    }\n\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDiv}>\n                        Filter \n                        &nbsp;\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <hr/>\n\n                <div style={{display:'none', height:'auto'}} id='filterDiv'>\n                    <div style={{width:'100%', display:'block', overflow:'auto'}}>\n                        <div style={{float:'left'}}>\n                            Source: &nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'weather'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='WRCC'>WRCC</option>\n                                    <option value='NOAA'>NOAA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireHistory'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='USDA'>USDA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'vegetation'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='Landsat'>Landsat</option>\n                                    <option value='Modis'>Modis</option>\n                                    {/* <option value='GOES'>GOES-16</option> */}\n                                    <option value='NCEI'>NCEI</option>\n                                    <option value='USGS'>USGS</option>\n                                </select>\n                                :\n                                this.props.dataType === 'satellite'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='MODIS'>MODIS</option>\n                                    <option value='GOES'>GOES-16</option>\n                                    <option value='USGS'>USGS</option>\n                                </select>\n                                :\n                                this.props.dataType === 'lightning'?\n                                <select style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='GOES'>GOES-16</option>\n                                </select>\n                                :\n                                this.props.dataType === 'powerlines'?\n                                <select style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='HIFLD'>HIFLD</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        {\n                            this.props.dataType == 'vegetation' && this.props.dataSource == 'NCEI'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n                                Date:\n                                &nbsp;&nbsp;\n                                <select style={{padding:'14px'}} onChange={this.changeNceiDate}>\n                                    <option value='2021-01-01'>2021-01-01</option>\n                                    <option value='2020-12-31'>2020-12-31</option>\n                                    <option value='2020-12-30'>2020-12-30</option>\n                                    <option value='2020-12-26'>2020-12-26</option>\n                                    <option value='2020-12-25'>2020-12-25</option>\n                                    <option value='2020-12-23'>2020-12-23</option>\n                                </select>\n                            </div>\n                            :\n                            this.props.dataSource == 'USGS' && this.props.dataType == 'vegetation'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                Date Range: &nbsp;&nbsp;\n                                {/* <input type='week' style={{padding:'10px'}} min='2021-W01' max='2021-W10'/> */}\n                                <select style={{padding:'14px'}} onChange={this.changeUsgsDate}>\n                                    <option value='2021-03-02 to 2021-03-08'>2021-03-02 to 2021-03-08</option>\n                                    <option value='2021-02-23 to 2021-03-01'>2021-02-23 to 2021-03-01</option>\n                                    <option value='2021-02-16 to 2021-02-22'>2021-02-16 to 2021-02-22</option>\n                                    <option value='2021-02-09 to 2021-02-15'>2021-02-09 to 2021-02-15</option>\n                                    <option value='2021-02-02 to 2021-02-08'>2021-02-02 to 2021-02-08</option>\n                                    <option value='2021-01-26 to 2021-02-01'>2021-01-26 to 2021-02-01</option>\n                                </select>\n                            </div>\n                            :\n                            this.props.dataSource == 'WRCC'?\n                            <div>\n                                <WrccStationSelector handleChange={this.changeWrccStation}/>\n                            </div>\n                            :\n                            this.props.dataSource == 'MODIS'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n                                <select style={{padding:'14px'}} onChange={this.changeModisArea}>\n                                    <option value='North California'>North California</option>\n                                    <option value='South California'>South California</option>\n                                </select>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                                <select style={{padding:'14px'}} onChange={this.changeModisColor}>\n                                    <option value='True Color Composite'>True Color Composite</option>\n                                    <option value='False Color Composite'>False Color Composite</option>\n                                </select>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                                <input type='date' style={{padding:'10px'}} onChange={this.changeModisDate}/>\n                                <br/>\n                            </div>\n                            :\n                            this.props.dataType == 'vegetation' && this.props.dataSource == 'Landsat'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                Date: &nbsp;&nbsp;\n                                <input type='date' style={{padding:'10px'}} onChange={this.changeLandsatDate}/>\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                Path: &nbsp;&nbsp;\n                                <input type='number' min='8' max='55' value={this.props.landsatPath} style={{padding:'14px'}} onChange={this.changeLandsatPath} />\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                Row: &nbsp;&nbsp;\n                                <input type='number' min='20' max='45' value={this.props.landsatRow} style={{padding:'14px'}} onChange={this.changeLandsatRow} />\n\n                                <button className='btn btn-primary' style={{float:'right'}} onClick={this.props.getLandsatData}>Get Data</button>\n\n                            </div>\n                            :\n                            this.props.dataType == 'vegetation' && this.props.dataSource == 'Modis'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                                Date: &nbsp;&nbsp;\n                                <input type='date' style={{padding:'10px'}} onChange={this.changeModisDate}/>\n                                &nbsp;&nbsp;\n\n                                Horizontal: &nbsp;&nbsp;\n                                <input type='number' min='0' max='35' value={this.props.modisHorizontal} style={{padding:'14px'}} onChange={this.changeModisHorizontal} />\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                Vertical: &nbsp;&nbsp;\n                                <input type='number' min='0' max='17' value={this.props.modisVertical} style={{padding:'14px'}} onChange={this.changeModisVertical} />\n\n                                &nbsp;&nbsp;\n                                <button className='btn btn-primary' style={{float:'right'}} onClick={this.props.getModisData}>Get Data</button>\n                                \n                            </div>\n                            :\n                            this.props.dataType == 'satellite' && this.props.dataSource == 'GOES'?\n                            <div style={{display:'block', overflow:'auto'}}>\n                                &nbsp;&nbsp;\n                                {/* Date: &nbsp;&nbsp; */}\n                                <input type='date' style={{padding:'10px'}} onChange={this.changeGoesDate}/>\n\n                                &nbsp;&nbsp;\n                                Hour:&nbsp;\n                                <select style={{padding:'14px'}} onChange={this.changeGoesHour}>\n                                    <option value='0'>0</option>\n                                    <option value='1'>1</option>  \n                                    <option value='2'>2</option> \n                                    <option value='3'>3</option> \n                                    <option value='4'>4</option>  \n                                    <option value='5'>5</option> \n                                    <option value='6'>6</option> \n                                    <option value='7'>7</option> \n                                    <option value='8'>8</option> \n                                    <option value='9'>9</option> \n                                    <option value='10'>10</option>\n                                    <option value='11'>11</option>\n                                    <option value='12'>12</option>\n                                    <option value='13'>13</option>\n                                    <option value='14'>14</option>  \n                                    <option value='15'>15</option>  \n                                    <option value='16'>16</option>  \n                                    <option value='17'>17</option>  \n                                    <option value='18'>18</option>  \n                                    <option value='19'>19</option>  \n                                    <option value='20'>20</option> \n                                    <option value='21'>21</option>  \n                                    <option value='22'>22</option>  \n                                    <option value='23'>23</option>   \n                                </select>\n\n                                &nbsp;&nbsp;\n                                <select style={{padding:'14px'}} onChange={this.changeGoesColorComposite}>\n                                    <option value='true color composite'>True Color Composite</option>\n                                    <option value='false color composite'>False Color Composite</option>\n                                </select>\n\n                                &nbsp;&nbsp;\n                                <select style={{padding:'14px'}} onChange={this.changeGoesImageType}>\n                                    <option value='Image'>Image</option>\n                                    <option value='GIF'>GIF</option>\n                                </select>\n\n                                <button className='btn btn-primary' onClick={this.props.getGoesData} style={{float:'right'}}>Get Data</button>\n                            </div>\n                            :\n                            this.props.dataType == 'lightning' && this.props.dataSource == 'GOES'?\n                            <div>\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                Date: &nbsp;&nbsp;\n                                <input type='date' style={{padding:'10px'}} onChange={this.changeGoesLightningDate} />\n\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                Time: &nbsp;&nbsp;\n                                <input type='time' style={{padding:'10px'}} onChange={this.changeGoesLightningTime} />\n\n                                <button className='btn btn-primary'  style={{float:'right'}} onClick={this.props.getGoesLightningData}>Get Data</button>\n                                \n                            </div>\n                            :\n                            this.props.dataType == 'powerlines'?\n                            <div>\n                                &nbsp;&nbsp;\n                                County:&nbsp;\n                                <CountySelector parentCallback={this.props.changeCounty} />\n                            </div>\n                            :\n                            <div>\n                                <div style={{float:'right'}}>\n                                    From:&nbsp;\n                                    <input type='date' style={{padding:'10px'}} id=\"startDateInput\" onChange={this.changeStartDate}/>\n                                    &nbsp; - &nbsp;\n                                    <input type='date' style={{padding:'10px'}} id='endDateInput' onChange={this.changeEndDate}/>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;\n                                </div>\n                                <br/>\n                                <br/>\n                                <br/>\n                            </div>\n\n                        }\n\n                    </div>\n                    {\n                        this.props.dataSource == 'WRCC' || this.props.dataSource == 'MODIS' || this.props.dataSource == 'NCEI'?\n                        <div></div>\n                        :\n                        this.props.dataSource == 'USGS' && this.props.dataType == 'vegetation'?\n                        <div></div>\n                        :\n                        this.props.dataSource == 'Landsat' && this.props.dataType == 'vegetation'?\n                        <div></div>\n                        :\n                        this.props.dataSource == 'Modis' && this.props.dataType == 'vegetation'?\n                        <div></div>\n                        :\n                        this.props.dataSource == 'GOES' && this.props.dataType == 'satellite'?\n                        <div></div>\n                        :\n                        this.props.dataSource == 'GOES' && this.props.dataType == 'lightning'?\n                        <div></div>\n                        :\n                        this.props.dataType == 'powerlines'?\n                        <div></div>\n                        :\n                        <div>\n                            <div style={{width:'100%'}}>\n                                <div style={{float:'left'}}>\n                                    County: &nbsp;&nbsp;\n                                    <CountySelector parentCallback={this.props.changeCounty}/>\n                                </div>\n                                <button className='btn btn-primary' onClick={this.props.getData} style={{float:'right', marginRight:'16px'}}>Get Data</button>\n                            </div>\n                            <br/>\n                            <br/>\n                        </div>\n                    }\n                    <hr/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterDiv;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/ColorPicker.js",["327","328","329"],"'use strict'\n\nimport React from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nclass ColorPicker extends React.Component {\n  state = {\n    displayColorPicker: false,\n    r: this.props.r,\n    g: this.props.g,\n    b: this.props.b,\n    a: '1',\n    // color: {\n    //   r: this.props.r,\n    //   g: this.props.g,\n    //   b: this.props.b,\n    //   a: '1',\n    // },\n  };\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker })\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false })\n  };\n\n  handleChange = (color) => {\n    this.setState({\n      r: color.rgb['r'],\n      g: color.rgb['g'],\n      b: color.rgb['b']\n    })\n    if(this.props.dataSource == 'landsat'){\n      this.props.handleLandsatImageColorChange(this.props.colorNumber, color.rgb)\n    }\n    else if(this.props.dataSource == 'modis'){\n      this.props.handleModiImageColorChange(this.props.colorNumber, color.rgb)\n    }\n  };\n\n  render() {\n\n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: `rgba(${ this.state.r }, ${ this.state.g }, ${ this.state.b }, ${ this.state.a })`,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    var color = {\n      r: this.state.r,\n      g: this.state.g,\n      b: this.state.b,\n      a: '1'\n    }\n\n    return (\n      <div>\n        <div style={ styles.swatch } onClick={ this.handleClick }>\n          <div style={ styles.color } />\n        </div>\n        { this.state.displayColorPicker ? <div style={ styles.popover }>\n          <div style={ styles.cover } onClick={ this.handleClose }/>\n          <SketchPicker color={ color } onChange={ this.handleChange } />\n        </div> : null }\n\n      </div>\n    )\n  }\n}\n\nexport default ColorPicker","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/LightningDataCollection.js",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\nimport FireIcon from '../images/realistic_fire.png';\n\n// const devUrl = '';\n// const prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nvar base_url = '';\nif(process.env.REACT_APP_ENVIRONMENT === 'prod'){\n    base_url = 'https://wildfire-ml-flask.herokuapp.com'\n}\n\nclass LightningDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            source: 'GOES',\n            lat: props.lat,\n            lon: props.lon,\n\n            gotGoesImage: false,\n            goesResult: 'failure',\n            goesUrlRand: null,\n            goesYear: '2021',\n            goesMonth: '04',\n            goesDay: '16',\n            goesHour: '16',\n            goesMinute: '00'\n\n        }\n\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.getGoesData = this.getGoesData.bind(this);\n        this.handleGoesDateChange = this.handleGoesDateChange.bind(this);\n        this.handleGoesTimeChange = this.handleGoesTimeChange.bind(this);\n    \n    }\n\n    componentDidMount(){\n        this.getGoesData()\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    getGoesData(){\n        this.setState({\n            gotGoesImage: false,\n        })\n\n        fetch(base_url + '/api/get_goes_16_lightning_data', {\n            method: 'POST',\n            body: JSON.stringify({\n                year: this.state.goesYear,\n                month: this.state.goesMonth,\n                day: this.state.goesDay,\n                hour: this.state.goesHour,\n                minute: this.state.goesMinute\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response['result'] == 'failure'){\n                this.setState({\n                    gotGoesImage: true,\n                    goesResult: 'failure'\n                })\n            }\n            else{\n                this.setState({\n                    gotGoesImage: true,\n                    goesResult: 'success',\n                    goesUrlRand: Math.floor(Math.random() * 1000000)\n                })\n            }\n        })\n    }\n\n    handleGoesDateChange(newDate){\n        var dateComponents = newDate.split('-')\n        this.setState({\n            goesYear: dateComponents[0],\n            goesMonth: dateComponents[1],\n            goesDay: dateComponents[2]\n        })\n    }\n\n    handleGoesTimeChange(newTime){\n        var timeComponents = newTime.split(':')\n        this.setState({\n            goesHour: timeComponents[0],\n            goesMinute: timeComponents[1]\n        })\n    }\n\n    render(){\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='lightning'\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    dataSource={this.state.source}\n                    handleGoesDateChange={this.handleGoesDateChange}\n                    handleGoesTimeChange={this.handleGoesTimeChange}\n                    getGoesLightningData={this.getGoesData}\n                />\n                <div>\n                    {\n                        this.state.source == 'GOES'?\n                        <div>\n                            GOES-16 image for: {this.state.goesDay}/{this.state.goesMonth}/{this.state.goesYear}, {this.state.goesHour}:{this.state.goesMinute}\n                            <br/>\n                            <br/>\n\n                            {\n                                this.state.gotGoesImage == false?\n                                <p>Loading...</p>\n                                :\n                                this.state.goesResult == 'failure'?\n                                <p style={{color:'red'}}>No image.</p>\n                                :\n                                <div>\n                                    <img src={'/api/'+this.state.goesUrlRand+'/goes_16_lightning.png'}width='600px' style={{border:'1px solid black'}} />\n                                </div>\n                            }\n\n                        </div>\n                        :\n                        <div>\n                        </div>\n                    }\n                    \n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default LightningDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/VegetationDataAnalysis.js",["346","347","348","349","350","351","352","353","354"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass VegetationDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Most common land cover': 'fields',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='vegetation'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.nrcs.usda.gov/Internet/FSE_MEDIA/stelprdb1083137.png' alt='landCover' width='60%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.researchgate.net/publication/335177876/figure/fig4/AS:792146537877504@1565873860020/Land-Cover-Graph-of-Mataram-in-2008-2013-and-2017.png' alt='landCover2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default VegetationDataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/PowerlinesDataCollection.js",["355","356","357"],"import React from 'react';\nimport FilterDiv from '../Components/FilterDiv';\nimport {Map, TileLayer, LayersControl, GeoJSON, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n// import powerlines from '../California_Electric_Transmission_Lines.json';\nimport counties from '../counties.json';\nimport powerlines_by_county from '../powerlines_by_county.json'\n\n// import powerlines from '../San_Diego.json'\n\n\nclass PowerlinesDataCollection extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            lat: props.lat,\n            lon: props.lon,\n            source:'HIFLD',\n            // kV_0_100: [],\n            // kV_101_250: [],\n            // kV_251_500: [],\n            current_powerline: null,\n            current_county: 'Alameda',\n            geojson_key_1: 1,\n            geojson_key_2: 2,\n            geojson_key_3: 3,\n            show_v_0_100: true,\n            show_v_101_250: true,\n            show_v_251_500: true,\n        }\n\n        this.handleSourceChange = this.handleSourceChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.separatePowerlinesByVoltages = this.separatePowerlinesByVoltages.bind(this);\n        this.onEachPowerline = this.onEachPowerline.bind(this);\n        this.onPowerlineClick = this.onPowerlineClick.bind(this);\n        this.handleCountyChange = this.handleCountyChange.bind(this);\n    }\n\n    componentDidMount(){\n        // this.separatePowerlinesByVoltages();\n    }\n\n    separatePowerlinesByVoltages(powerlines){\n        var all_powerlines = powerlines.features;\n        var v_0_100 = []\n        var v_101_250 = []\n        var v_251_500 = []\n        for(var i = 0; i < all_powerlines.length; i++){\n            var line = all_powerlines[i];\n            var voltage = line['properties']['VOLTAGE']\n            if(voltage <= 100){\n                v_0_100.push(line)\n            }\n            else if(voltage <= 250){\n                v_101_250.push(line)\n            }\n            else{\n                v_251_500.push(line)\n            }\n        }\n        // this.setState({\n        //     kV_0_100: v_0_100,\n        //     kV_101_250: v_101_250,\n        //     kV_251_500: v_251_500\n        // })\n        return [v_0_100, v_101_250, v_251_500]\n    }\n\n    handleSourceChange(newSource){\n        this.setState({\n            source: newSource\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    onPowerlineClick(event){\n        // console.log(event.target.feature.properties)\n        this.setState({\n            current_powerline: event.target.feature.properties,\n        })\n    }\n\n    onEachPowerline(line, layer){\n        layer.on({\n            click: this.onPowerlineClick,\n        })\n    }\n\n    handleCountyChange(newCounty){\n        this.setState({\n            current_county: newCounty,\n            geojson_key_1: Math.floor(Math.random() * 1000000),\n            geojson_key_2: Math.floor(Math.random() * 1000000),\n            geojson_key_3: Math.floor(Math.random() * 1000000)\n        })\n    }\n\n    render(){\n        // var cec_powerlines_webpage = 'https://cecgis-caenergy.opendata.arcgis.com/apps/CAEnergy::california-electric-infrastructure-app/explore'\n\n        // var hifld_powerlines_webpage = 'https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::electric-power-transmission-lines/explore?location=38.090095%2C-120.553450%2C7.54'\n\n        var styles = {\n            powerline: {\n                color: '#000000',\n                weight: 2,\n            },\n            v_0_100: {\n                color: '#00e038',\n                weight: 2,\n            },\n            v_101_250: {\n                color: '#e07b00',\n                weight: 2.5,\n            },\n            v_251_500: {\n                color: '#db0d5c',\n                weight: 3,\n            },\n            countyStyle: {\n                color: '#4a83ec',\n                weight: 1,\n                fillOpacity: 0,\n            }\n        }\n\n        var powerlines = powerlines_by_county[this.state.current_county]\n        var v_0_100 = null;\n        var v_101_250 = null;\n        var v_251_500 = null;\n        if(powerlines == null){\n            console.log(this.state.current_county)\n            powerlines = {}\n            powerlines['features'] = []\n        }\n        else{\n            var separated_powerlines = this.separatePowerlinesByVoltages(powerlines);\n            v_0_100 = separated_powerlines[0]\n            v_101_250 = separated_powerlines[1]\n            v_251_500 = separated_powerlines[2]\n        }\n        // console.log(v_0_100.length)\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='powerlines'\n                    handleSourceChange={this.handleSourceChange}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    changeCounty={this.handleCountyChange}\n                />\n\n                <div>\n                    {\n                        this.state.source === 'HIFLD'?\n                        // <iframe src={cec_powerlines_webpage} title='California Electric Infrastructure App' width='100%' height='600px'/>\n                        <div>\n                            <Map style={{height:'calc(100vh - 240px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name='Counties' checked>\n                                        <GeoJSON data={counties.features} style={styles.countyStyle} />\n                                    </LayersControl.Overlay>\n\n                                    {/* <LayersControl.Overlay name=\"Voltage: 0-100\" checked>\n                                        <GeoJSON data={v_0_100}  style={styles.v_0_100} onEachFeature={this.onEachPowerline} key={this.state.geojson_key} />\n                                    </LayersControl.Overlay>\n\n                                    <LayersControl.Overlay name=\"Voltage: 101-250\" >\n                                        <GeoJSON data={v_101_250}  style={styles.v_101_250} onEachFeature={this.onEachPowerline} key={this.state.geojson_key} />\n                                    </LayersControl.Overlay>\n\n                                    <LayersControl.Overlay name=\"Voltage: 251-500\" >\n                                        <GeoJSON data={v_251_500}  style={styles.v_251_500} onEachFeature={this.onEachPowerline} key={this.state.geojson_key} />\n                                    </LayersControl.Overlay>  */}\n\n                                    {\n                                        this.state.show_v_0_100?\n                                        <GeoJSON data={v_0_100} style={styles.v_0_100} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_1} />\n                                        :\n                                        <div></div>\n                                    }\n                                    {\n                                        this.state.show_v_101_250?\n                                        <GeoJSON data={v_101_250} style={styles.v_101_250} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_2} />\n                                        :\n                                        <div></div>\n                                    }\n                                    {\n                                        this.state.show_v_251_500?\n                                        <GeoJSON data={v_251_500} style={styles.v_251_500} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_3} />\n                                        :\n                                        <div></div>\n                                    }\n\n                                    {/* <GeoJSON data={v_0_100} style={styles.v_0_100} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_1} /> */}\n                                    {/* <GeoJSON data={v_101_250} style={styles.v_101_250} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_2} />\n                                    <GeoJSON data={v_251_500} style={styles.v_251_500} onEachFeature={this.onEachPowerline} key={this.state.geojson_key_3} /> */}\n\n                                    {/* <GeoJSON data={powerlines.features} style={styles.powerline} onEachFeature={this.onEachPowerline} key={this.state.geojson_key} /> */}\n\n                                </LayersControl>\n\n                            </Map>\n                            <div style={{width:'230px', float:'right', position:'relative'}}>\n                                <div style={{border:'1px solid grey', padding:'10px'}}>\n                                    Legend\n                                    <hr />\n                                    <div style={{background:'#00e038', borderRadius:'50%', width:'12px', height:'12px', display:'inline-block'}}></div>\n                                    &nbsp;: 0-100 Volts &nbsp;\n                                    <input type='checkbox' checked={this.state.show_v_0_100} onChange={(e) => {this.setState({show_v_0_100: !this.state.show_v_0_100})}}/>\n                                    <br/>\n\n                                    <div style={{background:'#e07b00', borderRadius:'50%', width:'12px', height:'12px', display:'inline-block'}}></div>\n                                    &nbsp;: 101-250 Volts &nbsp;\n                                    <input type='checkbox' checked={this.state.show_v_101_250} onChange={(e) => {this.setState({show_v_101_250: !this.state.show_v_101_250})}}/>\n                                    <br/>\n\n                                    <div style={{background:'#db0d5c', borderRadius:'50%', width:'12px', height:'12px', display:'inline-block'}}></div>\n                                    &nbsp;: 251-500 Volts &nbsp;\n                                    <input type='checkbox' checked={this.state.show_v_251_500} onChange={(e) => {this.setState({show_v_251_500: !this.state.show_v_251_500})}}/>\n                                </div>\n                                <br/>\n                                <br/>\n                                <div>\n                                    <h4>{this.state.current_county} County</h4>\n                                    Powerline Info.\n                                    <hr/>\n                                    {\n                                        this.state.current_powerline == null?\n                                        <div>Select a powerline for more info.</div>\n                                        :\n                                        <div>\n                                            <strong>ID: </strong>{this.state.current_powerline['ID']}\n                                            <br/>\n                                            <strong>Owner: </strong>{this.state.current_powerline['OWNER']}\n                                            <br/>\n                                            <strong>Voltage: </strong>{this.state.current_powerline['VOLTAGE']}\n                                            <br/>\n                                            <strong>Status: </strong>{this.state.current_powerline['STATUS']}\n                                            <br/>\n                                        </div>\n                                    } \n                                </div>\n                            </div>\n                        </div>\n                        :\n                        <div></div>\n                    }\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default PowerlinesDataCollection;",{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","severity":1,"message":"363","line":60,"column":13,"nodeType":"364","messageId":"365","endLine":60,"endColumn":21},{"ruleId":"362","severity":1,"message":"366","line":12,"column":8,"nodeType":"364","messageId":"365","endLine":12,"endColumn":16},{"ruleId":"367","severity":1,"message":"368","line":90,"column":43,"nodeType":"369","messageId":"370","endLine":90,"endColumn":45},{"ruleId":"371","severity":1,"message":"372","line":92,"column":24,"nodeType":"373","messageId":"374","endLine":92,"endColumn":26},{"ruleId":"371","severity":1,"message":"372","line":108,"column":31,"nodeType":"373","messageId":"374","endLine":108,"endColumn":33},{"ruleId":"371","severity":1,"message":"375","line":166,"column":27,"nodeType":"373","messageId":"374","endLine":166,"endColumn":29},{"ruleId":"376","severity":1,"message":"377","line":191,"column":9,"nodeType":"378","messageId":"379","endLine":196,"endColumn":10},{"ruleId":"371","severity":1,"message":"372","line":192,"column":37,"nodeType":"373","messageId":"374","endLine":192,"endColumn":39},{"ruleId":"371","severity":1,"message":"372","line":243,"column":48,"nodeType":"373","messageId":"374","endLine":243,"endColumn":50},{"ruleId":"362","severity":1,"message":"380","line":2,"column":49,"nodeType":"364","messageId":"365","endLine":2,"endColumn":61},{"ruleId":"362","severity":1,"message":"363","line":56,"column":13,"nodeType":"364","messageId":"365","endLine":56,"endColumn":21},{"ruleId":"362","severity":1,"message":"381","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":23},{"ruleId":"362","severity":1,"message":"382","line":7,"column":8,"nodeType":"364","messageId":"365","endLine":7,"endColumn":22},{"ruleId":"362","severity":1,"message":"383","line":8,"column":10,"nodeType":"364","messageId":"365","endLine":8,"endColumn":25},{"ruleId":"371","severity":1,"message":"372","line":282,"column":34,"nodeType":"373","messageId":"374","endLine":282,"endColumn":36},{"ruleId":"384","severity":1,"message":"385","line":376,"column":21,"nodeType":"386","endLine":376,"endColumn":71},{"ruleId":"384","severity":1,"message":"385","line":390,"column":21,"nodeType":"386","endLine":390,"endColumn":120},{"ruleId":"362","severity":1,"message":"387","line":5,"column":7,"nodeType":"364","messageId":"365","endLine":5,"endColumn":13},{"ruleId":"362","severity":1,"message":"388","line":6,"column":7,"nodeType":"364","messageId":"365","endLine":6,"endColumn":14},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"387","line":13,"column":7,"nodeType":"364","messageId":"365","endLine":13,"endColumn":13},{"ruleId":"371","severity":1,"message":"372","line":159,"column":32,"nodeType":"373","messageId":"374","endLine":159,"endColumn":34},{"ruleId":"371","severity":1,"message":"372","line":162,"column":37,"nodeType":"373","messageId":"374","endLine":162,"endColumn":39},{"ruleId":"371","severity":1,"message":"372","line":198,"column":36,"nodeType":"373","messageId":"374","endLine":198,"endColumn":38},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"394","line":12,"column":8,"nodeType":"364","messageId":"365","endLine":12,"endColumn":25},{"ruleId":"362","severity":1,"message":"387","line":14,"column":7,"nodeType":"364","messageId":"365","endLine":14,"endColumn":13},{"ruleId":"371","severity":1,"message":"372","line":170,"column":35,"nodeType":"373","messageId":"374","endLine":170,"endColumn":37},{"ruleId":"362","severity":1,"message":"395","line":197,"column":13,"nodeType":"364","messageId":"365","endLine":197,"endColumn":16},{"ruleId":"362","severity":1,"message":"396","line":198,"column":13,"nodeType":"364","messageId":"365","endLine":198,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":266,"column":36,"nodeType":"373","messageId":"374","endLine":266,"endColumn":38},{"ruleId":"384","severity":1,"message":"385","line":410,"column":33,"nodeType":"386","endLine":410,"endColumn":132},{"ruleId":"362","severity":1,"message":"397","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":22},{"ruleId":"371","severity":1,"message":"372","line":196,"column":32,"nodeType":"373","messageId":"374","endLine":196,"endColumn":34},{"ruleId":"371","severity":1,"message":"372","line":199,"column":37,"nodeType":"373","messageId":"374","endLine":199,"endColumn":39},{"ruleId":"371","severity":1,"message":"372","line":228,"column":36,"nodeType":"373","messageId":"374","endLine":228,"endColumn":38},{"ruleId":"371","severity":1,"message":"372","line":321,"column":35,"nodeType":"373","messageId":"374","endLine":321,"endColumn":37},{"ruleId":"371","severity":1,"message":"372","line":392,"column":46,"nodeType":"373","messageId":"374","endLine":392,"endColumn":48},{"ruleId":"371","severity":1,"message":"372","line":426,"column":55,"nodeType":"373","messageId":"374","endLine":426,"endColumn":57},{"ruleId":"384","severity":1,"message":"385","line":428,"column":41,"nodeType":"386","endLine":428,"endColumn":139},{"ruleId":"371","severity":1,"message":"372","line":436,"column":55,"nodeType":"373","messageId":"374","endLine":436,"endColumn":57},{"ruleId":"371","severity":1,"message":"372","line":442,"column":69,"nodeType":"373","messageId":"374","endLine":442,"endColumn":71},{"ruleId":"371","severity":1,"message":"372","line":448,"column":67,"nodeType":"373","messageId":"374","endLine":448,"endColumn":69},{"ruleId":"384","severity":1,"message":"385","line":452,"column":49,"nodeType":"386","endLine":452,"endColumn":119},{"ruleId":"371","severity":1,"message":"372","line":163,"column":30,"nodeType":"373","messageId":"374","endLine":163,"endColumn":32},{"ruleId":"371","severity":1,"message":"372","line":166,"column":35,"nodeType":"373","messageId":"374","endLine":166,"endColumn":37},{"ruleId":"371","severity":1,"message":"372","line":198,"column":29,"nodeType":"373","messageId":"374","endLine":198,"endColumn":31},{"ruleId":"398","severity":1,"message":"399","line":207,"column":21,"nodeType":"364","messageId":"400","endLine":207,"endColumn":22},{"ruleId":"371","severity":1,"message":"372","line":297,"column":36,"nodeType":"373","messageId":"374","endLine":297,"endColumn":38},{"ruleId":"362","severity":1,"message":"401","line":455,"column":26,"nodeType":"364","messageId":"365","endLine":455,"endColumn":31},{"ruleId":"362","severity":1,"message":"402","line":497,"column":13,"nodeType":"364","messageId":"365","endLine":497,"endColumn":21},{"ruleId":"371","severity":1,"message":"372","line":521,"column":51,"nodeType":"373","messageId":"374","endLine":521,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":529,"column":72,"nodeType":"373","messageId":"374","endLine":529,"endColumn":74},{"ruleId":"403","severity":1,"message":"404","line":531,"column":125,"nodeType":"405","messageId":"374","endLine":531,"endColumn":131},{"ruleId":"371","severity":1,"message":"372","line":667,"column":51,"nodeType":"373","messageId":"374","endLine":667,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":679,"column":72,"nodeType":"373","messageId":"374","endLine":679,"endColumn":74},{"ruleId":"362","severity":1,"message":"397","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":22},{"ruleId":"362","severity":1,"message":"395","line":120,"column":13,"nodeType":"364","messageId":"365","endLine":120,"endColumn":16},{"ruleId":"362","severity":1,"message":"396","line":121,"column":13,"nodeType":"364","messageId":"365","endLine":121,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":182,"column":36,"nodeType":"373","messageId":"374","endLine":182,"endColumn":38},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"406","line":5,"column":9,"nodeType":"364","messageId":"365","endLine":5,"endColumn":12},{"ruleId":"362","severity":1,"message":"407","line":5,"column":14,"nodeType":"364","messageId":"365","endLine":5,"endColumn":23},{"ruleId":"362","severity":1,"message":"408","line":5,"column":25,"nodeType":"364","messageId":"365","endLine":5,"endColumn":38},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"409","line":5,"column":55,"nodeType":"364","messageId":"365","endLine":5,"endColumn":62},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"410","line":11,"column":8,"nodeType":"364","messageId":"365","endLine":11,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":113,"column":43,"nodeType":"373","messageId":"374","endLine":113,"endColumn":45},{"ruleId":"362","severity":1,"message":"411","line":148,"column":13,"nodeType":"364","messageId":"365","endLine":148,"endColumn":24},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"406","line":5,"column":9,"nodeType":"364","messageId":"365","endLine":5,"endColumn":12},{"ruleId":"362","severity":1,"message":"407","line":5,"column":14,"nodeType":"364","messageId":"365","endLine":5,"endColumn":23},{"ruleId":"362","severity":1,"message":"408","line":5,"column":25,"nodeType":"364","messageId":"365","endLine":5,"endColumn":38},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"409","line":5,"column":55,"nodeType":"364","messageId":"365","endLine":5,"endColumn":62},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"410","line":11,"column":8,"nodeType":"364","messageId":"365","endLine":11,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":163,"column":32,"nodeType":"373","messageId":"374","endLine":163,"endColumn":34},{"ruleId":"371","severity":1,"message":"372","line":166,"column":37,"nodeType":"373","messageId":"374","endLine":166,"endColumn":39},{"ruleId":"371","severity":1,"message":"372","line":202,"column":43,"nodeType":"373","messageId":"374","endLine":202,"endColumn":45},{"ruleId":"362","severity":1,"message":"411","line":237,"column":13,"nodeType":"364","messageId":"365","endLine":237,"endColumn":24},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"406","line":5,"column":9,"nodeType":"364","messageId":"365","endLine":5,"endColumn":12},{"ruleId":"362","severity":1,"message":"407","line":5,"column":14,"nodeType":"364","messageId":"365","endLine":5,"endColumn":23},{"ruleId":"362","severity":1,"message":"408","line":5,"column":25,"nodeType":"364","messageId":"365","endLine":5,"endColumn":38},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"409","line":5,"column":55,"nodeType":"364","messageId":"365","endLine":5,"endColumn":62},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"410","line":11,"column":8,"nodeType":"364","messageId":"365","endLine":11,"endColumn":16},{"ruleId":"362","severity":1,"message":"395","line":132,"column":13,"nodeType":"364","messageId":"365","endLine":132,"endColumn":16},{"ruleId":"362","severity":1,"message":"396","line":133,"column":13,"nodeType":"364","messageId":"365","endLine":133,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":204,"column":43,"nodeType":"373","messageId":"374","endLine":204,"endColumn":45},{"ruleId":"362","severity":1,"message":"411","line":239,"column":13,"nodeType":"364","messageId":"365","endLine":239,"endColumn":24},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"387","line":13,"column":7,"nodeType":"364","messageId":"365","endLine":13,"endColumn":13},{"ruleId":"371","severity":1,"message":"372","line":194,"column":36,"nodeType":"373","messageId":"374","endLine":194,"endColumn":38},{"ruleId":"362","severity":1,"message":"397","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":22},{"ruleId":"362","severity":1,"message":"412","line":170,"column":13,"nodeType":"364","messageId":"365","endLine":170,"endColumn":21},{"ruleId":"371","severity":1,"message":"372","line":217,"column":36,"nodeType":"373","messageId":"374","endLine":217,"endColumn":38},{"ruleId":"371","severity":1,"message":"372","line":272,"column":24,"nodeType":"373","messageId":"374","endLine":272,"endColumn":26},{"ruleId":"371","severity":1,"message":"372","line":280,"column":23,"nodeType":"373","messageId":"374","endLine":280,"endColumn":25},{"ruleId":"371","severity":1,"message":"372","line":305,"column":35,"nodeType":"373","messageId":"374","endLine":305,"endColumn":37},{"ruleId":"371","severity":1,"message":"372","line":398,"column":35,"nodeType":"373","messageId":"374","endLine":398,"endColumn":37},{"ruleId":"371","severity":1,"message":"372","line":591,"column":51,"nodeType":"373","messageId":"374","endLine":591,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":598,"column":66,"nodeType":"373","messageId":"374","endLine":598,"endColumn":68},{"ruleId":"371","severity":1,"message":"372","line":605,"column":72,"nodeType":"373","messageId":"374","endLine":605,"endColumn":74},{"ruleId":"371","severity":1,"message":"372","line":643,"column":51,"nodeType":"373","messageId":"374","endLine":643,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":650,"column":64,"nodeType":"373","messageId":"374","endLine":650,"endColumn":66},{"ruleId":"371","severity":1,"message":"372","line":657,"column":66,"nodeType":"373","messageId":"374","endLine":657,"endColumn":68},{"ruleId":"371","severity":1,"message":"372","line":717,"column":51,"nodeType":"373","messageId":"374","endLine":717,"endColumn":53},{"ruleId":"384","severity":1,"message":"385","line":722,"column":37,"nodeType":"386","endLine":722,"endColumn":135},{"ruleId":"371","severity":1,"message":"372","line":725,"column":51,"nodeType":"373","messageId":"374","endLine":725,"endColumn":53},{"ruleId":"384","severity":1,"message":"385","line":730,"column":37,"nodeType":"386","endLine":730,"endColumn":139},{"ruleId":"371","severity":1,"message":"372","line":7,"column":20,"nodeType":"373","messageId":"374","endLine":7,"endColumn":22},{"ruleId":"371","severity":1,"message":"372","line":15,"column":43,"nodeType":"373","messageId":"374","endLine":15,"endColumn":45},{"ruleId":"362","severity":1,"message":"397","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":22},{"ruleId":"403","severity":1,"message":"413","line":25,"column":69,"nodeType":"405","messageId":"374","endLine":25,"endColumn":76},{"ruleId":"414","severity":1,"message":"415","line":94,"column":5,"nodeType":"416","messageId":"374","endLine":96,"endColumn":6},{"ruleId":"403","severity":1,"message":"413","line":126,"column":69,"nodeType":"405","messageId":"374","endLine":126,"endColumn":76},{"ruleId":"371","severity":1,"message":"375","line":151,"column":89,"nodeType":"373","messageId":"374","endLine":151,"endColumn":91},{"ruleId":"371","severity":1,"message":"372","line":222,"column":49,"nodeType":"373","messageId":"374","endLine":222,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":222,"column":90,"nodeType":"373","messageId":"374","endLine":222,"endColumn":92},{"ruleId":"371","severity":1,"message":"372","line":237,"column":51,"nodeType":"373","messageId":"374","endLine":237,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":237,"column":84,"nodeType":"373","messageId":"374","endLine":237,"endColumn":86},{"ruleId":"371","severity":1,"message":"372","line":252,"column":51,"nodeType":"373","messageId":"374","endLine":252,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":257,"column":51,"nodeType":"373","messageId":"374","endLine":257,"endColumn":53},{"ruleId":"371","severity":1,"message":"372","line":276,"column":49,"nodeType":"373","messageId":"374","endLine":276,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":276,"column":90,"nodeType":"373","messageId":"374","endLine":276,"endColumn":92},{"ruleId":"371","severity":1,"message":"372","line":294,"column":49,"nodeType":"373","messageId":"374","endLine":294,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":294,"column":90,"nodeType":"373","messageId":"374","endLine":294,"endColumn":92},{"ruleId":"371","severity":1,"message":"372","line":314,"column":49,"nodeType":"373","messageId":"374","endLine":314,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":314,"column":89,"nodeType":"373","messageId":"374","endLine":314,"endColumn":91},{"ruleId":"371","severity":1,"message":"372","line":364,"column":49,"nodeType":"373","messageId":"374","endLine":364,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":364,"column":89,"nodeType":"373","messageId":"374","endLine":364,"endColumn":91},{"ruleId":"371","severity":1,"message":"372","line":378,"column":49,"nodeType":"373","messageId":"374","endLine":378,"endColumn":51},{"ruleId":"371","severity":1,"message":"372","line":402,"column":47,"nodeType":"373","messageId":"374","endLine":402,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":402,"column":82,"nodeType":"373","messageId":"374","endLine":402,"endColumn":84},{"ruleId":"371","severity":1,"message":"372","line":402,"column":118,"nodeType":"373","messageId":"374","endLine":402,"endColumn":120},{"ruleId":"371","severity":1,"message":"372","line":405,"column":47,"nodeType":"373","messageId":"374","endLine":405,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":405,"column":80,"nodeType":"373","messageId":"374","endLine":405,"endColumn":82},{"ruleId":"371","severity":1,"message":"372","line":408,"column":47,"nodeType":"373","messageId":"374","endLine":408,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":408,"column":83,"nodeType":"373","messageId":"374","endLine":408,"endColumn":85},{"ruleId":"371","severity":1,"message":"372","line":411,"column":47,"nodeType":"373","messageId":"374","endLine":411,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":411,"column":81,"nodeType":"373","messageId":"374","endLine":411,"endColumn":83},{"ruleId":"371","severity":1,"message":"372","line":414,"column":47,"nodeType":"373","messageId":"374","endLine":414,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":414,"column":80,"nodeType":"373","messageId":"374","endLine":414,"endColumn":82},{"ruleId":"371","severity":1,"message":"372","line":417,"column":47,"nodeType":"373","messageId":"374","endLine":417,"endColumn":49},{"ruleId":"371","severity":1,"message":"372","line":417,"column":80,"nodeType":"373","messageId":"374","endLine":417,"endColumn":82},{"ruleId":"371","severity":1,"message":"372","line":420,"column":45,"nodeType":"373","messageId":"374","endLine":420,"endColumn":47},{"ruleId":"417","severity":1,"message":"418","line":1,"column":1,"nodeType":"419","messageId":"420","endLine":1,"endColumn":13,"fix":"421"},{"ruleId":"371","severity":1,"message":"372","line":36,"column":30,"nodeType":"373","messageId":"374","endLine":36,"endColumn":32},{"ruleId":"371","severity":1,"message":"372","line":39,"column":35,"nodeType":"373","messageId":"374","endLine":39,"endColumn":37},{"ruleId":"362","severity":1,"message":"397","line":2,"column":8,"nodeType":"364","messageId":"365","endLine":2,"endColumn":22},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"406","line":4,"column":9,"nodeType":"364","messageId":"365","endLine":4,"endColumn":12},{"ruleId":"362","severity":1,"message":"407","line":4,"column":14,"nodeType":"364","messageId":"365","endLine":4,"endColumn":23},{"ruleId":"362","severity":1,"message":"408","line":4,"column":25,"nodeType":"364","messageId":"365","endLine":4,"endColumn":38},{"ruleId":"362","severity":1,"message":"390","line":4,"column":40,"nodeType":"364","messageId":"365","endLine":4,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":4,"column":48,"nodeType":"364","messageId":"365","endLine":4,"endColumn":53},{"ruleId":"362","severity":1,"message":"422","line":6,"column":8,"nodeType":"364","messageId":"365","endLine":6,"endColumn":9},{"ruleId":"362","severity":1,"message":"392","line":7,"column":8,"nodeType":"364","messageId":"365","endLine":7,"endColumn":26},{"ruleId":"362","severity":1,"message":"366","line":10,"column":8,"nodeType":"364","messageId":"365","endLine":10,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":54,"column":36,"nodeType":"373","messageId":"374","endLine":54,"endColumn":38},{"ruleId":"371","severity":1,"message":"372","line":79,"column":35,"nodeType":"373","messageId":"374","endLine":79,"endColumn":37},{"ruleId":"371","severity":1,"message":"372","line":127,"column":43,"nodeType":"373","messageId":"374","endLine":127,"endColumn":45},{"ruleId":"371","severity":1,"message":"372","line":134,"column":57,"nodeType":"373","messageId":"374","endLine":134,"endColumn":59},{"ruleId":"371","severity":1,"message":"372","line":137,"column":55,"nodeType":"373","messageId":"374","endLine":137,"endColumn":57},{"ruleId":"384","severity":1,"message":"385","line":141,"column":37,"nodeType":"386","endLine":141,"endColumn":154},{"ruleId":"362","severity":1,"message":"389","line":3,"column":10,"nodeType":"364","messageId":"365","endLine":3,"endColumn":22},{"ruleId":"362","severity":1,"message":"390","line":5,"column":40,"nodeType":"364","messageId":"365","endLine":5,"endColumn":46},{"ruleId":"362","severity":1,"message":"391","line":5,"column":48,"nodeType":"364","messageId":"365","endLine":5,"endColumn":53},{"ruleId":"362","severity":1,"message":"392","line":8,"column":8,"nodeType":"364","messageId":"365","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"393","line":9,"column":8,"nodeType":"364","messageId":"365","endLine":9,"endColumn":12},{"ruleId":"362","severity":1,"message":"387","line":13,"column":7,"nodeType":"364","messageId":"365","endLine":13,"endColumn":13},{"ruleId":"362","severity":1,"message":"395","line":125,"column":13,"nodeType":"364","messageId":"365","endLine":125,"endColumn":16},{"ruleId":"362","severity":1,"message":"396","line":126,"column":13,"nodeType":"364","messageId":"365","endLine":126,"endColumn":16},{"ruleId":"371","severity":1,"message":"372","line":194,"column":36,"nodeType":"373","messageId":"374","endLine":194,"endColumn":38},{"ruleId":"362","severity":1,"message":"391","line":3,"column":49,"nodeType":"364","messageId":"365","endLine":3,"endColumn":54},{"ruleId":"362","severity":1,"message":"422","line":5,"column":8,"nodeType":"364","messageId":"365","endLine":5,"endColumn":9},{"ruleId":"371","severity":1,"message":"372","line":80,"column":36,"nodeType":"373","messageId":"374","endLine":80,"endColumn":38},"no-native-reassign",["423"],"no-negated-in-lhs",["424"],"no-unused-vars","'position' is assigned a value but never used.","Identifier","unusedVar","'FireIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'FeatureGroup' is defined but never used.","'DetectionDetail' is defined but never used.","'DetectionImage' is defined but never used.","'ControlledLayer' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'devUrl' is assigned a value but never used.","'prodUrl' is assigned a value but never used.","'MDBDataTable' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'MarkerClusterGroup' is defined but never used.","'Plot' is defined but never used.","'RealisticFireIcon' is defined but never used.","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'CountySelector' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'value' is assigned a value but never used.","'wrcc_url' is assigned a value but never used.","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","'Map' is defined but never used.","'TileLayer' is defined but never used.","'LayersControl' is defined but never used.","'GeoJSON' is defined but never used.","'counties' is defined but never used.","'countyStyle' is assigned a value but never used.","'monthAgo' is assigned a value but never used.","Duplicate key 'padding'.","no-dupe-class-members","Duplicate name 'changeModisDate'.","MethodDefinition","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"425","text":"426"},"'L' is defined but never used.","no-global-assign","no-unsafe-negation",[0,12],""]