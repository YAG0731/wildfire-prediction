[{"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js":"1","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js":"2","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js":"3","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js":"4","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js":"5","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js":"6","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js":"7","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js":"8","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ImageDetection.js":"9","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js":"10","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js":"11","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/LandCoverDataCollection.js":"12","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js":"13","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js":"14","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js":"15","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js":"16","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js":"17","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/LandCoverDataAnalysis.js":"18","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js":"19","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js":"20","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js":"21","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js":"22","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js":"23","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js":"24","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js":"25","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js":"26","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js":"27","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js":"28","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js":"29","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js":"30","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js":"31"},{"size":507,"mtime":1611785046824,"results":"32","hashOfConfig":"33"},{"size":5086,"mtime":1611785046824,"results":"34","hashOfConfig":"33"},{"size":1187,"mtime":1611785776562,"results":"35","hashOfConfig":"33"},{"size":6453,"mtime":1611785046808,"results":"36","hashOfConfig":"33"},{"size":6480,"mtime":1611785046806,"results":"37","hashOfConfig":"33"},{"size":916,"mtime":1611785046818,"results":"38","hashOfConfig":"33"},{"size":8432,"mtime":1611785046819,"results":"39","hashOfConfig":"33"},{"size":5786,"mtime":1611785046817,"results":"40","hashOfConfig":"33"},{"size":3523,"mtime":1611785791914,"results":"41","hashOfConfig":"33"},{"size":12182,"mtime":1611785046819,"results":"42","hashOfConfig":"33"},{"size":13332,"mtime":1611785046808,"results":"43","hashOfConfig":"33"},{"size":9397,"mtime":1611785046808,"results":"44","hashOfConfig":"33"},{"size":35910,"mtime":1615405959237,"results":"45","hashOfConfig":"33"},{"size":12368,"mtime":1611785507443,"results":"46","hashOfConfig":"33"},{"size":4781,"mtime":1611785401088,"results":"47","hashOfConfig":"33"},{"size":13678,"mtime":1611785485440,"results":"48","hashOfConfig":"33"},{"size":13806,"mtime":1611785046807,"results":"49","hashOfConfig":"33"},{"size":13871,"mtime":1611785469360,"results":"50","hashOfConfig":"33"},{"size":8664,"mtime":1611785046818,"results":"51","hashOfConfig":"33"},{"size":13774,"mtime":1611785452254,"results":"52","hashOfConfig":"33"},{"size":14576,"mtime":1611785748164,"results":"53","hashOfConfig":"33"},{"size":10911,"mtime":1611785046818,"results":"54","hashOfConfig":"33"},{"size":3884,"mtime":1611785046805,"results":"55","hashOfConfig":"33"},{"size":10094,"mtime":1611785046806,"results":"56","hashOfConfig":"33"},{"size":7933,"mtime":1614295996452,"results":"57","hashOfConfig":"33"},{"size":19755,"mtime":1614824491728,"results":"58","hashOfConfig":"33"},{"size":10714,"mtime":1613519047496,"results":"59","hashOfConfig":"33"},{"size":609,"mtime":1611785616345,"results":"60","hashOfConfig":"33"},{"size":2028,"mtime":1611785576691,"results":"61","hashOfConfig":"33"},{"size":488,"mtime":1611785597669,"results":"62","hashOfConfig":"33"},{"size":1501,"mtime":1614819787812,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"wk1ust",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"66"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"66"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/index.js",[],["147","148"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/serviceWorker.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/App.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollection.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysis.js",["149"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\nimport WeatherDataAnalysis from './DataAnalysisComponents/WeatherDataAnalysis';\nimport FireHistoryDataAnalysis from './DataAnalysisComponents/FireHistoryDataAnalysis';\nimport LandCoverDataAnalysis from './DataAnalysisComponents/LandCoverDataAnalysis';\nimport SatelliteDataAnalysis from './DataAnalysisComponents/SatelliteDataAnalysis';\n\nclass DataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Weather',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n            landCoverComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <WeatherDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireHistoryDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            landCoverComponent: <LandCoverDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <SatelliteDataAnalysis lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '20%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '20%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Data Analysis</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Weather'?\n                                    <button style={styles.buttonGroupButtonActive}>Weather</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Weather</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire History'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire History</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire History</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Land Cover'?\n                                    <button style={styles.buttonGroupButtonActive}>Land Cover</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Land Cover</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Satellite'?\n                                    <button style={styles.buttonGroupButtonActive}>Satellite</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Satellite</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Weather'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Satellite'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire History'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Land Cover'?\n                                this.state.landCoverComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Preprocessing.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Risk.js",["150"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport MyNavbar from './Components/MyNavbar';\n\nclass Risk extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n        }\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n    }\n\n    onCountyClick(event){\n        console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // console.log(county.properties.name);\n\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        const fireIcon = require('leaflet');\n        delete fireIcon.Icon.Default.prototype._getIconUrl;\n        fireIcon.Icon.Default.mergeOptions({\n            iconRetinaUrl: require(\"./images/fire.png\"),\n            iconUrl: require(\"./images/fire.png\"),\n            shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        });\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Risk Prediction</h1>\n                    </div>\n\n                    <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                        <div style={{width:\"100%\"}}>\n\n                            <Map style={{height:'calc(100vh - 72px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={position}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\">\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                    {/* <LayersControl.Overlay name=\"Show Markers\">\n                                        <FeatureGroup>\n                                            {\n                                                randomLocations.map(location => (\n                                                    <Marker position={location}>\n                                                        <Popup>\n                                                            <h6>\n                                                            Latitude: {location[0]}\n                                                            <br/>\n                                                            Longitude: {location[1]}\n                                                            </h6>\n                                                        </Popup>\n                                                    </Marker>\n                                                ))\n                                            }\n                                        </FeatureGroup>\n                                    </LayersControl.Overlay> */}\n                                </LayersControl>\n\n                            </Map>\n\n                            <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                <div style={{marginTop:'16px'}}>\n                                    <form onSubmit={this.handleCitySearch}>\n                                        <div className=\"col-lg-10 mb-3\">\n                                            <div className=\"input-group\" style={{width:'226px'}}>\n                                                <input type=\"text\" className=\"form-control rounded-0\" id=\"citySearchInput\" placeholder=\"City Name\" required />\n                                                <div className=\"input-group-prepend\">\n                                                    <input type=\"submit\" value=\"Search\" className=\"btn btn-primary btn-sm rounded-0\" id=\"inputGroupPrepend2\" style={{backgroundColor:'#1580fb'}}/>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                                <hr style={{margin:'16px'}}/>\n\n                                <div style={{height:'100%', overflow:'auto', margin:'16px'}}>\n                                    <h4>Select date:</h4>\n                                    <div >\n                                        <input type='date' className='input-group' style={{padding:'10px'}}/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Risk;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluation.js",["151"],"import React from 'react';\nimport MyNavbar from './Components/MyNavbar';\n\n//import FireDetectionModEval  from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireDetectionModEval from './ModelEvaluationComponents/FireDetectionModEval';\nimport FireRiskPredictionModEval from './ModelEvaluationComponents/FireRiskPredictionModEval';\nimport FireProgressionModEval from './ModelEvaluationComponents/FireProgressionModEval';\n\n\nclass ModelEvaluation extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            lat: 37.334665328,\n            lon: -121.875329832,\n            currentMode: 'Fire Detection',\n            weatherComponent: null,\n            satelliteComponent: null,\n            fireHistoryComponent: null,\n        }\n\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n    }\n\n    componentDidMount(){\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n        else{\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        this.setState({\n            weatherComponent: <FireDetectionModEval lat={this.state.lat} lon={this.state.lon} />,\n            fireHistoryComponent: <FireRiskPredictionModEval lat={this.state.lat} lon={this.state.lon} />,\n            satelliteComponent: <FireProgressionModEval lat={this.state.lat} lon={this.state.lon} />\n        })\n    }\n\n    getCoordinates(position){\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    handleModeChange(event){\n        this.setState({\n            currentMode: event.target.innerHTML\n        });\n    }\n\n    render(){\n        var position = [37.334665328, -121.875329832];\n\n        var styles = {\n            buttonGroupButton: {\n                width: '30%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none',\n                height:'46px'\n            },\n            buttonGroupButtonActive: {\n                width: '30%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none',\n                height:'46px'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Model Evaluation</h1>\n                    </div>\n\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\n                                {\n                                    this.state.currentMode === 'Fire Detection'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Detection</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Detection</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Risk Prediction'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Risk Prediction</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Risk Prediction</button>\n                                }\n                                {\n                                    this.state.currentMode === 'Fire Progression'?\n                                    <button style={styles.buttonGroupButtonActive}>Fire Progression</button>\n                                    :\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Progression</button>\n                                }\n                            </div>\n\n                            {\n                                this.state.currentMode === 'Fire Detection'?\n                                this.state.weatherComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Progression'?\n                                this.state.satelliteComponent\n                                :\n                                <div></div>\n                            }\n                            {\n                                this.state.currentMode === 'Fire Risk Prediction'?\n                                this.state.fireHistoryComponent\n                                :\n                                <div></div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default ModelEvaluation;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ImageDetection.js",["152","153","154","155","156"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Progression.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/SatelliteDataCollection.js",["157","158","159","160","161"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass SatelliteDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentMarker: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.handleMarkerChange = this.handleMarkerChange.bind(this);\n\n    }\n\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USGS'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleMarkerChange(newMarker){\n        this.setState({\n            currentMarker: newMarker,\n        })\n    }\n\n    render(){\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv \n                    pageType='dataCollection'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                />\n                <div>\n                    <div>\n                        {\n                            this.state.currentView === 'Table View'?\n                            <div>\n                                {\n                                    !this.state.data?\n                                    <div>Getting data...</div>\n                                    :\n                                    <MDBDataTable responsive\n                                    striped\n                                    bordered\n                                    data={this.state.data}\n                                    />\n                                }\n                            </div>\n                            :\n                            <div>\n                                <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                    </LayersControl>\n\n                                    <MarkerClusterGroup>\n                                        {\n                                            this.state.data == null?\n                                            <div>Waiting for data to load...</div>\n                                            :\n                                            this.state.data.rows.map(\n                                                marker => {\n                                                    return (\n                                                        <Marker position={[marker['latitude'], marker['longitude']]} key={marker['entityId']} onclick={() => this.handleMarkerChange(marker)}>\n                                                            <Popup>\n                                                                <p>Object ID: {marker['entityId']}</p>\n                                                                <p>Lat: {marker['latitude']}</p>\n                                                                <p>Lon: {marker['longitude']}</p>\n                                                            </Popup>\n                                                        </Marker>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </MarkerClusterGroup>\n                                </Map>\n                                <div style={{float:'right', padding:'6px', width:'230px'}}>\n                                    {\n                                        this.state.currentMarker == null?\n                                        <h3>Select a fire for more info.</h3>\n                                        :\n                                        <div>\n                                            <h3>Fire Information</h3>\n                                            <hr/>\n                                            {\n                                                this.state.features.map(\n                                                    feature => {\n                                                        return (\n                                                        <div>\n                                                            <strong>{feature}: </strong>{this.state.currentMarker[feature]}\n                                                            <br/>\n                                                            </div>\n                                                        )\n                                                    }\n                                                )\n                                            }\n\n                                        </div>\n                                    }\n                                </div>\n                                \n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default SatelliteDataCollection;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/LandCoverDataCollection.js",["162","163","164","165"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv'\n\nclass LandCoverDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentMarker: null,\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USGS'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    render(){\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='landCover'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                />\n                <div>\n                    {\n                        this.state.currentView === 'Table View'?\n                        <div>\n                            {\n                                !this.state.data?\n                                <div>API not implemented yet</div>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                </LayersControl>\n\n                                <MarkerClusterGroup>\n                                    {\n                                        this.state.data == null?\n                                        <div>Waiting for data to load...</div>\n                                        :\n                                        <div></div>\n                                    }\n                                </MarkerClusterGroup>\n                            </Map>\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.currentMarker == null?\n                                <h3>Select a marker for more info.</h3>\n                                :\n                                <div>\n                                    <h3>Marker Information</h3>\n                                    <hr/>\n                                    {\n                                        this.state.features.map(\n                                            feature => {\n                                                return (\n                                                <div>\n                                                    <strong>{feature}: </strong>{this.state.currentMarker[feature]}\n                                                    <br/>\n                                                    </div>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                            }\n                            </div>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LandCoverDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/WeatherDataCollection.js",["166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataCollectionComponents/FireHistoryDataCollection.js",["180","181","182","183","184"],"import React from 'react';\nimport CountySelector from '../Components/CountySelector';\nimport { MDBDataTable } from 'mdbreact';\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport FilterDiv from '../Components/FilterDiv';\n\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireHistoryDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            lat: props.lat,\n            lon: props.lon,\n            currentCounty: 'Alameda',\n            data: null,\n            currentView: 'Table View',\n            currentFire: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n        }\n\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    handleFireChange(newFire){\n        this.setState({\n            currentFire: newFire,\n        })\n    }\n\n    render(){\n\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('../images/fire.png'),\n            iconUrl: require('../images/fire.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n        });\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n                <FilterDiv\n                    pageType='dataCollection' \n                    dataType='fireHistory'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                />\n                <div>\n                    {\n                        this.state.currentView === 'Table View'?\n                        <div>\n                        {\n                            !this.state.data?\n                            <div>Getting data...</div>\n                            :\n                            <MDBDataTable responsive\n                            striped\n                            bordered\n                            data={this.state.data}\n                            />\n                        }\n                    </div>\n                    :\n                    <div>\n                        <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n\n                            <LayersControl position=\"topright\">\n\n                                <LayersControl.BaseLayer name=\"Topology\" checked>\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Street\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Satellite\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Terrain\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                                <LayersControl.BaseLayer name=\"Dark\">\n                                    <TileLayer\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                    url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                    />\n                                </LayersControl.BaseLayer>\n\n                            </LayersControl>\n\n                            <MarkerClusterGroup>\n                                {\n                                    this.state.data == null?\n                                    <div>Waiting for data to load...</div>\n                                    :\n                                    this.state.data.rows.map(\n                                        marker => {\n                                            return (\n                                                <Marker position={[marker['POO_LATITUDE'], marker['POO_LONGITUDE']]} key={marker['OBJECTID']} onclick={() => this.handleFireChange(marker)}>\n                                                    <Popup>\n                                                        <p>Object ID: {marker['OBJECTID']}</p>\n                                                        <p>Lat: {marker['POO_LATITUDE']}</p>\n                                                        <p>Lon: {marker['POO_LONGITUDE']}</p>\n                                                    </Popup>\n                                                </Marker>\n                                            )\n                                        }\n                                    )\n                                }\n                            </MarkerClusterGroup>\n                        </Map>\n                        <div style={{float:'right', padding:'6px', width:'230px'}}>\n                        {\n                            this.state.currentFire == null?\n                            <h3>Select a fire for more info.</h3>\n                            :\n                            <div>\n                                <h3>Fire Information</h3>\n                                <hr/>\n                                {\n                                    this.state.features.map(\n                                        feature => {\n                                            return (\n                                               <div key={feature}>\n                                                   <strong>{feature}: </strong>{this.state.currentFire[feature]}\n                                                   <br/>\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                        }\n                        </div>\n                    </div>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default FireHistoryDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/MyNavbar.js",["185","186"],"import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '../css/MyNavbar.css';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass MyNavbar extends React.Component{\n    render(){        \n        var url = window.location.href;\n\n        return(\n            <div className=\"d-flex\" id=\"wrapper\">\n            <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\n                <div className=\"sidebar-heading\">\n                    <img src='https://upload.wikimedia.org/wikipedia/en/thumb/e/ec/San_Jose_State_Spartans_logo.svg/1200px-San_Jose_State_Spartans_logo.svg.png' alt='SJSU' width='40px' style={{margin:\"0 16px 0 0\"}}></img>\n                    SJSU Wildfire \n                </div>\n                <div className=\"list-group list-group-flush\">\n                    {\n                        url.substr(url.length - 4).includes('com')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" style={{borderRight:'6px solid #3d3d3d'}} >Data Collection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" >Data Collection</Link>\n                    }\n                    {\n                        url.includes('preprocessing')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\" style={{borderRight:'6px solid #3d3d3d'}}>Preprocessing</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\">Preprocessing</Link>\n                    }\n                    {\n                        url.includes('analysis')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" style={{borderRight:'6px solid #3d3d3d'}} >Data Analysis</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" >Data Analysis</Link>\n                    }\n                    {\n                        url.includes('detection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Monitoring / Detection</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\">Fire Monitoring / Detection</Link>\n                    }\n                    {/* {\n                        url.includes('imageDetection')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Detection 2</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/imageDetection\">Fire Detection 2</Link>\n                    } */}\n                    {\n                        url.includes('progression')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Progression</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\">Fire Progression</Link>\n                    }\n                    {\n                        url.includes('risk')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\" style={{borderRight:'6px solid #3d3d3d'}}>Fire Risk Prediction</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\">Fire Risk Prediction</Link>\n                    }\n                    {\n                        url.includes('evaluation')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" style={{borderRight:'6px solid #3d3d3d'}}>Model Evaluation</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" >Model Evaluation</Link>\n                    }\n                    {/* {\n                        url.includes('flask')?\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" style={{borderRight:'6px solid #3d3d3d'}}>Flask examples</Link>\n                        :\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" >Flask examples</Link>\n                    } */}\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\n\n\nexport default MyNavbar;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/WeatherDataAnalysis.js",["187","188","189","190","191","192","193"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass WeatherDataCollection extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Avg temp': '78.6 F',\n                'Lowest temp': '46.9 F',\n                'Highest temp': '99.3 F',\n                'Avg windspeed': '9 mph',\n                'Lowest windspeed': '2 mph',\n                'Highest windspeed': '22 mph',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'NOAA'){\n            this.getNOAAdata(startDate, endDate);\n        }\n    }\n\n    getNOAAdata(start, end){\n        fetch(prodUrl + '/api/getNOAAdata', {\n            method:'POST',\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            var rawData = response['rawData'];\n            var weatherStationData = response['weatherStationData']\n            weatherStationData = JSON.parse(weatherStationData)\n            weatherStationData = weatherStationData['results'];\n\n            // console.log(weatherStationData);\n\n            this.setState({\n                weatherStationData: weatherStationData,\n            })\n\n            var parsedData = JSON.parse(rawData);\n\n            var cols = [];\n            var rows = [];\n        \n            for(const key in parsedData){\n                var newColEntry = {\n                    label: key,\n                    field: key,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(parsedData['DATE'] != null){\n                for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \n                    var newRowEntry = {}\n                    for(const key in parsedData){\n                        var val = parsedData[key][i];\n                        if (val == null){\n                            val = ''\n                        }\n                        newRowEntry[key] = val\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='weather'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://eldoradoweather.com/current/climate/images/San%20Diego.png' alt='weather' width='45%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.westjet.com/vacations/img/destinations/en-weather-charts/United-States-Hawaii/SAN-San-Diego_weather-chart.gif' alt='weather2' height='300px' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default WeatherDataCollection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/SatelliteDataAnalysis.js",["194","195","196","197","198","199","200","201","202"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass SatelliteDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Avg fires per year': '8',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='satellite'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.epa.gov/sites/production/files/styles/large/public/2016-07/wildfires-figure3-2016.png' alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                            <img src='https://eoimages.gsfc.nasa.gov/images/imagerecords/145000/145498/amazon_tamo_2012-2019_count_lrg.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default SatelliteDataAnalysis;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/LandCoverDataAnalysis.js",["203","204","205","206","207","208","209","210","211"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass LandCoverDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Most common land cover': 'fields',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='landCover'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.nrcs.usda.gov/Internet/FSE_MEDIA/stelprdb1083137.png' alt='landCover' width='60%' style={{margin:'20px 0'}}/>\n                            <img src='https://www.researchgate.net/publication/335177876/figure/fig4/AS:792146537877504@1565873860020/Land-Cover-Graph-of-Mataram-in-2008-2013-and-2017.png' alt='landCover2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default LandCoverDataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireDetectionModEval.js",["212","213","214","215","216","217","218","219","220","221","222","223","224","225"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireDetectionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'NOAA',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            summaryData: {\n                'Satellite Image Source': 'Landsat 8',\n                'Tensorflow Model Version': 'Faster RCNN v2.1',\n                'Fire  Detected': 'YES',\n                'Confidence Level': '97%',\n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData2 = this.getData2.bind(this);\n        this.getNOAAdata = this.getNOAAdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getNOAAdata(monthAgo, today);\n\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData2(){\n        <div style={{width:'100%', height:'50px'}}>\n            console.log(\"getData2\")\n            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='60%' style={{margin:'20px 0'}}/>\n        </div>\n    }\n\n    getNOAAdata(start, end){\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireDetection'\n                    getData2={this.getData2}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Detection for: </strong>{this.state.currentCounty} County   date:  {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation Results:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='45%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-prediction.png'} alt='fire' width='30%' style={{margin:'20px 0'}}/>\n                            <img src={process.env.PUBLIC_URL + 'images/fire-precision-recall.png'} alt='fire' width='70%' style={{margin:'20px 0'}}/>\n                        </div>\n                        :\n                        <div>\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_1.png'} alt='fire2' width='70%' style={{margin:'20px 0'}} />\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_2.png'} alt='fire3' width='70%' style={{margin:'20px 0'}} />\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireDetectionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DataAnalysisComponents/FireHistoryDataAnalysis.js",["226","227","228","229","230","231","232","233","234"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDiv from '../Components/FilterDiv';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireHistoryDataAnalysis extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USDA',\n            currentCounty: 'Alameda',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Avg fires per year': '8',\n                'Biggest fire': '2,600 acres',\n                'Smallest fire': '20 acres',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            if(rawData['features'] != null){\n                var i = 0;\n                for(i=0; i < rawData['features'].length; i++){\n                    var newRowEntry = {}\n                    for(var feature of this.state.features){\n                        var val = rawData['features'][i]['attributes'][feature];\n                        if(val == null){\n                            val = ''\n                        }\n                        newRowEntry[feature] = val;\n                    }\n                    rows.push(newRowEntry);\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDiv(){\n        var filterDiv = document.getElementById('filterDiv');\n        if(filterDiv.style.display == ''){\n            filterDiv.style.display = 'none';\n        }\n        else{\n            filterDiv.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDiv \n                    pageType='dataAnalysis'\n                    dataType='fireHistory'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDiv={this.toggleFilterDiv}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Important statistics:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='https://www.nctrails.org/sites/default/files/Fire-Causes-Graph.png' alt='fire' width='60%' style={{margin:'20px 0'}}/>\n                            <img src='https://akfireinfo.files.wordpress.com/2015/07/jun30acreage.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\n                        </div>\n                        :\n                        <div>\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\n                                <LayersControl position=\"topright\">\n\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Street\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Satellite\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Terrain\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.BaseLayer name=\"Dark\">\n                                        <TileLayer\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                        />\n                                    </LayersControl.BaseLayer>\n\n                                    <LayersControl.Overlay name=\"Show Counties\" >\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                    </LayersControl.Overlay>\n\n                                </LayersControl>\n                            </Map>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireHistoryDataAnalysis;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireRiskPredictionModEval.js",["235","236","237","238","239","240","241","242","243","244","245","246","247","248","249"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireRiskPredictionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\n            summaryData: {\n                'Weather Model 1': 'SVM',\n                'Weather Model 2': 'XGBoost',\n                'Weather Model 3': 'Random Forest',\n                'Remote Sensing  Model 1': 'CNN',\n                'Remote Sensing  Model 2': 'MultiLayer Perceptron',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        year = parseInt(year)-1;\n\n        var yearAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: yearAgo,\n            endDate: today,\n        })\n\n        this.getUSDAFireData(yearAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSDAFireData(startDate, endDate);\n        }\n\n    }\n\n    getUSDAFireData(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        // var startYear = start.slice(0, 4);\n        // var endYear = end.slice(0, 4);\n\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\n\n        fetch(prodUrl + '/api/getUSDAFireData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                startDate: start,\n                endDate: end,\n                county: this.state.currentCounty,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var rawData = resData['data'];\n\n            var cols = [];\n            var rows = [];\n    \n            for(const feature of this.state.features){\n                var newColEntry = {\n                    label: feature,\n                    field: feature,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            console.log(rawData);\n            if(rawData != null){\n                if(rawData['error'] == null){\n                    var i = 0;\n                    for(i=0; i < rawData['features'].length; i++){\n                        var newRowEntry = {}\n                        for(var feature of this.state.features){\n                            var val = rawData['features'][i]['attributes'][feature];\n                            if(val == null){\n                                val = ''\n                            }\n                            newRowEntry[feature] = val;\n                        }\n                        rows.push(newRowEntry);\n                    }\n                }\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data,\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='dataAnalysis'\n                    dataType='fireRiskPrediction'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Fire Risk Prediction  for: </strong>{this.state.currentCounty} County  date: {this.state.endDate}\n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Statistic View'?\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <hr/>\n                        \n                       \n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\n\n\n                        </div>\n                        :\n                        <div>\n                            <h3>Evaluation - Weather Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - SVM </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/svm2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - XGBoost </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/xg2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>3 - Random Forest </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/rf2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <hr/>\n                            <h3>Evaluation - Remote Sensing Model:</h3>\n                            <br/>\n                            <hr/>\n                            <h4>1 - CNN </h4>\n                            <br/>\n                            <img src={process.env.PUBLIC_URL + 'images/cnn2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n                            <hr/>\n                            <h4>2 - MultiLayer Perceptron </h4>\n                            <img src={process.env.PUBLIC_URL + 'images/mlp2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireRiskPredictionModEval;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/ModelEvaluationComponents/FireProgressionModEval.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"import React from 'react';\nimport '../css/reactPaginationStyle.css';\nimport { MDBDataTable } from 'mdbreact';\n// import CountySelector from '../Components/CountySelector';\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Plot from 'react-plotly.js';\nimport FilterDivModEval from '../Components/FilterDivModEval';\nimport counties from '../counties.json';\n\nconst devUrl = '';\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\n\nclass FireProgressionModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            source: 'USGS',\n            currentCounty: 'San Diego',\n            lat: props.lat,\n            lon: props.lon,\n            data: null,\n            currentView: 'Statistic View',\n            startDate: null,\n            endDate: null,\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\n            summaryData: {\n                'Fire Animation Start': 'Oct 20, 2007',\n                'Fire Animation End': 'Oct 24, 2007',\n                \n            },\n        }\n\n        this.formatDate = this.formatDate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getUSGSdata = this.getUSGSdata.bind(this);\n        this.handleViewChange = this.handleViewChange.bind(this);\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\n        this.changeCounty = this.changeCounty.bind(this);\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\n\n    }\n\n    componentDidMount(){\n        var today = new Date();\n\n        var year = today.getFullYear();\n        var month = today.getMonth();\n        var day = today.getDate();\n\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if(month < 10){\n            month = \"0\" + month;\n        }\n        if(day < 10){\n            day = \"0\" + day;\n        }\n\n        var monthAgo = year+'-'+month+'-'+day;\n\n        this.setState({\n            startDate: monthAgo,\n            endDate: today,\n        })\n\n        this.getUSGSdata(monthAgo, today);\n    }\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n    \n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n    \n        return [year, month, day].join('-');\n    }\n\n    getData(){\n        var startDate = document.getElementById('startDateInput').value;\n        var endDate = document.getElementById('endDateInput').value;\n\n        var today = new Date();\n        today = this.formatDate(today);\n\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\n            alert(\"Can't pick future dates.\");\n            return;\n        }\n\n        if(startDate > endDate){\n            alert('Start date must be before end date.');\n            return;\n        }\n\n        if(startDate === '' || endDate === ''){\n            alert('Please select a start and end date');\n            return;\n        }\n\n        if(this.state.source === 'USDA'){\n            this.getUSGSdata(startDate, endDate);\n        }\n\n    }\n\n    getUSGSdata(start, end){\n        var lat = this.state.lat;\n        var lon = this.state.lon;\n\n        fetch(prodUrl + '/api/getEarthExplorerData', {\n            method: \"POST\",\n            body: JSON.stringify({\n                lat: lat,\n                lon: lon,\n                startDate: start,\n                endDate: end,\n            })\n        })\n        .then(res => res.json())\n        .then(resData => {\n            var scenes = resData['scenes'];\n\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\n\n            var cols = [];\n            var rows = [];\n\n            for(const col of this.state.features){\n                var newColEntry = {\n                    label: col,\n                    field: col,\n                    sort: 'asc',\n                    width: 150,\n                }\n                cols.push(newColEntry);\n            }\n\n            for(var currentScene in scenes){\n                var newRowEntry = {}\n                for(var col of this.state.features){\n                    var val = scenes[currentScene][col];\n                    if(val == null){\n                        if(col == 'latitude'){\n                            val = lat\n                        }\n                        else if(col == 'longitude'){\n                            val = lon\n                        }\n                        else{\n                            val = ''\n                        }\n                    }\n                    // if(val == null){\n                    //     val = ''\n                    // }\n                    newRowEntry[col] = val\n                }\n                rows.push(newRowEntry);\n            }\n\n            var data = {\n                columns: cols,\n                rows: rows,\n            }\n\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    handleViewChange(event){\n        console.log('changed to: '+event.target.innerHTML);\n        this.setState({\n            currentView: event.target.innerHTML,\n        })\n    }\n\n    toggleFilterDivModEval(){\n        var filterDivModEval = document.getElementById('filterDivModEval');\n        if(filterDivModEval.style.display == ''){\n            filterDivModEval.style.display = 'none';\n        }\n        else{\n            filterDivModEval.style.display = '';\n        }\n    }\n\n    changeCounty(childData){\n        this.setState({\n            currentCounty: childData,\n        })\n    }\n\n    handleStartDateChange(newStartDate){\n        this.setState({\n            startDate: newStartDate,\n        })\n    }\n\n    handleEndDateChange(newEndDate){\n        this.setState({\n            endDate: newEndDate,\n        })\n    }\n\n\n    render(){\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n        });\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        return(\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\n\n                <FilterDivModEval \n                    pageType='actualPrediction'\n                    dataType='fireProgression'\n                    getData={this.getData}\n                    changeCounty={this.changeCounty}\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\n                    currentView={this.state.currentView}\n                    handleViewChange={this.handleViewChange}\n                    handleStartDateChange={this.handleStartDateChange}\n                    handleEndDateChange={this.handleEndDateChange}\n                />\n\n                <p>\n                    <strong>Data for: </strong>{this.state.currentCounty} County 2007-10-20  to 2007-10-24 \n                </p>\n                <hr/>\n                <div>\n                    {\n                        this.state.currentView === 'Prediction'?\n                        <div>\n                            <h3>Fire Spread Ground Truth:</h3>\n                            <br/>\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\n                                {\n                                    Object.keys(this.state.summaryData).map(\n                                        key => {\n                                            return (\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                </div>\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            <hr/>\n\n                            <img src='http://worldlywise.pbworks.com/f/1274641471/All_3D.gif' alt='fire' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n                            <br/>\n                        </div>\n                        :\n                        <div>\n                            <hr/>\n                            <h3>Predicted Fire Progression:</h3>\n                            <hr/>\n                            <img src={process.env.PUBLIC_URL + 'images/spread.gif'} alt='spread2' width='60%' style={{margin:'20px 0'}}/>\n\n                            <hr/>\n\n\n\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\n                            {\n                                this.state.summaryData == null?\n                                <p>Important statistics:</p>\n                                :\n                                <div>\n                                    <p>Important statistics:</p>\n                                    <hr/>\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\n                                        {\n                                            Object.keys(this.state.summaryData).map(\n                                                key => {\n                                                    return (\n                                                        <div key={key} style={{margin:'4px 0'}}>\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\n                                                        </div>\n                                                    )\n                                                }\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            </div>\n\n                        </div>\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default FireProgressionModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/CountySelector.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDivModEval.js",["265","266"],"import React from 'react';\nimport CountySelector from './CountySelector';\n\nclass FilterDivModEval extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.changeStartDate = this.changeStartDate.bind(this);\n        this.changeEndDate = this.changeEndDate.bind(this);\n    }\n\n    changeStartDate(event){\n        this.props.handleStartDateChange(event.target.value);\n    }\n\n    changeEndDate(event){\n        this.props.handleEndDateChange(event.target.value);\n    }\n    \n    render(){\n        return(\n            <div>\n                <div style={{width:'100%', height:'50px'}}>\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\n                        {\n                            this.props.dataType === 'fireDetection'?\n                            'Fire Detection'\n                            :\n                            this.props.dataType === 'fireRiskPrediction'?\n                            'Fire Risk Prediction'\n                            :\n                            this.props.dataType === 'fireProgression'?\n                            'Fire Progression'\n                            :\n                            <div></div>\n                        }\n                    </h4>\n\n                    {\n                        this.props.pageType === 'dataCollection'?\n                            this.props.currentView === 'Table View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\n                        :\n                        this.props.pageType === 'dataAnalysis'?\n                            this.props.currentView === 'Statistic View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Graph View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\n                        :\n                        this.props.pageType === 'actualPrediction'?\n                            this.props.currentView === 'Actual'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Prediction</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Actual</button>\n                        :\n                        <div></div>\n                    }\n\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDivModEval}>\n                        Select \n                        &nbsp;\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <hr/>\n\n                <div style={{display:'none', height:'auto'}} id='filterDivModEval'>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Source: &nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Landsat 8'>Landsat 8</option>\n                                    <option value='GOES 16/17'>GOES 16/17</option>\n                                    <option value='MODIS/TERRA'>MODIS/TERRA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Weather Fire-History'>Weather Fire-History</option>\n                                    <option value='Remote-Sensing Fire-History'>Remote-Sensing Fire-History</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Fire History'>Fire History</option>\n                                    <option value='Remote Sensing'>Remote Sensing</option>\n                                    <option value='Land Cover'>Land Cover</option>\n                                    <option value='Waeather'>Weather</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <div style={{float:'right'}}>\n                            Location:&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='San Diego 8/8/2018'>San Diego 8/8/2018</option>\n                                    <option value='Sonoma 2017'>Sonoma 2017</option>\n                                    <option value='SCU Lightning 2020'>SCU Lightning 2020</option>\n                                    <option value='August Complex 2020'>August Complex 2020</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                        </div>\n                        <br/>\n                        <br/>\n                        <br/>\n                    </div>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Model: &nbsp;&nbsp;&nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'fireDetection'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Faster RCNN'>Faster RCNN</option>\n                                    <option value='Efficient Net'>Efficient Net</option>\n                                    <option value='Retina Net'>Retina Net</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireRiskPrediction'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='SVM'>SVM</option>\n                                    <option value='XGBoost'>XGBoost</option>\n                                    <option value='Random Forest'>Random Forest</option>\n                                    <option value='Multi Layer Perceptron'>Multi Layer Perceptron</option>\n                                    <option value='CNN'>CNN</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireProgression'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='Value Iteration'>Value Iteration</option>\n                                    <option value='DQN'>DQN</option>\n                                    <option value='Policy Gradient'>Policy Gradient</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <button className='btn btn-primary' onClick={this.props.getData2} style={{float:'right', marginRight:'16px'}}>Evaluate Model</button>\n                    </div>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <hr/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterDivModEval;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/FilterDiv.js",["267","268","269"],"import React from 'react';\nimport CountySelector from './CountySelector';\nimport WrccStationSelector from './WrccStationSelector';\n\nclass FilterDiv extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            dataSource: 'WRCC'\n        }\n\n        this.changeStartDate = this.changeStartDate.bind(this);\n        this.changeEndDate = this.changeEndDate.bind(this);\n        this.changeSource = this.changeSource.bind(this);\n        this.changeWrccStation = this.changeWrccStation.bind(this);\n    }\n\n    changeStartDate(event){\n        this.props.handleStartDateChange(event.target.value);\n    }\n\n    changeEndDate(event){\n        this.props.handleEndDateChange(event.target.value);\n    }\n\n    changeSource(event){\n        this.setState({\n            dataSource: event.target.value\n        })\n        // console.log('new source: ' + event.target.value)\n        this.props.handleSourceChange(event.target.value);\n    }\n\n    changeWrccStation(station){\n        this.props.handleWrccStationChange(station);\n    }\n    \n    render(){\n        return(\n            <div>\n                <div style={{width:'100%', height:'50px'}}>\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\n                        {\n                            this.props.dataType === 'weather'?\n                            'Weather'\n                            :\n                            this.props.dataType === 'fireHistory'?\n                            'Fire History'\n                            :\n                            this.props.dataType === 'landCover'?\n                            'Land Cover'\n                            :\n                            this.props.dataType === 'satellite'?\n                            'Satellite'\n                            :\n                            <div></div>\n                        }\n                    </h4>\n\n                    {\n                        this.props.pageType === 'dataCollection'?\n                            this.props.currentView === 'Table View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\n                        :\n                        this.props.pageType === 'dataAnalysis'?\n                            this.props.currentView === 'Statistic View'?\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\n                            :\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\n                        :\n                        <div></div>\n                    }\n\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDiv}>\n                        Filter \n                        &nbsp;\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <hr/>\n\n                <div style={{display:'none', height:'auto'}} id='filterDiv'>\n                    <div style={{width:'100%'}}>\n                        <div style={{float:'left'}}>\n                            Source: &nbsp;&nbsp;\n                            {\n                                this.props.dataType === 'weather'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}} onChange={this.changeSource}>\n                                    <option value='WRCC'>WRCC</option>\n                                    <option value='NOAA'>NOAA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'fireHistory'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='USDA'>USDA</option>\n                                </select>\n                                :\n                                this.props.dataType === 'landCover'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='USGS'>USGS</option>\n                                </select>\n                                :\n                                this.props.dataType === 'satellite'?\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\n                                    <option value='USGS'>USGS</option>\n                                </select>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        {\n                            this.state.dataSource == 'WRCC'?\n                            <div>\n                                <WrccStationSelector handleChange={this.changeWrccStation}/>\n                            </div>\n                            :\n                            <div>\n                                <div style={{float:'right'}}>\n                                    From:&nbsp;\n                                    <input type='date' style={{padding:'10px'}} id=\"startDateInput\" onChange={this.changeStartDate}/>\n                                    &nbsp; - &nbsp;\n                                    <input type='date' style={{padding:'10px'}} id='endDateInput' onChange={this.changeEndDate}/>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;\n                                </div>\n                                <br/>\n                                <br/>\n                                <br/>\n                            </div>\n\n                        }\n                        {/* <div style={{float:'right'}}>\n                            From:&nbsp;\n                            <input type='date' style={{padding:'10px'}} id=\"startDateInput\" onChange={this.changeStartDate}/>\n                            &nbsp; - &nbsp;\n                            <input type='date' style={{padding:'10px'}} id='endDateInput' onChange={this.changeEndDate}/>\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                        </div>\n                        <br/>\n                        <br/>\n                        <br/> */}\n                    </div>\n                    {\n                        this.state.dataSource == 'WRCC'?\n                        <div></div>\n                        :\n                        <div>\n                            <div style={{width:'100%'}}>\n                                <div style={{float:'left'}}>\n                                    County: &nbsp;&nbsp;\n                                    <CountySelector parentCallback={this.props.changeCounty}/>\n                                </div>\n                                <button className='btn btn-primary' onClick={this.props.getData} style={{float:'right', marginRight:'16px'}}>Get Data</button>\n                            </div>\n                            <br/>\n                            <br/>\n                        </div>\n                    }\n                    <hr/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterDiv;\n","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Monitoring.js",["270","271","272","273","274","275","276","277","278","279","280"],"import React from 'react';\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup, Marker, Popup} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport counties from './counties.json';\nimport L from 'leaflet';\nimport MyNavbar from './Components/MyNavbar';\nimport CaFireData from './DetectionComponents/fire_history_ca.json';\n// import ImageDetection from './ImageDetection';\nimport WildfireDetection from './WildfireDetection';\n\nimport RedDot from './images/redDot.svg';\n\nconst myIcon = L.icon({\n    iconUrl: RedDot,\n    iconSize: [32,32],\n});\n\nclass Monitoring extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            currentCounty: null,\n            currentFire: null,\n            latitude: 37.334665328,\n            longitude: -121.875329832,\n            selectedYear: 'Current',\n            currentView: 'Monitoring',\n            events: null\n        };\n\n        this.onCountyClick = this.onCountyClick.bind(this);\n        this.onEachCounty = this.onEachCounty.bind(this);\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\n        this.makeFireMarkers = this.makeFireMarkers.bind(this);\n        this.handleFireSelect = this.handleFireSelect.bind(this);\n        // this.handleCitySearch = this.handleCitySearch.bind(this);\n       \n        this.handleYearChange = this.handleYearChange.bind(this);\n        this.changeView = this.changeView.bind(this);\n        this.makeCurrentFireMarkers = this.makeCurrentFireMarkers.bind(this);\n        this.setCurrentFire = this.setCurrentFire.bind(this);\n    }\n\n    async componentDidMount(){\n        const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n        const {events} = await res.json()\n        // console.log(events)\n        this.setState({\n            events: events\n        })\n    }\n\n    onCountyClick(event){\n        // console.log(event.target.feature.properties.name + ' clicked.');\n        this.setState({\n            currentCounty: event.target.feature.properties.name,\n        })\n    }\n\n    onCountyMouseover(event){\n        event.target.setStyle({\n            fillOpacity: 0.9,\n        });\n    }\n\n    onCountyMouseout(event){\n        event.target.setStyle({\n            fillOpacity: 0.3,\n        });\n    }\n\n    onEachCounty(county, layer){\n        // var countyName = county.properties.name;\n        // layer.bindPopup(countyName);\n\n        layer.on({\n            click: this.onCountyClick,\n            mouseover: this.onCountyMouseover,\n            mouseout: this.onCountyMouseout,\n        })\n    }\n\n    makeFireMarkers(year){\n        var fireMarkers = []\n        Object.keys(CaFireData).map((key) => {\n            if(CaFireData[key]['POO_LATITUDE']!=null && CaFireData[key]['POO_LONGITUDE']!=null){\n                if(year==CaFireData[key]['DISCOVER_YEAR']){\n                fireMarkers.push( \n                    <Marker position={[CaFireData[key]['POO_LATITUDE'], CaFireData[key]['POO_LONGITUDE']]}\n                    onclick={this.handleFireSelect} key={key} acres={20} icon={myIcon}>\n                        <Popup>\n                            <h5>{CaFireData[key]['FIRE_NAME']}</h5>\n                            <p style={{display:''}}>Acres Burned: {CaFireData[key]['TOTAL_ACRES_BURNED']}</p>\n                            <p style={{display:''}}>Year: {CaFireData[key]['DISCOVER_YEAR']}</p>\n                        </Popup>\n                    </Marker>\n            );}\n        }})\n        return fireMarkers;\n    }\n\n    handleYearChange(event){\n        this.setState({currentFire:null, selectedYear: event.target.value});\n    }\n\n    handleFireSelect(event){\n        // console.log(event);\n        // alert(event.target._popup.options.children);\n        var fire = {\n            'name': event.target._popup.options.children[0].props.children,\n            'latitude': event.latlng.lat,\n            'longitude': event.latlng.lng,\n            'acres burned': event.target._popup.options.children[1].props.children,\n            'date': event.target._popup.options.children[2].props.children,  \n        }\n        this.setState({\n            currentFire: fire,\n        })\n        // console.log(fire);\n    }\n\n    // handleCitySearch(event){\n    //     event.preventDefault();\n    //     var cityInput = document.getElementById('citySearchInput').value;\n\n    //     var url = new URL('http://api.positionstack.com/v1/forward'),\n    //         params = {\n    //             access_key: '559dea75d5799296cfe4e650c073d4b2',\n    //             query: cityInput,\n    //         }\n    //     Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n    //     fetch(url)\n    //     .then(res => res.json())\n    //     .then(response => {\n    //         // console.log(data);\n    //         if(response['data'].length === 0){\n    //             alert('Please enter a valid location');\n    //         }\n    //         else{\n    //             var data = response['data'][0];\n    //             this.setState({\n    //                 latitude: data['latitude'],\n    //                 longitude: data['longitude']\n    //             })\n    //         }\n    //     })\n    //     document.getElementById('citySearchInput').value = '';\n    // }\n\n    changeView(newView){\n        this.setState({\n            currentView: newView\n        })\n    }\n\n    makeCurrentFireMarkers(){\n        var markers = []\n        var events = this.state.events;\n        var e = null;\n\n        if(events != null){\n            for(var i=0; i<events.length; i++){\n                e = events[i]\n                var pos = [ e['geometries'][0]['coordinates'][1], e['geometries'][0]['coordinates'][0] ]\n\n                // console.log(e)\n\n                const fire = {\n                    'name': e['title'],\n                    'latitude': pos[0],\n                    'longitude': pos[1],\n                    'date': 'Current',\n                    'acres burned': 'Unknown',\n                }\n\n                if(pos[0] != undefined){\n                    markers.push(\n                        <Marker position={pos} key={i} onClick={this.setCurrentFire.bind(this, fire)} icon={myIcon}>\n                            <Popup>\n                                <h5>{e['title']}</h5>\n                                <p style={{display:''}}>Acres Burned: Unknown</p>\n                                <p style={{display:''}}>Year: Current</p>\n                            </Popup>\n                        </Marker>\n                    )\n                }\n            }\n        }\n        return markers\n    }\n\n    setCurrentFire(newFire){\n        this.setState({\n            currentFire: newFire\n        })\n    }\n\n    render(){        \n        // var position = [37.334665328, -121.875329832];\n        var fmarkers = null;\n        {\n            this.state.selectedYear == 'Current'?\n            fmarkers = this.makeCurrentFireMarkers()\n            :\n            fmarkers = this.makeFireMarkers(this.state.selectedYear)\n        }\n\n        // var fmarkers = this.makeFireMarkers(this.state.selectedYear);\n\n        var countyStyle = {\n            color: '#4a83ec',\n            weight: 1,\n            fillColor: \"#AED7FF\",\n            fillOpacity: 0.3,\n        }\n\n        // delete L.Icon.Default.prototype._getIconUrl;\n        // L.Icon.Default.mergeOptions({\n        // iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n        // iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n        // shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        // });\n\n        var header = null;\n        {\n            this.state.currentView == 'Monitoring'?\n            header = <h1 className='mt-2'>Fire Monitoring <a style={{color:'grey'}} onClick={this.changeView.bind(this, 'Detection')}>/ Detection</a></h1>\n            :\n            header = <h1 className='mt-2'>Fire <a style={{color:'grey'}} onClick={this.changeView.bind(this, 'Monitoring')}>Monitoring / </a>Detection</h1>\n        }\n\n        var styles = {\n            buttonGroupButton: {\n                width: '20%',\n                backgroundColor: '#f0f0f0', \n                border: '1px solid grey',\n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius: '20px',\n                color:'black',\n                outline:'none'\n            },\n            buttonGroupButtonActive: {\n                width: '20%',\n                backgroundColor: '#1580fb', \n                border: '1px solid #1580fb',\n                color: 'white', \n                padding: '10px 24px', \n                float: 'left',\n                margin:'0 20px 0 0',\n                borderRadius:'20px',\n                outline:'none'\n            }\n        }\n\n        return(\n            <div>\n                <MyNavbar/>\n\n                <div style={{marginLeft:'15rem'}}>\n\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\n                        <h1 className='mt-2'>Fire Monitoring / Detection</h1>\n                        {/* {header} */}\n                    </div>\n\n                    {\n                        this.state.currentView == 'Monitoring'?\n                        \n                        <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n                            <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                                <button style={styles.buttonGroupButtonActive}>Monitoring</button>\n                                <button style={styles.buttonGroupButton} onClick={this.changeView.bind(this, 'Detection')}>Detection</button>\n                            </div>\n                            <hr style={{margin:'0px'}}/>\n\n                            <div style={{width:\"100%\"}}>\n                                <Map style={{height:'calc(100vh - 140px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={[this.state.latitude, this.state.longitude]}>\n\n                                    <LayersControl position=\"topright\">\n\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Street\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Satellite\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Terrain\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.BaseLayer name=\"Dark\">\n                                            <TileLayer\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n                                            />\n                                        </LayersControl.BaseLayer>\n\n                                        <LayersControl.Overlay name=\"Show Counties\" >\n                                            <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\n                                        </LayersControl.Overlay>\n\n                                        <LayersControl.Overlay name=\"Show Markers\" checked>\n                                            <FeatureGroup>\n                                                {fmarkers}\n                                            </FeatureGroup>\n                                        </LayersControl.Overlay>\n                                        \n                                    </LayersControl>\n                                </Map>\n\n                                <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\n                                    {/* <div style={{marginTop:'16px'}}>\n                                        <form onSubmit={this.handleCitySearch}>\n                                            <div className=\"col-lg-10 mb-3\">\n                                                <div className=\"input-group\" style={{width:'226px'}}>\n                                                    <input type=\"text\" className=\"form-control rounded-0\" id=\"citySearchInput\" placeholder=\"City Name\" required />\n                                                    <div className=\"input-group-prepend\">\n                                                        <input type=\"submit\" value=\"Search\" className=\"btn btn-primary btn-sm rounded-0\" id=\"inputGroupPrepend2\" style={{backgroundColor:'#1580fb'}}/>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div> */}\n                                        <div style={{marginTop:'16px'}}>\n                                            <div className=\"col-lg-10 mb-3\">\n                                                <div className=\"input-group\" style={{width:'226px'}}>\n                                                    <label style={{width:'100%'}}>Select a Year\n                                                    <select className=\"form-control rounded-0\" value={this.state.selectedYear} onChange={this.handleYearChange}>\n                                                    <option value=\"2015\">2015</option>\n                                                    <option value=\"2016\">2016</option>\n                                                    <option value=\"2017\">2017</option>\n                                                    <option value=\"2018\">2018</option>\n                                                    <option value=\"2019\">2019</option>\n                                                    <option value='Current'>Current</option>\n                                                    </select>\n                                                    </label>\n                                                    <div className=\"input-group-prepend\">  \n                                                    </div>\n                                                </div>\n                                            </div>\n                                    \n                                        </div>\n                                        <hr style={{margin:'16px'}}/>\n{/* \n                                        <div style={{border:'1px solid #d9dadb', margin:'16px', padding:'10px', backgroundColor:'#E9ECEF'}}>\n                                            <h6>Time of Detection</h6>\n                                            <hr style={{margin:'0 0 6px 0'}}/>\n                                            <span style={dotStyles.redDot}></span>\n                                            &nbsp;&nbsp; 0 - 1 hour ago\n                                            <br/>\n                                            <span style={dotStyles.orangeDot}></span>\n                                            &nbsp;&nbsp; 1 - 6 hours ago\n                                            <br/>\n                                            <span style={dotStyles.greenDot}></span>\n                                            &nbsp;&nbsp; 6 - 12 hours ago\n                                            <br/>\n                                            <span style={dotStyles.blueDot}></span>\n                                            &nbsp;&nbsp; Past Fires\n                                            <br/>\n                                        </div> */}\n\n                                        <div style={{margin:'0 16px'}}>\n                                            <h4 style={{margin:'0'}}>Information</h4>\n                                            <hr style={{margin:'0'}}/>\n                                            <p>Fire Data From California Fire History</p>\n                                        </div>\n\n                                        <div style={{height:'100%', overflow:'auto', margin:'8px 16px'}}>\n                                        {\n                                            this.state.currentFire == null?\n                                            <p>Select a fire to view data</p>\n                                            :\n                                            <div>\n                                                <strong>Name: </strong>{this.state.currentFire.name}\n                                                <br/>\n                                                <strong>Latitude: </strong>{this.state.currentFire.latitude}\n                                                <br/>\n                                                <strong>Longitude: </strong>{this.state.currentFire.longitude}\n                                                <br/>\n                                                <strong>Year Of Occurance: </strong>{this.state.currentFire['date']}\n                                                <br/>\n                                                <strong>{this.state.currentFire['acres burned']}</strong>\n                                                <br/>\n                                            </div>\n                                        }\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        :\n                        <div>\n                            {/* <ImageDetection /> */}\n                            <WildfireDetection \n                                viewChange = {this.changeView}\n                            />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Monitoring;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/WildfireDetection.js",["281","282"],"import React from 'react';\nimport DetectionDetail from './DetectionComponents/DetectionDetail.js';\n// import './DetectionComponents/Pages.css';\n// import './DetectionComponents/WildfireDetection.css';\nimport './DetectionComponents/example-fire-detection.png';\nimport DetectionList from './DetectionComponents/DetectionList.js';\nimport DetectionImage from './DetectionComponents/DetectionImage.js';\n\n\nclass WildfireDetection extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      selectedFireImg: null,\n      bounding_boxes: [],\n      detection_scores: [],\n      detection_classes: [],\n      selectedFile: null,\n      loading: false,\n      inputFileUrl: null,\n      area: 'North California',\n      imageColor: 'True Color Composite',\n      date: null,\n      gotInputImage: false,\n    };\n\n    this.getFile = this.getFile.bind(this)\n\n  }\n\n  async componentDidMount(){\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = yyyy + '-' + mm + '-' + dd;\n\n    this.setState({\n      date: today\n    })\n\n    setTimeout(() => { this.getFile(); }, 10);\n\n  }\n\n  async getFile(){\n    this.setState({\n      gotInputImage: false\n    })\n    var url = 'https://wvs.earthdata.nasa.gov/api/v1/snapshot?REQUEST=GetSnapshot&&CRS=EPSG:4326&WRAP=DAY&LAYERS='    \n    var height = 800\n    if(this.state.imageColor === 'True Color Composite'){\n      url += 'MODIS_Terra_CorrectedReflectance_TrueColor'\n    }\n    else{\n      url += 'MODIS_Terra_CorrectedReflectance_Bands721'\n    }\n    url += '&FORMAT=image/jpeg&HEIGHT='+height+'&WIDTH='+height+'&BBOX='\n\n    if(this.state.area === 'North California'){\n      url += '37,-125,42,-120&TIME='\n    }\n    else{\n      url += '32,-122,39,-114&TIME='\n    }\n    url += this.state.date\n\n    const res = await fetch(url)\n    console.log(res)\n    const blob = await res.blob()\n    const file = new File([blob], 'image.jpg', {type: blob.type});\n    console.log(file)\n\n    this.setState({\n      selectedFile: file,\n      inputFileUrl: url,\n      gotInputImage: true\n    })\n  }\n\n  onFileChange = (event) => {\n    // Update the state\n    this.setState({ \n      inputFileUrl: URL.createObjectURL(event.target.files[0]),\n      selectedFile: event.target.files[0]\n    })\n    console.log(event.target.files[0])\n  }\n\n  // on file upload (click the upload button)\n  onFileUpload = () => {\n    console.log('running onFileUpload')\n    window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight);  // scroll to bottom automatically\n\n    // Request made to the backend api\n    // Call to fire detection API\n    this.setState({ loading: true });\n    this.detectFire();\n    // wait 10 seconds to allow detectFire to process\n    setTimeout(() => { this.detectScore(); }, 8000);\n\n  }\n\n  // Makes a call to prediction api results\n  // which include detection boxes, scores, and classifications\n  async detectScore() {\n    console.log('running detect score')\n    // Fetch request to wpp module\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/result', {\n      method: 'POST'\n    })\n    .then((response) => {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        start(controller) {\n          // The following function handles each data chunk\n          function push() {\n            // \"done\" is a Boolean and value a \"Uint8Array\"\n            reader.read().then(({ done, value }) => {\n              // Is there no more data to read?\n              if (done) {\n                // Tell the browser that we have finished sending data\n                controller.close();\n                return;\n              }\n              // Get the data and send it to the browser via the controller\n              controller.enqueue(value);\n              push();\n            });\n          };\n\n          push();\n        }\n      })\n\n    })\n    .then(stream => new Response(stream))\n    .then(response => {\n      response.json().then(data => ({\n        data: data,\n        status: response.status\n      }))\n      .then(res => {\n        const detectionBoxes = res.data.predictions[0].detection_boxes;\n        const detectionScores = res.data.predictions[0].detection_scores;\n        const detectionClasses = res.data.predictions[0].detection_classes;\n\n        this.setDetectionInfo(detectionBoxes, detectionScores, detectionClasses);\n      })\n    })\n    .catch(error => console.log(\"ERROR:\", error));\n\n  }\n\n  // Set the state for the detection info\n  setDetectionInfo = (boxes, scores, classes) => {\n    let i = 0,\n     realScores = [],\n     boundingBoxes = [],\n     realClasses = [];\n    while(scores[i] > 0.90) {\n      realScores.push(scores[i]);\n      i++;\n    }\n    for(let j = 0; j < i; j++) {\n      boundingBoxes.push(boxes[j]);\n      realClasses.push(classes[j]);\n    }\n\n    this.setState({\n      bounding_boxes: boundingBoxes,\n      detection_scores: realScores,\n      detection_classes: realClasses\n    })\n\n  }\n\n  // Comsumes the ReadableStream from the Fetch call\n  async detectFire() {\n    console.log('running detect fire')\n\n    const formData = new FormData();\n    formData.append('file', this.state.selectedFile);\n\n    fetch('https://wpp-fire-detection-ml.herokuapp.com/predict', {\n      method: 'POST',\n      body: formData,\n\n    })\n    .then(res => {\n      // Start loading\n      //this.setState({ loading: true });\n\n      console.log(res)\n\n      const reader = res.body.getReader();\n      if(!res.ok) {\n        throw Error(\"Error getting the predict image\")\n      }\n      return new ReadableStream({\n        start(controller) {\n          return pump();\n          function pump() {\n            return reader.read().then(({ done, value }) => {\n              // When no more data needs to be consumed, close the stream\n              if (done) {\n                  controller.close();\n                  return;\n              }\n              // Enqueue the next data chunk into our target stream\n              controller.enqueue(value);\n              return pump();\n            });\n          }\n        }\n      })\n    })\n    .then(stream => new Response(stream))\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => {\n\n      // set the state of Fire Image URL to the made url\n      this.setState({\n        fireImgUrl: url,\n        loading: false\n      });\n    })\n    .catch(err => console.error(err));\n  }\n\n  // Fire Functions\n  onFireSelect = (fire) => {\n    this.setState({ selectedFire: fire });\n  }\n\n  render() {\n    var styles = {\n      buttonGroupButton: {\n          width: '20%',\n          backgroundColor: '#f0f0f0', \n          border: '1px solid grey',\n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius: '20px',\n          color:'black',\n          outline:'none'\n      },\n      buttonGroupButtonActive: {\n          width: '20%',\n          backgroundColor: '#1580fb', \n          border: '1px solid #1580fb',\n          color: 'white', \n          padding: '10px 24px', \n          float: 'left',\n          margin:'0 20px 0 0',\n          borderRadius:'20px',\n          outline:'none'\n      }\n    }\n\n    return (\n      <div>\n        <div>\n          <div style={{position:'absolute', marginTop:'72px', zIndex:'-100'}}>\n            <div style={{margin:'10px 0 0 20px', width:'75vw'}}>\n\n              {/* <h1>Wildfire Detection</h1> */}\n              <div style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap', margin:'10px'}}>\n                  <button style={styles.buttonGroupButton} onClick={this.props.viewChange.bind(this, 'Monitoring')}>Monitoring</button>\n                  <button style={styles.buttonGroupButtonActive}>Detection</button>\n              </div>\n              <hr style={{margin:'0px'}}/>\n              \n              <div style={{margin:'10px'}}>\n\n                <div style={{display:'flex', justifyContent:'center'}}>\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({area: e.target.value}); setTimeout(()=>{ this.getFile()}, 10) }}>\n                    <option value='North California'>North California</option>\n                    <option value='South California'>South California</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <select style={{padding:'16px'}} onChange={(e)=>{this.setState({imageColor: e.target.value}); setTimeout(() =>{this.getFile()}, 10) }}>\n                    <option value='True Color Composite'>True Color Composite</option>\n                    <option value='False Color Composite'>False Color Composite</option>\n                  </select>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <input type='date' onChange={(e)=>{this.setState({date: e.target.value}); setTimeout(()=>{this.getFile()}, 10)}}/>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n                  <button className='btn btn-primary' onClick={this.onFileUpload}>Run detection</button>\n\n                </div>\n                <hr/>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%'}}>\n                  <h5 style={{fontWeight:'bold'}}>Input Image:</h5>\n                  <hr/>\n                  {this.state.area}, {this.state.imageColor}, {this.state.date}:\n                  <br/>\n                  <br/>\n\n                  {\n                    this.state.gotInputImage === false?\n                    <div>Loading...</div>\n                    :\n                    <img src={this.state.inputFileUrl} width='100%' />\n                  }\n                </div>\n                <br/>\n                \n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'60%', float:'left', marginBottom:'40px'}}>\n                  <h5 style={{fontWeight:'bold'}}>Output Image</h5>\n                  <hr/>\n                  <DetectionImage url={this.state.fireImgUrl} loading={this.state.loading} />\n                </div>\n\n                <div style={{border:'1px solid grey', borderRadius:'10px', padding:'10px', width:'38%', float:'right'}}>\n                  <h5 style={{fontWeight:'bold'}}>Detection List</h5>\n                  <hr/>\n                  <DetectionList\n                    boxes={this.state.bounding_boxes}\n                    scores={this.state.detection_scores}\n                    classes={this.state.detection_classes}\n                  />\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n\n};\n\nexport default WildfireDetection;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionList.js",["283"],"import React from 'react';\nimport DetectionDetail from './DetectionDetail';\n\nconst DetectionList = ({ boxes, scores, classes }) => {\n  const fires = [];\n\n  if(scores.length == classes.length) {\n    for(let i = 0; i<boxes.length; i++) {\n      fires.push([boxes[i], scores[i], classes[i], i]);\n    }\n  }\n\n  const renderedList = fires.map((fire) => {\n    return (\n      <DetectionDetail\n        box={fire[0]}\n        score={fire[1]}\n        classification={fire[2]}\n        key={fire[4]}\n      />\n    );\n  });\n\nreturn <div className=\"ui relaxed divided list\">{renderedList}</div>\n}\n\nexport default DetectionList;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionDetail.js",["284"],"import React from 'react'\n\nconst DetectionDetail = ({box, score, classification, key}) => {\n\n  let topLeftPoint = '',\n        bottomRightPoint = '',\n        detectionConfidences = 0,\n        entityClassification = '';\n  // if detail exists, parse the information given back\n  if(box && score && classification){\n\n    topLeftPoint = formatTopLeft(box);\n    bottomRightPoint = formatBottomRight(box);\n    detectionConfidences = formatPercent(score);\n    entityClassification = classification == 1 ? 'Fire' : 'Smoke';\n  }\n  else {\n    return (\n      <div className=\"ui card fluid\">\n        <div className=\"content\">\n          <p className=\"description\">No Image Selected...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ui card\">\n      <div className=\"content\">\n        <p className=\"header\">{entityClassification} Entity {key}</p>\n        \n        <div className=\"description\">\n          <table className=\"ui very basic collapsing celled table\">\n            <thead>\n              <tr>\n                <th>Detail</th>\n                <th>Info</th>\n              </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td>Classification</td>\n                <td>{entityClassification}</td>\n              </tr>\n              <tr>\n                <td>Confidence</td>\n                <td>{detectionConfidences}</td>\n              </tr>\n              <tr>\n                <td>Top Left Point</td>\n                <td>{topLeftPoint}</td>\n              </tr>\n              <tr>\n                <td>Bottom Right Point</td>\n                <td>{bottomRightPoint}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction formatTopLeft(box) {\n  return \"(\" + box[0].toFixed(3) + \", \" + box[1].toFixed(3) + \")\";\n}\n\nfunction formatBottomRight(box) {\n  return \" (\" + box[2].toFixed(3) + \", \" + box[3].toFixed(3) + \")\";\n}\n\nfunction formatPercent(score) {\n  return (score * 100).toFixed(1) + \"%\";\n}\n\nexport default DetectionDetail;","/Users/sukhvirsingh/Desktop/wildfire-prediction/src/DetectionComponents/DetectionImage.js",[],"/Users/sukhvirsingh/Desktop/wildfire-prediction/src/Components/WrccStationSelector.js",[],{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":57,"column":13,"nodeType":"291","messageId":"292","endLine":57,"endColumn":21},{"ruleId":"289","severity":1,"message":"293","line":2,"column":49,"nodeType":"291","messageId":"292","endLine":2,"endColumn":61},{"ruleId":"289","severity":1,"message":"290","line":56,"column":13,"nodeType":"291","messageId":"292","endLine":56,"endColumn":21},{"ruleId":"289","severity":1,"message":"294","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":16},{"ruleId":"295","severity":1,"message":"296","line":74,"column":41,"nodeType":"297","endLine":74,"endColumn":109},{"ruleId":"295","severity":1,"message":"296","line":75,"column":41,"nodeType":"297","endLine":75,"endColumn":107},{"ruleId":"295","severity":1,"message":"296","line":80,"column":37,"nodeType":"297","endLine":80,"endColumn":108},{"ruleId":"295","severity":1,"message":"296","line":81,"column":37,"nodeType":"297","endLine":81,"endColumn":103},{"ruleId":"289","severity":1,"message":"298","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":22},{"ruleId":"289","severity":1,"message":"299","line":10,"column":7,"nodeType":"291","messageId":"292","endLine":10,"endColumn":13},{"ruleId":"300","severity":1,"message":"301","line":146,"column":32,"nodeType":"302","messageId":"303","endLine":146,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":149,"column":37,"nodeType":"302","messageId":"303","endLine":149,"endColumn":39},{"ruleId":"300","severity":1,"message":"301","line":178,"column":36,"nodeType":"302","messageId":"303","endLine":178,"endColumn":38},{"ruleId":"289","severity":1,"message":"298","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":22},{"ruleId":"289","severity":1,"message":"304","line":102,"column":13,"nodeType":"291","messageId":"292","endLine":102,"endColumn":16},{"ruleId":"289","severity":1,"message":"305","line":103,"column":13,"nodeType":"291","messageId":"292","endLine":103,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":109,"column":36,"nodeType":"302","messageId":"303","endLine":109,"endColumn":38},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"299","line":14,"column":7,"nodeType":"291","messageId":"292","endLine":14,"endColumn":13},{"ruleId":"300","severity":1,"message":"301","line":156,"column":30,"nodeType":"302","messageId":"303","endLine":156,"endColumn":32},{"ruleId":"300","severity":1,"message":"301","line":159,"column":35,"nodeType":"302","messageId":"303","endLine":159,"endColumn":37},{"ruleId":"300","severity":1,"message":"301","line":191,"column":29,"nodeType":"302","messageId":"303","endLine":191,"endColumn":31},{"ruleId":"308","severity":1,"message":"309","line":200,"column":21,"nodeType":"291","messageId":"310","endLine":200,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":290,"column":36,"nodeType":"302","messageId":"303","endLine":290,"endColumn":38},{"ruleId":"289","severity":1,"message":"311","line":448,"column":26,"nodeType":"291","messageId":"292","endLine":448,"endColumn":31},{"ruleId":"289","severity":1,"message":"312","line":490,"column":13,"nodeType":"291","messageId":"292","endLine":490,"endColumn":21},{"ruleId":"300","severity":1,"message":"313","line":508,"column":39,"nodeType":"302","messageId":"303","endLine":508,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":520,"column":51,"nodeType":"302","messageId":"303","endLine":520,"endColumn":53},{"ruleId":"300","severity":1,"message":"301","line":561,"column":51,"nodeType":"302","messageId":"303","endLine":561,"endColumn":53},{"ruleId":"300","severity":1,"message":"301","line":573,"column":72,"nodeType":"302","messageId":"303","endLine":573,"endColumn":74},{"ruleId":"289","severity":1,"message":"298","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":22},{"ruleId":"289","severity":1,"message":"299","line":11,"column":7,"nodeType":"291","messageId":"292","endLine":11,"endColumn":13},{"ruleId":"289","severity":1,"message":"304","line":108,"column":13,"nodeType":"291","messageId":"292","endLine":108,"endColumn":16},{"ruleId":"289","severity":1,"message":"305","line":109,"column":13,"nodeType":"291","messageId":"292","endLine":109,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":170,"column":36,"nodeType":"302","messageId":"303","endLine":170,"endColumn":38},{"ruleId":"289","severity":1,"message":"299","line":5,"column":7,"nodeType":"291","messageId":"292","endLine":5,"endColumn":13},{"ruleId":"289","severity":1,"message":"314","line":6,"column":7,"nodeType":"291","messageId":"292","endLine":6,"endColumn":14},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"300","severity":1,"message":"301","line":194,"column":36,"nodeType":"302","messageId":"303","endLine":194,"endColumn":38},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"300","severity":1,"message":"301","line":159,"column":32,"nodeType":"302","messageId":"303","endLine":159,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":162,"column":37,"nodeType":"302","messageId":"303","endLine":162,"endColumn":39},{"ruleId":"300","severity":1,"message":"301","line":198,"column":36,"nodeType":"302","messageId":"303","endLine":198,"endColumn":38},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"289","severity":1,"message":"304","line":125,"column":13,"nodeType":"291","messageId":"292","endLine":125,"endColumn":16},{"ruleId":"289","severity":1,"message":"305","line":126,"column":13,"nodeType":"291","messageId":"292","endLine":126,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":194,"column":36,"nodeType":"302","messageId":"303","endLine":194,"endColumn":38},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"318","line":5,"column":9,"nodeType":"291","messageId":"292","endLine":5,"endColumn":12},{"ruleId":"289","severity":1,"message":"319","line":5,"column":14,"nodeType":"291","messageId":"292","endLine":5,"endColumn":23},{"ruleId":"289","severity":1,"message":"320","line":5,"column":25,"nodeType":"291","messageId":"292","endLine":5,"endColumn":38},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"321","line":5,"column":55,"nodeType":"291","messageId":"292","endLine":5,"endColumn":62},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"322","line":11,"column":8,"nodeType":"291","messageId":"292","endLine":11,"endColumn":16},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"289","severity":1,"message":"314","line":14,"column":7,"nodeType":"291","messageId":"292","endLine":14,"endColumn":14},{"ruleId":"300","severity":1,"message":"301","line":113,"column":43,"nodeType":"302","messageId":"303","endLine":113,"endColumn":45},{"ruleId":"289","severity":1,"message":"323","line":148,"column":13,"nodeType":"291","messageId":"292","endLine":148,"endColumn":24},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"289","severity":1,"message":"304","line":125,"column":13,"nodeType":"291","messageId":"292","endLine":125,"endColumn":16},{"ruleId":"289","severity":1,"message":"305","line":126,"column":13,"nodeType":"291","messageId":"292","endLine":126,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":194,"column":36,"nodeType":"302","messageId":"303","endLine":194,"endColumn":38},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"318","line":5,"column":9,"nodeType":"291","messageId":"292","endLine":5,"endColumn":12},{"ruleId":"289","severity":1,"message":"319","line":5,"column":14,"nodeType":"291","messageId":"292","endLine":5,"endColumn":23},{"ruleId":"289","severity":1,"message":"320","line":5,"column":25,"nodeType":"291","messageId":"292","endLine":5,"endColumn":38},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"321","line":5,"column":55,"nodeType":"291","messageId":"292","endLine":5,"endColumn":62},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"322","line":11,"column":8,"nodeType":"291","messageId":"292","endLine":11,"endColumn":16},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"289","severity":1,"message":"304","line":127,"column":13,"nodeType":"291","messageId":"292","endLine":127,"endColumn":16},{"ruleId":"289","severity":1,"message":"305","line":128,"column":13,"nodeType":"291","messageId":"292","endLine":128,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":199,"column":43,"nodeType":"302","messageId":"303","endLine":199,"endColumn":45},{"ruleId":"289","severity":1,"message":"323","line":234,"column":13,"nodeType":"291","messageId":"292","endLine":234,"endColumn":24},{"ruleId":"289","severity":1,"message":"315","line":3,"column":10,"nodeType":"291","messageId":"292","endLine":3,"endColumn":22},{"ruleId":"289","severity":1,"message":"318","line":5,"column":9,"nodeType":"291","messageId":"292","endLine":5,"endColumn":12},{"ruleId":"289","severity":1,"message":"319","line":5,"column":14,"nodeType":"291","messageId":"292","endLine":5,"endColumn":23},{"ruleId":"289","severity":1,"message":"320","line":5,"column":25,"nodeType":"291","messageId":"292","endLine":5,"endColumn":38},{"ruleId":"289","severity":1,"message":"316","line":5,"column":40,"nodeType":"291","messageId":"292","endLine":5,"endColumn":46},{"ruleId":"289","severity":1,"message":"306","line":5,"column":48,"nodeType":"291","messageId":"292","endLine":5,"endColumn":53},{"ruleId":"289","severity":1,"message":"321","line":5,"column":55,"nodeType":"291","messageId":"292","endLine":5,"endColumn":62},{"ruleId":"289","severity":1,"message":"307","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":26},{"ruleId":"289","severity":1,"message":"317","line":9,"column":8,"nodeType":"291","messageId":"292","endLine":9,"endColumn":12},{"ruleId":"289","severity":1,"message":"322","line":11,"column":8,"nodeType":"291","messageId":"292","endLine":11,"endColumn":16},{"ruleId":"289","severity":1,"message":"299","line":13,"column":7,"nodeType":"291","messageId":"292","endLine":13,"endColumn":13},{"ruleId":"300","severity":1,"message":"301","line":158,"column":32,"nodeType":"302","messageId":"303","endLine":158,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":161,"column":37,"nodeType":"302","messageId":"303","endLine":161,"endColumn":39},{"ruleId":"300","severity":1,"message":"301","line":197,"column":43,"nodeType":"302","messageId":"303","endLine":197,"endColumn":45},{"ruleId":"289","severity":1,"message":"323","line":232,"column":13,"nodeType":"291","messageId":"292","endLine":232,"endColumn":24},{"ruleId":"289","severity":1,"message":"298","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":22},{"ruleId":"324","severity":1,"message":"325","line":25,"column":69,"nodeType":"326","messageId":"303","endLine":25,"endColumn":76},{"ruleId":"324","severity":1,"message":"325","line":44,"column":69,"nodeType":"326","messageId":"303","endLine":44,"endColumn":76},{"ruleId":"300","severity":1,"message":"301","line":118,"column":51,"nodeType":"302","messageId":"303","endLine":118,"endColumn":53},{"ruleId":"300","severity":1,"message":"301","line":149,"column":47,"nodeType":"302","messageId":"303","endLine":149,"endColumn":49},{"ruleId":"327","severity":1,"message":"328","line":88,"column":43,"nodeType":"329","messageId":"330","endLine":88,"endColumn":45},{"ruleId":"300","severity":1,"message":"301","line":90,"column":24,"nodeType":"302","messageId":"303","endLine":90,"endColumn":26},{"ruleId":"300","severity":1,"message":"313","line":179,"column":27,"nodeType":"302","messageId":"303","endLine":179,"endColumn":29},{"ruleId":"331","severity":1,"message":"332","line":204,"column":9,"nodeType":"333","messageId":"334","endLine":209,"endColumn":10},{"ruleId":"300","severity":1,"message":"301","line":205,"column":37,"nodeType":"302","messageId":"303","endLine":205,"endColumn":39},{"ruleId":"331","severity":1,"message":"332","line":228,"column":9,"nodeType":"333","messageId":"334","endLine":233,"endColumn":10},{"ruleId":"300","severity":1,"message":"301","line":229,"column":36,"nodeType":"302","messageId":"303","endLine":229,"endColumn":38},{"ruleId":"335","severity":1,"message":"336","line":230,"column":59,"nodeType":"297","endLine":230,"endColumn":135},{"ruleId":"289","severity":1,"message":"337","line":232,"column":13,"nodeType":"291","messageId":"292","endLine":232,"endColumn":19},{"ruleId":"335","severity":1,"message":"336","line":232,"column":48,"nodeType":"297","endLine":232,"endColumn":125},{"ruleId":"300","severity":1,"message":"301","line":272,"column":48,"nodeType":"302","messageId":"303","endLine":272,"endColumn":50},{"ruleId":"289","severity":1,"message":"338","line":2,"column":8,"nodeType":"291","messageId":"292","endLine":2,"endColumn":23},{"ruleId":"295","severity":1,"message":"296","line":312,"column":21,"nodeType":"297","endLine":312,"endColumn":71},{"ruleId":"300","severity":1,"message":"301","line":7,"column":20,"nodeType":"302","messageId":"303","endLine":7,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":15,"column":43,"nodeType":"302","messageId":"303","endLine":15,"endColumn":45},"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"no-unused-vars","'position' is assigned a value but never used.","Identifier","unusedVar","'FeatureGroup' is defined but never used.","'ReactDOM' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CountySelector' is defined but never used.","'devUrl' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'Popup' is defined but never used.","'MarkerClusterGroup' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'value' is assigned a value but never used.","'wrcc_url' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'prodUrl' is assigned a value but never used.","'MDBDataTable' is defined but never used.","'Marker' is defined but never used.","'Plot' is defined but never used.","'Map' is defined but never used.","'TileLayer' is defined but never used.","'LayersControl' is defined but never used.","'GeoJSON' is defined but never used.","'counties' is defined but never used.","'countyStyle' is assigned a value but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'header' is assigned a value but never used.","'DetectionDetail' is defined but never used.","no-global-assign","no-unsafe-negation"]